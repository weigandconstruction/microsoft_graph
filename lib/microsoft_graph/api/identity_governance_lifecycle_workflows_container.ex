# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.IdentityGovernanceLifecycleWorkflowsContainer do
  @moduledoc """
  API calls for all endpoints tagged `IdentityGovernanceLifecycleWorkflowsContainer`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property lifecycleWorkflows for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_delete_lifecycle_workflows(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_delete_lifecycle_workflows(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/lifecycleWorkflows")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lifecycleWorkflows from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleWorkflowsContainer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_get_lifecycle_workflows(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleWorkflowsContainer.t} | {:error, Tesla.Env.t}
  def identity_governance_get_lifecycle_workflows(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleWorkflowsContainer},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create customTaskExtensions
  Create a new customTaskExtension object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_identity_governance_custom_task_extension` (MicrosoftGraphIdentityGovernanceCustomTaskExtension): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_create_custom_task_extensions(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtension.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_create_custom_task_extensions(connection, microsoft_graph_identity_governance_custom_task_extension, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions")
      |> add_param(:body, :body, microsoft_graph_identity_governance_custom_task_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create workflow
  Create a new workflow object. You can create up to 50 workflows in a tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_identity_governance_workflow` (MicrosoftGraphIdentityGovernanceWorkflow): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_create_workflows(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_create_workflows(connection, microsoft_graph_identity_governance_workflow, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows")
      |> add_param(:body, :body, microsoft_graph_identity_governance_workflow)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_custom_task_extensions_created_by_get_mailbox_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_custom_task_extensions_created_by_get_mailbox_settings(connection, custom_task_extension_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}/createdBy/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_custom_task_extensions_created_by_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_custom_task_extensions_created_by_list_service_provisioning_errors(connection, custom_task_extension_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}/createdBy/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_custom_task_extensions_created_by_service_provisioning_errors_get_count74e6(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_custom_task_extensions_created_by_service_provisioning_errors_get_count74e6(connection, custom_task_extension_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}/createdBy/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_custom_task_extensions_created_by_update_mailbox_settings(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_custom_task_extensions_created_by_update_mailbox_settings(connection, custom_task_extension_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}/createdBy/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_custom_task_extensions_get_count_b240(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_custom_task_extensions_get_count_b240(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get createdBy from identityGovernance
  The unique identifier of the Microsoft Entra user that created the custom task extension.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_custom_task_extensions_get_created_by(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_custom_task_extensions_get_created_by(connection, custom_task_extension_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}/createdBy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastModifiedBy from identityGovernance
  The unique identifier of the Microsoft Entra user that modified the custom task extension last.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_custom_task_extensions_get_last_modified_by(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_custom_task_extensions_get_last_modified_by(connection, custom_task_extension_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}/lastModifiedBy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_custom_task_extensions_last_modified_by_get_mailbox_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_custom_task_extensions_last_modified_by_get_mailbox_settings(connection, custom_task_extension_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}/lastModifiedBy/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_custom_task_extensions_last_modified_by_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_custom_task_extensions_last_modified_by_list_service_provisioning_errors(connection, custom_task_extension_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}/lastModifiedBy/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_custom_task_extensions_last_modified_by_service_provisioning_errors_get_count8d38(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_custom_task_extensions_last_modified_by_service_provisioning_errors_get_count8d38(connection, custom_task_extension_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}/lastModifiedBy/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_custom_task_extensions_last_modified_by_update_mailbox_settings(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_custom_task_extensions_last_modified_by_update_mailbox_settings(connection, custom_task_extension_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}/lastModifiedBy/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete customTaskExtension
  Delete a customTaskExtension object. A custom task extension  can only be deleted if it is not referenced in any task objects in a lifecycle workflow. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_delete_custom_task_extensions(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_delete_custom_task_extensions(connection, custom_task_extension_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property deletedItems for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_delete_deleted_items(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_delete_deleted_items(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete workflow
  Delete a workflow object and its associated tasks, taskProcessingResults and versions. You can restore a deleted workflow and its associated objects within 30 days of deletion. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_delete_workflows(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_delete_workflows(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete deletedItemContainer (permanently delete a deleted lifecycle workflow)
  Delete a workflow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_delete_workflows(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_delete_workflows(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deletedItemContainer (a deleted lifecycle workflow)
  Retrieve a deleted workflow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_get_workflows(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_get_workflows(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List deletedItems (deleted lifecycle workflows)
  Get a list of the deleted workflow objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_list_workflows(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_list_workflows(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to tasks for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `microsoft_graph_identity_governance_task` (MicrosoftGraphIdentityGovernanceTask): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_create_tasks(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_create_tasks(connection, workflow_id, microsoft_graph_identity_governance_task, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks")
      |> add_param(:body, :body, microsoft_graph_identity_governance_task)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_created_by_get_mailbox_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_created_by_get_mailbox_settings(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/createdBy/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_created_by_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_created_by_list_service_provisioning_errors(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/createdBy/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_created_by_service_provisioning_errors_get_count1081(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_created_by_service_provisioning_errors_get_count1081(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/createdBy/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_created_by_update_mailbox_settings(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_created_by_update_mailbox_settings(connection, workflow_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/createdBy/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property tasks for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_delete_tasks(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_delete_tasks(connection, workflow_id, task_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_execution_scope_get_count_e524(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_execution_scope_get_count_e524(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/executionScope/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_get_count4207(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_get_count4207(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get createdBy from identityGovernance
  The user who created the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_get_created_by(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_get_created_by(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/createdBy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get executionScope from identityGovernance
  The unique identifier of the Microsoft Entra identity that last modified the workflow object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_get_execution_scope(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_get_execution_scope(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/executionScope/#{user_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastModifiedBy from identityGovernance
  The unique identifier of the Microsoft Entra identity that last modified the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_get_last_modified_by(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_get_last_modified_by(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/lastModifiedBy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get run
  Read the properties and relationships of a run object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRun.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_get_runs(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRun.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_get_runs(connection, workflow_id, run_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRun},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskReports from identityGovernance
  Represents the aggregation of task execution data for tasks within a workflow object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReport.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_get_task_reports(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReport.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_get_task_reports(connection, workflow_id, task_report_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReport},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tasks from identityGovernance
  The tasks in the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_get_tasks(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_get_tasks(connection, workflow_id, task_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get userProcessingResults from identityGovernance
  Per-user workflow execution results.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_get_user_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_get_user_processing_results(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get workflowVersion
  Read the properties and relationships of a workflowVersion object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_get_versions(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_get_versions(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_last_modified_by_get_mailbox_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_last_modified_by_get_mailbox_settings(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/lastModifiedBy/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_last_modified_by_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_last_modified_by_list_service_provisioning_errors(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/lastModifiedBy/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_last_modified_by_service_provisioning_errors_get_count_def1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_last_modified_by_service_provisioning_errors_get_count_def1(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/lastModifiedBy/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_last_modified_by_update_mailbox_settings(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_last_modified_by_update_mailbox_settings(connection, workflow_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/lastModifiedBy/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get executionScope from identityGovernance
  The unique identifier of the Microsoft Entra identity that last modified the workflow object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_list_execution_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_list_execution_scope(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/executionScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List runs
  Get a list of the run objects and their properties for a lifecycle workflow. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRunCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_list_runs(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRunCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_list_runs(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRunCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List taskReports
  Get a list of the taskReport objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReportCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_list_task_reports(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReportCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_list_task_reports(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReportCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tasks from identityGovernance
  The tasks in the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_list_tasks(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_list_tasks(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List userProcessingResults
  Get the userProcessingResult resources for a workflow. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_list_user_processing_results(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_list_user_processing_results(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List workflowVersions
  Get a list of the workflowVersion objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_list_versions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersionCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_list_versions(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_get_count04a6(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_get_count04a6(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The related taskProcessingResults.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_get_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_get_task_processing_results(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get userProcessingResult
  Get the user processing result of a user processing result of a run. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_get_user_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_get_user_processing_results(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List taskProcessingResults
  Get the taskProcessingResult resources for a run. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_list_task_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_list_task_processing_results(connection, workflow_id, run_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List userProcessingResults
  Get user processing results of a workflow run object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_list_user_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_list_user_processing_results(connection, workflow_id, run_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_get_count301f(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_get_count301f(connection, workflow_id, run_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_get_subject(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_get_task(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_get_task(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_subject_service_provisioning_errors_get_count9c1a(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_subject_service_provisioning_errors_get_count9c1a(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, run_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_get_count_ea74(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_get_count_ea74(connection, workflow_id, run_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the AAD user targeted for the taskProcessingResult.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_get_subject(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The associated individual task execution.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_get_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_get_task_processing_results(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List taskProcessingResults
  Get the task processing result from a userProcessingResult either directly or through a run. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_list_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_list_task_processing_results(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_subject_get_mailbox_settings(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_subject_service_provisioning_errors_get_count46e1(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_subject_service_provisioning_errors_get_count46e1(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_subject_update_mailbox_settings(connection, workflow_id, run_id, user_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_get_count_f799(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_get_count_f799(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_get_subject(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_get_task(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_get_task(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_subject_service_provisioning_errors_get_count7f1d(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_subject_service_provisioning_errors_get_count7f1d(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_runs_user_processing_results_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_get_count_f9a3(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_get_count_f9a3(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related lifecycle workflow task.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_get_task(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_get_task(connection, workflow_id, task_report_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskDefinition from identityGovernance
  The taskDefinition associated with the related lifecycle workflow task.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_get_task_definition(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinition.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_get_task_definition(connection, workflow_id, task_report_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The related lifecycle workflow taskProcessingResults.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_get_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_get_task_processing_results(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List taskProcessingResult (for a taskReport)
  Get the task processing result resources from the taskReport. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_list_task_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_list_task_processing_results(connection, workflow_id, task_report_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_get_count7b4b(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_get_count7b4b(connection, workflow_id, task_report_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_get_subject(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_get_task(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_get_task(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_subject_service_provisioning_errors_get_count4e4d(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_subject_service_provisioning_errors_get_count4e4d(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_task_reports_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, task_report_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_get_count67b2(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_get_count67b2(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The result of processing the task.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_get_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_get_task_processing_results(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The result of processing the task.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_list_task_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_list_task_processing_results(connection, workflow_id, task_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_get_count3d21(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_get_count3d21(connection, workflow_id, task_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_get_subject(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_get_task(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_get_task(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_subject_service_provisioning_errors_get_count43b9(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_subject_service_provisioning_errors_get_count43b9(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_tasks_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, task_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property tasks in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `microsoft_graph_identity_governance_task` (MicrosoftGraphIdentityGovernanceTask): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_update_tasks(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_update_tasks(connection, workflow_id, task_id, microsoft_graph_identity_governance_task, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}")
      |> add_param(:body, :body, microsoft_graph_identity_governance_task)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_get_count52b9(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_get_count52b9(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the AAD user targeted for the taskProcessingResult.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_get_subject(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_get_subject(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The associated individual task execution.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_get_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_get_task_processing_results(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List taskProcessingResults
  Get the task processing result from a userProcessingResult either directly or through a run. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_list_task_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_list_task_processing_results(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_subject_get_mailbox_settings(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_subject_service_provisioning_errors_get_count_e5c8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_subject_service_provisioning_errors_get_count_e5c8(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_subject_update_mailbox_settings(connection, workflow_id, user_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_get_count_dca2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_get_count_dca2(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_get_subject(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_get_task(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_get_task(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_subject_service_provisioning_errors_get_count2ac7(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_subject_service_provisioning_errors_get_count2ac7(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_user_processing_results_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, user_processing_result_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to tasks for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `microsoft_graph_identity_governance_task` (MicrosoftGraphIdentityGovernanceTask): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_create_tasks(Tesla.Env.client, String.t, integer(), MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_create_tasks(connection, workflow_id, workflow_version_version_number, microsoft_graph_identity_governance_task, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks")
      |> add_param(:body, :body, microsoft_graph_identity_governance_task)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_created_by_get_mailbox_settings(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_created_by_get_mailbox_settings(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/createdBy/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_created_by_list_service_provisioning_errors(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_created_by_list_service_provisioning_errors(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/createdBy/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_created_by_service_provisioning_errors_get_count91a7(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_created_by_service_provisioning_errors_get_count91a7(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/createdBy/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_created_by_update_mailbox_settings(Tesla.Env.client, String.t, integer(), MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_created_by_update_mailbox_settings(connection, workflow_id, workflow_version_version_number, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/createdBy/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property tasks for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_delete_tasks(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_delete_tasks(connection, workflow_id, workflow_version_version_number, task_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_get_count_faf1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_get_count_faf1(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get createdBy from identityGovernance
  The user who created the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_get_created_by(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_get_created_by(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/createdBy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastModifiedBy from identityGovernance
  The unique identifier of the Microsoft Entra identity that last modified the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_get_last_modified_by(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_get_last_modified_by(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/lastModifiedBy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tasks from identityGovernance
  The tasks in the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_get_tasks(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_get_tasks(connection, workflow_id, workflow_version_version_number, task_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_last_modified_by_get_mailbox_settings(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_last_modified_by_get_mailbox_settings(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/lastModifiedBy/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_last_modified_by_list_service_provisioning_errors(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_last_modified_by_list_service_provisioning_errors(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/lastModifiedBy/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_last_modified_by_service_provisioning_errors_get_count346a(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_last_modified_by_service_provisioning_errors_get_count346a(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/lastModifiedBy/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_last_modified_by_update_mailbox_settings(Tesla.Env.client, String.t, integer(), MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_last_modified_by_update_mailbox_settings(connection, workflow_id, workflow_version_version_number, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/lastModifiedBy/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tasks from identityGovernance
  The tasks in the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_list_tasks(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_list_tasks(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_get_count901d(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_get_count901d(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The result of processing the task.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_get_task_processing_results(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_get_task_processing_results(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The result of processing the task.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_list_task_processing_results(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_list_task_processing_results(connection, workflow_id, workflow_version_version_number, task_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_get_count_f65c(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_get_count_f65c(connection, workflow_id, workflow_version_version_number, task_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_get_subject(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_get_subject(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_get_task(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_get_task(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_subject_service_provisioning_errors_get_count_c887(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_subject_service_provisioning_errors_get_count_c887(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, integer(), String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_tasks_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property tasks in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `microsoft_graph_identity_governance_task` (MicrosoftGraphIdentityGovernanceTask): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_versions_update_tasks(Tesla.Env.client, String.t, integer(), String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_versions_update_tasks(connection, workflow_id, workflow_version_version_number, task_id, microsoft_graph_identity_governance_task, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}")
      |> add_param(:body, :body, microsoft_graph_identity_governance_task)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get customTaskExtension
  Read the properties and relationships of a customTaskExtension object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_get_custom_task_extensions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_get_custom_task_extensions(connection, custom_task_extension_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deletedItems from identityGovernance
  Deleted workflows in your lifecycle workflows instance.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeletedItemContainer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_get_deleted_items(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeletedItemContainer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_get_deleted_items(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeletedItemContainer},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lifecycleManagementSettings
  Read the properties and relationships of a lifecycleManagementSettings object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleManagementSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_get_settings(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleManagementSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_get_settings(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/settings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleManagementSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskDefinition
  Read the details of a built-in workflow task. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `task_definition_id` (String.t): The unique identifier of taskDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_get_task_definitions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinition.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_get_task_definitions(connection, task_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/taskDefinitions/#{task_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get workflowTemplate
  Read the properties and relationships of a workflowTemplate object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_get_workflow_templates(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowTemplate.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_get_workflow_templates(connection, workflow_template_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowTemplate},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get workflow
  Read the properties and relationships of a workflow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_get_workflows(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_get_workflows(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List customTaskExtensions
  Get a list of the customTaskExtension objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtensionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_list_custom_task_extensions(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtensionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_list_custom_task_extensions(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtensionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List taskDefinitions
  Get a list of the taskDefinition objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_list_task_definitions(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinitionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_list_task_definitions(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/taskDefinitions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List workflowTemplates
  Get a list of the workflowTemplate objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowTemplateCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_list_workflow_templates(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowTemplateCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_list_workflow_templates(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowTemplateCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List workflows
  Get a list of workflow resources that are associated with lifecycle workflows. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_list_workflows(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_list_workflows(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_task_definitions_get_count36f9(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_task_definitions_get_count36f9(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/taskDefinitions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update customTaskExtension
  Update the properties of a customTaskExtension object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `custom_task_extension_id` (String.t): The unique identifier of customTaskExtension
  - `microsoft_graph_identity_governance_custom_task_extension` (MicrosoftGraphIdentityGovernanceCustomTaskExtension): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_update_custom_task_extensions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtension.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_update_custom_task_extensions(connection, custom_task_extension_id, microsoft_graph_identity_governance_custom_task_extension, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/customTaskExtensions/#{custom_task_extension_id}")
      |> add_param(:body, :body, microsoft_graph_identity_governance_custom_task_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceCustomTaskExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update lifecycleManagementSettings
  Update the properties of a lifecycleManagementSettings object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_identity_governance_lifecycle_management_settings` (MicrosoftGraphIdentityGovernanceLifecycleManagementSettings): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleManagementSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_update_settings(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleManagementSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleManagementSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_update_settings(connection, microsoft_graph_identity_governance_lifecycle_management_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/settings")
      |> add_param(:body, :body, microsoft_graph_identity_governance_lifecycle_management_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleManagementSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update workflow
  Update the properties of a workflow object. Only the properties listed in the request body table can be updated. To update any other workflow properties, see workflow: createNewVersion. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `microsoft_graph_identity_governance_workflow` (MicrosoftGraphIdentityGovernanceWorkflow): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_update_workflows(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_update_workflows(connection, workflow_id, microsoft_graph_identity_governance_workflow, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}")
      |> add_param(:body, :body, microsoft_graph_identity_governance_workflow)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_get_count7b73(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_get_count7b73(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tasks from identityGovernance
  Represents the configured tasks to execute and their execution sequence within a workflow. This relationship is expanded by default.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_get_tasks(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_get_tasks(connection, workflow_template_id, task_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/#{task_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tasks from identityGovernance
  Represents the configured tasks to execute and their execution sequence within a workflow. This relationship is expanded by default.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_list_tasks(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_list_tasks(connection, workflow_template_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_tasks_get_count_d308(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_tasks_get_count_d308(connection, workflow_template_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The result of processing the task.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_tasks_get_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_tasks_get_task_processing_results(connection, workflow_template_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The result of processing the task.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_tasks_list_task_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_tasks_list_task_processing_results(connection, workflow_template_id, task_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/#{task_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_get_count7ad8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_get_count7ad8(connection, workflow_template_id, task_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/#{task_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_get_subject(connection, workflow_template_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_get_task(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_get_task(connection, workflow_template_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_subject_get_mailbox_settings(connection, workflow_template_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_template_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_subject_service_provisioning_errors_get_count_c373(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_subject_service_provisioning_errors_get_count_c373(connection, workflow_template_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_tasks_task_processing_results_subject_update_mailbox_settings(connection, workflow_template_id, task_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to tasks for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `microsoft_graph_identity_governance_task` (MicrosoftGraphIdentityGovernanceTask): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_create_tasks(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_create_tasks(connection, workflow_id, microsoft_graph_identity_governance_task, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks")
      |> add_param(:body, :body, microsoft_graph_identity_governance_task)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_created_by_get_mailbox_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_created_by_get_mailbox_settings(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/createdBy/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_created_by_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_created_by_list_service_provisioning_errors(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/createdBy/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_created_by_service_provisioning_errors_get_count_e799(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_created_by_service_provisioning_errors_get_count_e799(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/createdBy/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_created_by_update_mailbox_settings(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_created_by_update_mailbox_settings(connection, workflow_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/createdBy/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property tasks for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_delete_tasks(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_delete_tasks(connection, workflow_id, task_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_execution_scope_get_count5898(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_execution_scope_get_count5898(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/executionScope/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_get_count02c2(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_get_count02c2(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get createdBy from identityGovernance
  The user who created the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_get_created_by(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_get_created_by(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/createdBy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get executionScope from identityGovernance
  The unique identifier of the Microsoft Entra identity that last modified the workflow object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_get_execution_scope(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_get_execution_scope(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/executionScope/#{user_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastModifiedBy from identityGovernance
  The unique identifier of the Microsoft Entra identity that last modified the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_get_last_modified_by(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_get_last_modified_by(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/lastModifiedBy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get run
  Read the properties and relationships of a run object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRun.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_get_runs(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRun.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_get_runs(connection, workflow_id, run_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRun},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskReports from identityGovernance
  Represents the aggregation of task execution data for tasks within a workflow object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReport.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_get_task_reports(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReport.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_get_task_reports(connection, workflow_id, task_report_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReport},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tasks from identityGovernance
  The tasks in the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_get_tasks(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_get_tasks(connection, workflow_id, task_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get userProcessingResults from identityGovernance
  Per-user workflow execution results.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_get_user_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_get_user_processing_results(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get workflowVersion
  Read the properties and relationships of a workflowVersion object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_get_versions(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_get_versions(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_last_modified_by_get_mailbox_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_last_modified_by_get_mailbox_settings(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/lastModifiedBy/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_last_modified_by_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_last_modified_by_list_service_provisioning_errors(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/lastModifiedBy/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_last_modified_by_service_provisioning_errors_get_count_f282(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_last_modified_by_service_provisioning_errors_get_count_f282(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/lastModifiedBy/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_last_modified_by_update_mailbox_settings(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_last_modified_by_update_mailbox_settings(connection, workflow_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/lastModifiedBy/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get executionScope from identityGovernance
  The unique identifier of the Microsoft Entra identity that last modified the workflow object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_list_execution_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_list_execution_scope(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/executionScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List runs
  Get a list of the run objects and their properties for a lifecycle workflow. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRunCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_list_runs(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRunCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_list_runs(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceRunCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List taskReports
  Get a list of the taskReport objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReportCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_list_task_reports(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReportCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_list_task_reports(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskReportCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tasks from identityGovernance
  The tasks in the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_list_tasks(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_list_tasks(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List userProcessingResults
  Get the userProcessingResult resources for a workflow. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_list_user_processing_results(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_list_user_processing_results(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List workflowVersions
  Get a list of the workflowVersion objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_list_versions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersionCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_list_versions(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceWorkflowVersionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_get_count_ba86(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_get_count_ba86(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The related taskProcessingResults.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_get_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_get_task_processing_results(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get userProcessingResult
  Get the user processing result of a user processing result of a run. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_get_user_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_get_user_processing_results(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List taskProcessingResults
  Get the taskProcessingResult resources for a run. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_list_task_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_list_task_processing_results(connection, workflow_id, run_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List userProcessingResults
  Get user processing results of a workflow run object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_list_user_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_list_user_processing_results(connection, workflow_id, run_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceUserProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_get_count_a908(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_get_count_a908(connection, workflow_id, run_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_get_subject(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_get_task(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_get_task(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_subject_service_provisioning_errors_get_count7d33(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_subject_service_provisioning_errors_get_count7d33(connection, workflow_id, run_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, run_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_get_count8fe3(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_get_count8fe3(connection, workflow_id, run_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the AAD user targeted for the taskProcessingResult.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_get_subject(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The associated individual task execution.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_get_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_get_task_processing_results(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List taskProcessingResults
  Get the task processing result from a userProcessingResult either directly or through a run. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_list_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_list_task_processing_results(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_subject_get_mailbox_settings(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_subject_service_provisioning_errors_get_count600e(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_subject_service_provisioning_errors_get_count600e(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_subject_update_mailbox_settings(connection, workflow_id, run_id, user_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_get_count_fd0a(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_get_count_fd0a(connection, workflow_id, run_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_get_subject(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_get_task(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_get_task(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_subject_service_provisioning_errors_get_count2784(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_subject_service_provisioning_errors_get_count2784(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_runs_user_processing_results_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_get_count1125(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_get_count1125(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related lifecycle workflow task.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_get_task(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_get_task(connection, workflow_id, task_report_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskDefinition from identityGovernance
  The taskDefinition associated with the related lifecycle workflow task.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_get_task_definition(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinition.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_get_task_definition(connection, workflow_id, task_report_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The related lifecycle workflow taskProcessingResults.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_get_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_get_task_processing_results(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List taskProcessingResult (for a taskReport)
  Get the task processing result resources from the taskReport. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_list_task_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_list_task_processing_results(connection, workflow_id, task_report_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_get_count8718(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_get_count8718(connection, workflow_id, task_report_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_get_subject(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_get_task(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_get_task(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_subject_service_provisioning_errors_get_count_aefd(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_subject_service_provisioning_errors_get_count_aefd(connection, workflow_id, task_report_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_task_reports_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, task_report_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_tasks_get_count1c0a(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_tasks_get_count1c0a(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The result of processing the task.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_tasks_get_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_tasks_get_task_processing_results(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The result of processing the task.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_tasks_list_task_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_tasks_list_task_processing_results(connection, workflow_id, task_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_get_count4230(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_get_count4230(connection, workflow_id, task_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_get_subject(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_get_task(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_get_task(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_subject_service_provisioning_errors_get_count4ca2(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_subject_service_provisioning_errors_get_count4ca2(connection, workflow_id, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_tasks_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, task_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property tasks in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `microsoft_graph_identity_governance_task` (MicrosoftGraphIdentityGovernanceTask): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_update_tasks(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_update_tasks(connection, workflow_id, task_id, microsoft_graph_identity_governance_task, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}")
      |> add_param(:body, :body, microsoft_graph_identity_governance_task)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_get_count_d3ed(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_get_count_d3ed(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the AAD user targeted for the taskProcessingResult.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_get_subject(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_get_subject(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The associated individual task execution.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_get_task_processing_results(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_get_task_processing_results(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List taskProcessingResults
  Get the task processing result from a userProcessingResult either directly or through a run. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_list_task_processing_results(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_list_task_processing_results(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_subject_get_mailbox_settings(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_subject_service_provisioning_errors_get_count23a8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_subject_service_provisioning_errors_get_count23a8(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_subject_update_mailbox_settings(connection, workflow_id, user_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_get_count8333(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_get_count8333(connection, workflow_id, user_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_get_subject(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_get_subject(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_get_task(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_get_task(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_subject_service_provisioning_errors_get_count_f382(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_subject_service_provisioning_errors_get_count_f382(connection, workflow_id, user_processing_result_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_user_processing_results_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, user_processing_result_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to tasks for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `microsoft_graph_identity_governance_task` (MicrosoftGraphIdentityGovernanceTask): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_create_tasks(Tesla.Env.client, String.t, integer(), MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_create_tasks(connection, workflow_id, workflow_version_version_number, microsoft_graph_identity_governance_task, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks")
      |> add_param(:body, :body, microsoft_graph_identity_governance_task)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_created_by_get_mailbox_settings(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_created_by_get_mailbox_settings(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/createdBy/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_created_by_list_service_provisioning_errors(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_created_by_list_service_provisioning_errors(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/createdBy/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_created_by_service_provisioning_errors_get_count_ba38(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_created_by_service_provisioning_errors_get_count_ba38(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/createdBy/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_created_by_update_mailbox_settings(Tesla.Env.client, String.t, integer(), MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_created_by_update_mailbox_settings(connection, workflow_id, workflow_version_version_number, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/createdBy/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property tasks for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_delete_tasks(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_delete_tasks(connection, workflow_id, workflow_version_version_number, task_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_get_count0c73(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_get_count0c73(connection, workflow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get createdBy from identityGovernance
  The user who created the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_get_created_by(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_get_created_by(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/createdBy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastModifiedBy from identityGovernance
  The unique identifier of the Microsoft Entra identity that last modified the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_get_last_modified_by(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_get_last_modified_by(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/lastModifiedBy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tasks from identityGovernance
  The tasks in the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_get_tasks(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_get_tasks(connection, workflow_id, workflow_version_version_number, task_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_last_modified_by_get_mailbox_settings(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_last_modified_by_get_mailbox_settings(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/lastModifiedBy/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_last_modified_by_list_service_provisioning_errors(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_last_modified_by_list_service_provisioning_errors(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/lastModifiedBy/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_last_modified_by_service_provisioning_errors_get_count8d93(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_last_modified_by_service_provisioning_errors_get_count8d93(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/lastModifiedBy/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_last_modified_by_update_mailbox_settings(Tesla.Env.client, String.t, integer(), MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_last_modified_by_update_mailbox_settings(connection, workflow_id, workflow_version_version_number, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/lastModifiedBy/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tasks from identityGovernance
  The tasks in the workflow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_list_tasks(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_list_tasks(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_tasks_get_count_de98(Tesla.Env.client, String.t, integer(), keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_tasks_get_count_de98(connection, workflow_id, workflow_version_version_number, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The result of processing the task.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_tasks_get_task_processing_results(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_tasks_get_task_processing_results(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResult},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get taskProcessingResults from identityGovernance
  The result of processing the task.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_tasks_list_task_processing_results(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_tasks_list_task_processing_results(connection, workflow_id, workflow_version_version_number, task_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTaskProcessingResultCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_get_count6334(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_get_count6334(connection, workflow_id, workflow_version_version_number, task_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subject from identityGovernance
  The unique identifier of the Microsoft Entra user targeted for the task execution.Supports $filter(eq, ne) and $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_get_subject(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_get_subject(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get task from identityGovernance
  The related workflow task

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_get_task(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_get_task(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/task")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_subject_get_mailbox_settings(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_subject_get_mailbox_settings(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_subject_list_service_provisioning_errors(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_subject_list_service_provisioning_errors(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_subject_service_provisioning_errors_get_count5d3d(Tesla.Env.client, String.t, integer(), String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_subject_service_provisioning_errors_get_count5d3d(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_subject_update_mailbox_settings(Tesla.Env.client, String.t, integer(), String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_tasks_task_processing_results_subject_update_mailbox_settings(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/subject/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property tasks in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `microsoft_graph_identity_governance_task` (MicrosoftGraphIdentityGovernanceTask): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_versions_update_tasks(Tesla.Env.client, String.t, integer(), String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_versions_update_tasks(connection, workflow_id, workflow_version_version_number, task_id, microsoft_graph_identity_governance_task, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}")
      |> add_param(:body, :body, microsoft_graph_identity_governance_task)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property lifecycleWorkflows in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_identity_governance_lifecycle_workflows_container` (MicrosoftGraphIdentityGovernanceLifecycleWorkflowsContainer): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleWorkflowsContainer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_update_lifecycle_workflows(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleWorkflowsContainer.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleWorkflowsContainer.t} | {:error, Tesla.Env.t}
  def identity_governance_update_lifecycle_workflows(connection, microsoft_graph_identity_governance_lifecycle_workflows_container, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/lifecycleWorkflows")
      |> add_param(:body, :body, microsoft_graph_identity_governance_lifecycle_workflows_container)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityGovernanceLifecycleWorkflowsContainer},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
