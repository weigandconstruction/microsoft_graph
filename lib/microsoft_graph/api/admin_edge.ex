# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.AdminEdge do
  @moduledoc """
  API calls for all endpoints tagged `AdminEdge`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property edge for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_delete_edge(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_delete_edge(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/admin/edge")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property internetExplorerMode for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_delete_internet_explorer_mode(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_delete_internet_explorer_mode(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/admin/edge/internetExplorerMode")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get internetExplorerMode from admin
  A container for Internet Explorer mode resources.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphInternetExplorerMode.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_get_internet_explorer_mode(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphInternetExplorerMode.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_get_internet_explorer_mode(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/edge/internetExplorerMode")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphInternetExplorerMode},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create browserSiteList
  Create a new browserSiteList object to support Internet Explorer mode. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_browser_site_list` (MicrosoftGraphBrowserSiteList): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_create_site_lists(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteList.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteList.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_create_site_lists(connection, microsoft_graph_browser_site_list, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/edge/internetExplorerMode/siteLists")
      |> add_param(:body, :body, microsoft_graph_browser_site_list)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSiteList},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete browserSiteList
  Delete a browserSiteList object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_delete_site_lists(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_delete_site_lists(connection, browser_site_list_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get browserSiteList
  Get a browserSiteList that contains browserSite and browserSharedCookie resources. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_get_site_lists(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteList.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_get_site_lists(connection, browser_site_list_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSiteList},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List browserSiteLists
  Get a list of the browserSiteList objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteListCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_list_site_lists(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteListCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_list_site_lists(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/edge/internetExplorerMode/siteLists")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSiteListCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create browserSharedCookie
  Create a new browserSharedCookie object in a browserSiteList. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `microsoft_graph_browser_shared_cookie` (MicrosoftGraphBrowserSharedCookie): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookie.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_create_shared_cookies(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookie.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookie.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_create_shared_cookies(connection, browser_site_list_id, microsoft_graph_browser_shared_cookie, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sharedCookies")
      |> add_param(:body, :body, microsoft_graph_browser_shared_cookie)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookie},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create browserSite
  Create a new browserSite object in a browserSiteList. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `microsoft_graph_browser_site` (MicrosoftGraphBrowserSite): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSite.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_create_sites(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphBrowserSite.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSite.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_create_sites(connection, browser_site_list_id, microsoft_graph_browser_site, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sites")
      |> add_param(:body, :body, microsoft_graph_browser_site)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSite},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete browserSharedCookie
  Delete a browserSharedCookie from a browserSiteList. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `browser_shared_cookie_id` (String.t): The unique identifier of browserSharedCookie
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_delete_shared_cookies(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_delete_shared_cookies(connection, browser_site_list_id, browser_shared_cookie_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sharedCookies/#{browser_shared_cookie_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete browserSite
  Delete a browserSite from a browserSiteList. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `browser_site_id` (String.t): The unique identifier of browserSite
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_delete_sites(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_delete_sites(connection, browser_site_list_id, browser_site_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sites/#{browser_site_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_get_count_d3d6(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_get_count_d3d6(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/edge/internetExplorerMode/siteLists/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get browserSharedCookie
  Get a session cookie that can be shared between a Microsoft Edge process and an Internet Explorer process, while using Internet Explorer mode. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `browser_shared_cookie_id` (String.t): The unique identifier of browserSharedCookie
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookie.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_get_shared_cookies(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookie.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_get_shared_cookies(connection, browser_site_list_id, browser_shared_cookie_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sharedCookies/#{browser_shared_cookie_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookie},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get browserSite
  Get a browserSite that resides on a browserSiteList. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `browser_site_id` (String.t): The unique identifier of browserSite
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSite.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_get_sites(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSite.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_get_sites(connection, browser_site_list_id, browser_site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sites/#{browser_site_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSite},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List browserSharedCookies
  Get a list of the browserSharedCookie objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookieCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_list_shared_cookies(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookieCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_list_shared_cookies(connection, browser_site_list_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sharedCookies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookieCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List browserSites
  Get a list of the browserSite objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_list_sites(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_list_sites(connection, browser_site_list_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sites")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSiteCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_shared_cookies_get_count0de2(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_shared_cookies_get_count0de2(connection, browser_site_list_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sharedCookies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_sites_get_count_da97(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_sites_get_count_da97(connection, browser_site_list_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sites/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update browserSharedCookie
  Update the properties of a browserSharedCookie object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `browser_shared_cookie_id` (String.t): The unique identifier of browserSharedCookie
  - `microsoft_graph_browser_shared_cookie` (MicrosoftGraphBrowserSharedCookie): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookie.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_update_shared_cookies(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookie.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookie.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_update_shared_cookies(connection, browser_site_list_id, browser_shared_cookie_id, microsoft_graph_browser_shared_cookie, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sharedCookies/#{browser_shared_cookie_id}")
      |> add_param(:body, :body, microsoft_graph_browser_shared_cookie)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSharedCookie},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update browserSite
  Update the properties of a browserSite object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `browser_site_id` (String.t): The unique identifier of browserSite
  - `microsoft_graph_browser_site` (MicrosoftGraphBrowserSite): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSite.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_update_sites(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphBrowserSite.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSite.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_site_lists_update_sites(connection, browser_site_list_id, browser_site_id, microsoft_graph_browser_site, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/sites/#{browser_site_id}")
      |> add_param(:body, :body, microsoft_graph_browser_site)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSite},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update browserSiteList
  Update the properties of a browserSiteList object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `microsoft_graph_browser_site_list` (MicrosoftGraphBrowserSiteList): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_update_site_lists(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteList.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphBrowserSiteList.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_internet_explorer_mode_update_site_lists(connection, browser_site_list_id, microsoft_graph_browser_site_list, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}")
      |> add_param(:body, :body, microsoft_graph_browser_site_list)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBrowserSiteList},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property internetExplorerMode in admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_internet_explorer_mode` (MicrosoftGraphInternetExplorerMode): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphInternetExplorerMode.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_update_internet_explorer_mode(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphInternetExplorerMode.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphInternetExplorerMode.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_edge_update_internet_explorer_mode(connection, microsoft_graph_internet_explorer_mode, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/admin/edge/internetExplorerMode")
      |> add_param(:body, :body, microsoft_graph_internet_explorer_mode)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphInternetExplorerMode},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get edge from admin
  A container for Microsoft Edge resources. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEdge.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_get_edge(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEdge.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_get_edge(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/edge")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEdge},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property edge in admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_edge` (MicrosoftGraphEdge): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEdge.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_update_edge(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphEdge.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEdge.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_update_edge(connection, microsoft_graph_edge, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/admin/edge")
      |> add_param(:body, :body, microsoft_graph_edge)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEdge},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
