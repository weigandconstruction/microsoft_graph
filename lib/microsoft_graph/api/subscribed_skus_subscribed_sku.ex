# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.SubscribedSkusSubscribedSku do
  @moduledoc """
  API calls for all endpoints tagged `SubscribedSkusSubscribedSku`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Add new entity to subscribedSkus

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_subscribed_sku` (MicrosoftGraphSubscribedSku): New entity
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscribedSku.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec subscribed_skus_subscribed_sku_create_subscribed_sku(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphSubscribedSku.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscribedSku.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def subscribed_skus_subscribed_sku_create_subscribed_sku(connection, microsoft_graph_subscribed_sku, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/subscribedSkus")
      |> add_param(:body, :body, microsoft_graph_subscribed_sku)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscribedSku},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete entity from subscribedSkus

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `subscribed_sku_id` (String.t): The unique identifier of subscribedSku
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec subscribed_skus_subscribed_sku_delete_subscribed_sku(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def subscribed_skus_subscribed_sku_delete_subscribed_sku(connection, subscribed_sku_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/subscribedSkus/#{subscribed_sku_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subscribedSku
  Get a specific commercial subscription that an organization has acquired. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `subscribed_sku_id` (String.t): The unique identifier of subscribedSku
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscribedSku.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec subscribed_skus_subscribed_sku_get_subscribed_sku(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscribedSku.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def subscribed_skus_subscribed_sku_get_subscribed_sku(connection, subscribed_sku_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/subscribedSkus/#{subscribed_sku_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscribedSku},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List subscribedSkus
  Get the list of commercial subscriptions that an organization has acquired. For the mapping of license names as displayed on the Microsoft Entra admin center or the Microsoft 365 admin center against their Microsoft Graph skuId and skuPartNumber properties, see Product names and service plan identifiers for licensing. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscribedSkuCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec subscribed_skus_subscribed_sku_list_subscribed_sku(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscribedSkuCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def subscribed_skus_subscribed_sku_list_subscribed_sku(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/subscribedSkus")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscribedSkuCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update entity in subscribedSkus

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `subscribed_sku_id` (String.t): The unique identifier of subscribedSku
  - `microsoft_graph_subscribed_sku` (MicrosoftGraphSubscribedSku): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscribedSku.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec subscribed_skus_subscribed_sku_update_subscribed_sku(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSubscribedSku.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscribedSku.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def subscribed_skus_subscribed_sku_update_subscribed_sku(connection, subscribed_sku_id, microsoft_graph_subscribed_sku, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/subscribedSkus/#{subscribed_sku_id}")
      |> add_param(:body, :body, microsoft_graph_subscribed_sku)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscribedSku},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
