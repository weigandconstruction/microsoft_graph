# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DomainsActions do
  @moduledoc """
  API calls for all endpoints tagged `DomainsActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action forceDelete
  Deletes a domain using an asynchronous long-running operation. Prior to calling forceDelete, you must update or remove any references to Exchange as the provisioning service. The following actions are performed as part of this operation: After the domain deletion completes, API operations for the deleted domain will return an HTTP 404 status code. To verify deletion of a domain, you can perform a get domain operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `domain_id` (String.t): The unique identifier of domain
  - `domains_domain_force_delete_request` (DomainsDomainForceDeleteRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec domains_domain_force_delete(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.DomainsDomainForceDeleteRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def domains_domain_force_delete(
        connection,
        domain_id,
        domains_domain_force_delete_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/domains/#{domain_id}/forceDelete")
      |> add_param(:body, :body, domains_domain_force_delete_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action promote
  Promote a verified subdomain to the root domain. A verified domain has its isVerified property set to true. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `domain_id` (String.t): The unique identifier of domain
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec domains_domain_promote(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def domains_domain_promote(connection, domain_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/domains/#{domain_id}/promote")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action verify
  Validates the ownership of the domain. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `domain_id` (String.t): The unique identifier of domain
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DomainsDomainVerify2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec domains_domain_verify(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.DomainsDomainVerify2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def domains_domain_verify(connection, domain_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/domains/#{domain_id}/verify")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DomainsDomainVerify2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
