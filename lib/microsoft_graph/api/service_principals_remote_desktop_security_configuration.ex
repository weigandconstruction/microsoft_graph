# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.ServicePrincipalsRemoteDesktopSecurityConfiguration do
  @moduledoc """
  API calls for all endpoints tagged `ServicePrincipalsRemoteDesktopSecurityConfiguration`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete remoteDesktopSecurityConfiguration
  Delete a remoteDesktopSecurityConfiguration object on a servicePrincipal. Removing remoteDesktopSecurityConfiguration object on the servicePrincipal disables the Microsoft Entra ID Remote Desktop Services (RDS) authentication protocol to authenticate a user to Microsoft Entra joined or Microsoft Entra hybrid joined devices, and removes any target device groups that you configured for SSO.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_delete_remote_desktop_security_configuration(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_delete_remote_desktop_security_configuration(connection, service_principal_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/servicePrincipals/#{service_principal_id}/remoteDesktopSecurityConfiguration")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get remoteDesktopSecurityConfiguration
  Read the properties and relationships of a remoteDesktopSecurityConfiguration object on a servicePrincipal. Use this configuration to view the Microsoft Entra ID Remote Desktop Services (RDS) authentication protocol to authenticate a user to Microsoft Entra joined or Microsoft Entra hybrid joined devices. Additionally you can view any targetDeviceGroups that have been configured for SSO.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRemoteDesktopSecurityConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_get_remote_desktop_security_configuration(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRemoteDesktopSecurityConfiguration.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_get_remote_desktop_security_configuration(connection, service_principal_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/remoteDesktopSecurityConfiguration")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRemoteDesktopSecurityConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create targetDeviceGroup
  Create a new targetDeviceGroup object for the remoteDesktopSecurityConfiguration object on the servicePrincipal. You can configure a maximum of 10 target device groups for the remoteDesktopSecurityConfiguraiton object on the servicePrincipal.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `microsoft_graph_target_device_group` (MicrosoftGraphTargetDeviceGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_remote_desktop_security_configuration_create_target_device_groups(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_remote_desktop_security_configuration_create_target_device_groups(connection, service_principal_id, microsoft_graph_target_device_group, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/remoteDesktopSecurityConfiguration/targetDeviceGroups")
      |> add_param(:body, :body, microsoft_graph_target_device_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete targetDeviceGroup
  Delete a targetDeviceGroup object for the remoteDesktopSecurityConfiguration object on the servicePrincipal. Any user authenticating using the Microsoft Entra ID Remote Desktop Services (RDS) authentication protocol to a Microsoft Entra joined or Microsoft Entra hybrid joined device that's in the removed targetDeviceGroup doesn't get SSO prompts.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `target_device_group_id` (String.t): The unique identifier of targetDeviceGroup
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_remote_desktop_security_configuration_delete_target_device_groups(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_remote_desktop_security_configuration_delete_target_device_groups(connection, service_principal_id, target_device_group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/servicePrincipals/#{service_principal_id}/remoteDesktopSecurityConfiguration/targetDeviceGroups/#{target_device_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get targetDeviceGroup
  Read the properties and relationships of a targetDeviceGroup object for the remoteDesktopSecurityConfiguration object on the servicePrincipal.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `target_device_group_id` (String.t): The unique identifier of targetDeviceGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_remote_desktop_security_configuration_get_target_device_groups(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_remote_desktop_security_configuration_get_target_device_groups(connection, service_principal_id, target_device_group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/remoteDesktopSecurityConfiguration/targetDeviceGroups/#{target_device_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List targetDeviceGroups
  Get a list of the targetDeviceGroup objects and their properties on the remoteDesktopSecurityConfiguration resource on the servicePrincipal. Any user authenticating using the Microsoft Entra ID Remote Desktop Services (RDS) authentication protocol to a Microsoft Entra joined or Microsoft Entra hybrid joined device that belongs to the targetDeviceGroup will get SSO.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_remote_desktop_security_configuration_list_target_device_groups(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroupCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_remote_desktop_security_configuration_list_target_device_groups(connection, service_principal_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/remoteDesktopSecurityConfiguration/targetDeviceGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_remote_desktop_security_configuration_target_device_groups_get_count51f5(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_remote_desktop_security_configuration_target_device_groups_get_count51f5(connection, service_principal_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/remoteDesktopSecurityConfiguration/targetDeviceGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update targetDeviceGroup
  Update the properties of a targetDeviceGroup object for remoteDesktopSecurityConfiguration object on the servicePrincipal. You can configure a maximum of 10 target device groups for the remoteDesktopSecurityConfiguraiton object on the servicePrincipal.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `target_device_group_id` (String.t): The unique identifier of targetDeviceGroup
  - `microsoft_graph_target_device_group` (MicrosoftGraphTargetDeviceGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_remote_desktop_security_configuration_update_target_device_groups(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_remote_desktop_security_configuration_update_target_device_groups(connection, service_principal_id, target_device_group_id, microsoft_graph_target_device_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/servicePrincipals/#{service_principal_id}/remoteDesktopSecurityConfiguration/targetDeviceGroups/#{target_device_group_id}")
      |> add_param(:body, :body, microsoft_graph_target_device_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTargetDeviceGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update remoteDesktopSecurityConfiguration
  Update the properties of a remoteDesktopSecurityConfiguration object on the servicePrincipal. Use this configuration to enable or disable the Microsoft Entra ID Remote Desktop Services (RDS) authentication protocol to authenticate a user to Microsoft Entra joined or Microsoft Entra hybrid joined devices.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `microsoft_graph_remote_desktop_security_configuration` (MicrosoftGraphRemoteDesktopSecurityConfiguration): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRemoteDesktopSecurityConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_update_remote_desktop_security_configuration(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphRemoteDesktopSecurityConfiguration.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRemoteDesktopSecurityConfiguration.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_update_remote_desktop_security_configuration(connection, service_principal_id, microsoft_graph_remote_desktop_security_configuration, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/servicePrincipals/#{service_principal_id}/remoteDesktopSecurityConfiguration")
      |> add_param(:body, :body, microsoft_graph_remote_desktop_security_configuration)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRemoteDesktopSecurityConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
