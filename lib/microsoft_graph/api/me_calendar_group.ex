# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.MeCalendarGroup do
  @moduledoc """
  API calls for all endpoints tagged `MeCalendarGroup`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_permissions_get_count3d5b(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_permissions_get_count3d5b(
        connection,
        calendar_group_id,
        calendar_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarPermissions/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_attachments_get_count_e147(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_attachments_get_count_e147(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/attachments/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add attachment
  Use this API to add an attachment to an existing event. This operation limits the size of the attachment you can add to under 3 MB. If an organizer adds an attachment to a meeting event, the organizer can subsequently update the event to send the attachment and update the event for each attendee as well. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `microsoft_graph_attachment` (MicrosoftGraphAttachment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_create_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAttachment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_create_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        microsoft_graph_attachment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/attachments"
      )
      |> add_param(:body, :body, microsoft_graph_attachment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create open extension
  Create an open extension (openTypeExtension object) and add custom properties in a new or existing instance of a resource. You can create an open extension in a resource instance and store custom data to it all in the same operation, except for specific resources. The table in the Permissions section lists the resources that support open extensions. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_create_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExtension.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_create_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        microsoft_graph_extension,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/extensions"
      )
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete attachment
  Delete an attachment from a user calendar event, mail message, or group post. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `attachment_id` (String.t): The unique identifier of attachment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_delete_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_delete_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        attachment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/attachments/#{attachment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property extensions for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_delete_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_delete_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        extension_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/extensions/#{extension_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_extensions_get_count_a2ad(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_extensions_get_count_a2ad(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/extensions/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get attachments from me
  The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `attachment_id` (String.t): The unique identifier of attachment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_get_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_get_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        attachment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/attachments/#{attachment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get calendar from me
  The calendar that contains the event. Navigation property. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_get_calendar(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_get_calendar(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/calendar"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendar},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_get_count5d8d(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_get_count5d8d(
        connection,
        calendar_group_id,
        calendar_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get open extension
  Get an open extension (openTypeExtension object) identified by name or fully qualified name. The table in the Permissions section lists the resources that support open extensions. The following table lists the three scenarios where you can get an open extension from a supported resource instance. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_get_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_get_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        extension_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/extensions/#{extension_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get instances from me
  The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `start_date_time` (String.t): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
  - `end_date_time` (String.t): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_get_instances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_get_instances(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        start_date_time,
        end_date_time,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}"
      )
      |> add_param(:query, :startDateTime, start_date_time)
      |> add_param(:query, :endDateTime, end_date_time)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEvent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_attachments_get_count_dd0d(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_attachments_get_count_dd0d(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/attachments/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add attachment
  Use this API to add an attachment to an existing event. This operation limits the size of the attachment you can add to under 3 MB. If an organizer adds an attachment to a meeting event, the organizer can subsequently update the event to send the attachment and update the event for each attendee as well. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `microsoft_graph_attachment` (MicrosoftGraphAttachment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_create_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAttachment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_create_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        microsoft_graph_attachment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/attachments"
      )
      |> add_param(:body, :body, microsoft_graph_attachment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create open extension
  Create an open extension (openTypeExtension object) and add custom properties in a new or existing instance of a resource. You can create an open extension in a resource instance and store custom data to it all in the same operation, except for specific resources. The table in the Permissions section lists the resources that support open extensions. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_create_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExtension.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_create_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        microsoft_graph_extension,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/extensions"
      )
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete attachment
  Delete an attachment from a user calendar event, mail message, or group post. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `attachment_id` (String.t): The unique identifier of attachment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_delete_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_delete_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        attachment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/attachments/#{attachment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property extensions for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_delete_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_delete_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        extension_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/extensions/#{extension_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_extensions_get_count2132(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_extensions_get_count2132(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/extensions/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get attachments from me
  The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `attachment_id` (String.t): The unique identifier of attachment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_get_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_get_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        attachment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/attachments/#{attachment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get calendar from me
  The calendar that contains the event. Navigation property. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_get_calendar(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_get_calendar(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/calendar"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendar},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_get_count_dd0e(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_get_count_dd0e(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get open extension
  Get an open extension (openTypeExtension object) identified by name or fully qualified name. The table in the Permissions section lists the resources that support open extensions. The following table lists the three scenarios where you can get an open extension from a supported resource instance. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_get_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_get_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        extension_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/extensions/#{extension_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List attachments
  Retrieve a list of attachment objects attached to an event. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_list_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_list_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/attachments"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get open extension
  Get an open extension (openTypeExtension object) identified by name or fully qualified name. The table in the Permissions section lists the resources that support open extensions. The following table lists the three scenarios where you can get an open extension from a supported resource instance. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_list_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_list_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/extensions"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property extensions in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_instances_update_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExtension.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_instances_update_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        extension_id,
        microsoft_graph_extension,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/extensions/#{extension_id}"
      )
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List attachments
  Retrieve a list of attachment objects attached to an event. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_list_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_list_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/attachments"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get open extension
  Get an open extension (openTypeExtension object) identified by name or fully qualified name. The table in the Permissions section lists the resources that support open extensions. The following table lists the three scenarios where you can get an open extension from a supported resource instance. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_list_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_list_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/extensions"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get instances from me
  The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `start_date_time` (String.t): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
  - `end_date_time` (String.t): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_list_instances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_list_instances(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        start_date_time,
        end_date_time,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances"
      )
      |> add_param(:query, :startDateTime, start_date_time)
      |> add_param(:query, :endDateTime, end_date_time)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property extensions in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_calendar_view_update_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExtension.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_calendar_view_update_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        extension_id,
        microsoft_graph_extension,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/extensions/#{extension_id}"
      )
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create calendarPermission
  Create a calendarPermission resource to specify the identity and role of the user with whom the specified calendar is being shared or delegated. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `microsoft_graph_calendar_permission` (MicrosoftGraphCalendarPermission): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_create_calendar_permissions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphCalendarPermission.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarPermission.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_create_calendar_permissions(
        connection,
        calendar_group_id,
        calendar_id,
        microsoft_graph_calendar_permission,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarPermissions"
      )
      |> add_param(:body, :body, microsoft_graph_calendar_permission)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendarPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create event
  Use this API to create a new event in a calendar. The calendar can be one for a user, or the default calendar of a Microsoft 365 group.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `microsoft_graph_event` (MicrosoftGraphEvent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_create_events(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphEvent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_create_events(
        connection,
        calendar_group_id,
        calendar_id,
        microsoft_graph_event,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events")
      |> add_param(:body, :body, microsoft_graph_event)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEvent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete calendarPermission
  Delete calendarPermission. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `calendar_permission_id` (String.t): The unique identifier of calendarPermission
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_delete_calendar_permissions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_delete_calendar_permissions(
        connection,
        calendar_group_id,
        calendar_id,
        calendar_permission_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarPermissions/#{calendar_permission_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property events for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_delete_events(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_delete_events(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_attachments_get_count2b84(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_attachments_get_count2b84(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/attachments/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add attachment
  Use this API to add an attachment to an existing event. This operation limits the size of the attachment you can add to under 3 MB. If an organizer adds an attachment to a meeting event, the organizer can subsequently update the event to send the attachment and update the event for each attendee as well. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `microsoft_graph_attachment` (MicrosoftGraphAttachment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_create_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAttachment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_create_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        microsoft_graph_attachment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/attachments"
      )
      |> add_param(:body, :body, microsoft_graph_attachment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create open extension
  Create an open extension (openTypeExtension object) and add custom properties in a new or existing instance of a resource. You can create an open extension in a resource instance and store custom data to it all in the same operation, except for specific resources. The table in the Permissions section lists the resources that support open extensions. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_create_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExtension.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_create_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        microsoft_graph_extension,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/extensions"
      )
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete attachment
  Delete an attachment from a user calendar event, mail message, or group post. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `attachment_id` (String.t): The unique identifier of attachment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_delete_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_delete_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        attachment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/attachments/#{attachment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property extensions for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_delete_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_delete_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        extension_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/extensions/#{extension_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_extensions_get_count_baf0(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_extensions_get_count_baf0(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/extensions/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get attachments from me
  The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `attachment_id` (String.t): The unique identifier of attachment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_get_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_get_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        attachment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/attachments/#{attachment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get calendar from me
  The calendar that contains the event. Navigation property. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_get_calendar(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_get_calendar(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/calendar"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendar},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_get_count4a49(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_get_count4a49(
        connection,
        calendar_group_id,
        calendar_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get open extension
  Get an open extension (openTypeExtension object) identified by name or fully qualified name. The table in the Permissions section lists the resources that support open extensions. The following table lists the three scenarios where you can get an open extension from a supported resource instance. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_get_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_get_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        extension_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/extensions/#{extension_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get instances from me
  The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `start_date_time` (String.t): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
  - `end_date_time` (String.t): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_get_instances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_get_instances(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        start_date_time,
        end_date_time,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}"
      )
      |> add_param(:query, :startDateTime, start_date_time)
      |> add_param(:query, :endDateTime, end_date_time)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEvent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_attachments_get_count_d238(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_attachments_get_count_d238(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/attachments/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add attachment
  Use this API to add an attachment to an existing event. This operation limits the size of the attachment you can add to under 3 MB. If an organizer adds an attachment to a meeting event, the organizer can subsequently update the event to send the attachment and update the event for each attendee as well. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `microsoft_graph_attachment` (MicrosoftGraphAttachment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_create_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAttachment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_create_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        microsoft_graph_attachment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/attachments"
      )
      |> add_param(:body, :body, microsoft_graph_attachment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create open extension
  Create an open extension (openTypeExtension object) and add custom properties in a new or existing instance of a resource. You can create an open extension in a resource instance and store custom data to it all in the same operation, except for specific resources. The table in the Permissions section lists the resources that support open extensions. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_create_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExtension.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_create_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        microsoft_graph_extension,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/extensions"
      )
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete attachment
  Delete an attachment from a user calendar event, mail message, or group post. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `attachment_id` (String.t): The unique identifier of attachment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_delete_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_delete_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        attachment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/attachments/#{attachment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property extensions for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_delete_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_delete_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        extension_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/extensions/#{extension_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_extensions_get_count421a(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_extensions_get_count421a(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/extensions/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get attachments from me
  The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `attachment_id` (String.t): The unique identifier of attachment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_get_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_get_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        attachment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/attachments/#{attachment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get calendar from me
  The calendar that contains the event. Navigation property. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_get_calendar(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_get_calendar(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/calendar"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendar},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_get_count_eab7(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_get_count_eab7(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get open extension
  Get an open extension (openTypeExtension object) identified by name or fully qualified name. The table in the Permissions section lists the resources that support open extensions. The following table lists the three scenarios where you can get an open extension from a supported resource instance. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_get_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_get_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        extension_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/extensions/#{extension_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List attachments
  Retrieve a list of attachment objects attached to an event. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_list_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_list_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/attachments"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get open extension
  Get an open extension (openTypeExtension object) identified by name or fully qualified name. The table in the Permissions section lists the resources that support open extensions. The following table lists the three scenarios where you can get an open extension from a supported resource instance. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_list_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_list_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/extensions"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property extensions in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_instances_update_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExtension.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_instances_update_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        extension_id,
        microsoft_graph_extension,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/extensions/#{extension_id}"
      )
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List attachments
  Retrieve a list of attachment objects attached to an event. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_list_attachments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_list_attachments(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/attachments"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttachmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get open extension
  Get an open extension (openTypeExtension object) identified by name or fully qualified name. The table in the Permissions section lists the resources that support open extensions. The following table lists the three scenarios where you can get an open extension from a supported resource instance. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_list_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_list_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/extensions"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get instances from me
  The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `start_date_time` (String.t): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
  - `end_date_time` (String.t): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_list_instances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_list_instances(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        start_date_time,
        end_date_time,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances"
      )
      |> add_param(:query, :startDateTime, start_date_time)
      |> add_param(:query, :endDateTime, end_date_time)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property extensions in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `extension_id` (String.t): The unique identifier of extension
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_events_update_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExtension.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_events_update_extensions(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        extension_id,
        microsoft_graph_extension,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/extensions/#{extension_id}"
      )
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get calendarPermission
  Get the specified permissions object of a user or group calendar that has been shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `calendar_permission_id` (String.t): The unique identifier of calendarPermission
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_get_calendar_permissions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarPermission.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_get_calendar_permissions(
        connection,
        calendar_group_id,
        calendar_id,
        calendar_permission_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarPermissions/#{calendar_permission_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendarPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get calendarView from me
  The calendar view for the calendar. Navigation property. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_get_calendar_view(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_get_calendar_view(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEvent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_get_count9aae(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_get_count9aae(connection, calendar_group_id, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/calendarGroups/#{calendar_group_id}/calendars/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get events from me
  The events in the calendar. Navigation property. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_get_events(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_get_events(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEvent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List calendarPermissions
  Get a collection of calendarPermission resources that describe the identity and roles of users with whom the specified calendar has been shared or delegated. Here, the calendar can be a user calendar or group calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarPermissionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_list_calendar_permissions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarPermissionCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_list_calendar_permissions(
        connection,
        calendar_group_id,
        calendar_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarPermissions"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendarPermissionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List calendarView
  Get the occurrences, exceptions and single instances of events in a calendar view defined by a time range, from a user's default calendar (../me/calendarView) or some other calendar of the user's. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_list_calendar_view(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_list_calendar_view(
        connection,
        calendar_group_id,
        calendar_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List events
  Retrieve a list of events in a calendar. The calendar can be one for a user, or the default calendar of a Microsoft 365 group. The list of events contains single instance meetings and series masters. To get expanded event instances, you can get the calendar view, or  get the instances of an event. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_list_events(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_list_events(
        connection,
        calendar_group_id,
        calendar_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEventCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update calendarPermission
  Update the permissions assigned to an existing share recipient or delegate, through the corresponding <b>calendarPermission</b> object for a calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `calendar_permission_id` (String.t): The unique identifier of calendarPermission
  - `microsoft_graph_calendar_permission` (MicrosoftGraphCalendarPermission): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_update_calendar_permissions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphCalendarPermission.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarPermission.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_update_calendar_permissions(
        connection,
        calendar_group_id,
        calendar_id,
        calendar_permission_id,
        microsoft_graph_calendar_permission,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarPermissions/#{calendar_permission_id}"
      )
      |> add_param(:body, :body, microsoft_graph_calendar_permission)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendarPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update event
  Update an event object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `microsoft_graph_event` (MicrosoftGraphEvent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendars_update_events(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphEvent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEvent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendars_update_events(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        microsoft_graph_event,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}"
      )
      |> add_param(:body, :body, microsoft_graph_event)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEvent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create Calendar
  Use this API to create a new calendar in a calendar group for a user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `microsoft_graph_calendar` (MicrosoftGraphCalendar): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_create_calendars(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphCalendar.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_create_calendars(
        connection,
        calendar_group_id,
        microsoft_graph_calendar,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarGroups/#{calendar_group_id}/calendars")
      |> add_param(:body, :body, microsoft_graph_calendar)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendar},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property calendars for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_delete_calendars(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_delete_calendars(connection, calendar_group_id, calendar_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get calendars from me
  The calendars in the calendar group. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_get_calendars(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_get_calendars(connection, calendar_group_id, calendar_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendar},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_get_count9c6e(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_get_count9c6e(connection, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/calendarGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List calendars
  Retrieve a list of calendars belonging to a calendar group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_list_calendars(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_list_calendars(connection, calendar_group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/calendarGroups/#{calendar_group_id}/calendars")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendarCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property calendars in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `microsoft_graph_calendar` (MicrosoftGraphCalendar): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_update_calendars(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphCalendar.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendar.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_update_calendars(
        connection,
        calendar_group_id,
        calendar_id,
        microsoft_graph_calendar,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}")
      |> add_param(:body, :body, microsoft_graph_calendar)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendar},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create CalendarGroup
  Use this API to create a new CalendarGroup. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_calendar_group` (MicrosoftGraphCalendarGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_create_calendar_groups(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphCalendarGroup.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_create_calendar_groups(connection, microsoft_graph_calendar_group, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarGroups")
      |> add_param(:body, :body, microsoft_graph_calendar_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendarGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete calendarGroup
  Delete a calendar group other than the default calendar group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_delete_calendar_groups(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_delete_calendar_groups(connection, calendar_group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/calendarGroups/#{calendar_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get calendarGroup
  Retrieve the properties and relationships of a calendar group object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_get_calendar_groups(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_get_calendar_groups(connection, calendar_group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/calendarGroups/#{calendar_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendarGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List calendarGroups
  Get the user's calendar groups. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_list_calendar_groups(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarGroupCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_list_calendar_groups(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/calendarGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendarGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update calendargroup
  Update the properties of calendargroup object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `microsoft_graph_calendar_group` (MicrosoftGraphCalendarGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_update_calendar_groups(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphCalendarGroup.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCalendarGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_update_calendar_groups(
        connection,
        calendar_group_id,
        microsoft_graph_calendar_group,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/calendarGroups/#{calendar_group_id}")
      |> add_param(:body, :body, microsoft_graph_calendar_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCalendarGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
