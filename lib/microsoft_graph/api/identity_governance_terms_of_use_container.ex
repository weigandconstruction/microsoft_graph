# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.IdentityGovernanceTermsOfUseContainer do
  @moduledoc """
  API calls for all endpoints tagged `IdentityGovernanceTermsOfUseContainer`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property termsOfUse for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_delete_terms_of_use(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_delete_terms_of_use(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/termsOfUse")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get termsOfUse from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsOfUseContainer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_get_terms_of_use(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsOfUseContainer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_get_terms_of_use(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsOfUseContainer},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreement_acceptances_get_count70d1(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreement_acceptances_get_count70d1(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreementAcceptances/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_acceptances_get_count7e12(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_acceptances_get_count7e12(
        connection,
        agreement_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}/acceptances/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to acceptances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `microsoft_graph_agreement_acceptance` (MicrosoftGraphAgreementAcceptance): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_create_acceptances(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_create_acceptances(
        connection,
        agreement_id,
        microsoft_graph_agreement_acceptance,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}/acceptances")
      |> add_param(:body, :body, microsoft_graph_agreement_acceptance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create agreementFileLocalization
  Create a new localized agreement file. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `microsoft_graph_agreement_file_localization` (MicrosoftGraphAgreementFileLocalization): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_create_files(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_create_files(
        connection,
        agreement_id,
        microsoft_graph_agreement_file_localization,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}/files")
      |> add_param(:body, :body, microsoft_graph_agreement_file_localization)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property acceptances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_acceptance_id` (String.t): The unique identifier of agreementAcceptance
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_delete_acceptances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_delete_acceptances(
        connection,
        agreement_id,
        agreement_acceptance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/acceptances/#{agreement_acceptance_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property file for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_delete_file(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_delete_file(
        connection,
        agreement_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}/file")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_delete_files(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_delete_files(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/files/#{agreement_file_localization_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to localizations for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `microsoft_graph_agreement_file_localization` (MicrosoftGraphAgreementFileLocalization): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_create_localizations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_create_localizations(
        connection,
        agreement_id,
        microsoft_graph_agreement_file_localization,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations")
      |> add_param(:body, :body, microsoft_graph_agreement_file_localization)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property localizations for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_delete_localizations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_delete_localizations(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get localizations from identityGovernance
  The localized version of the terms of use agreement files attached to the agreement.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_get_localizations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_get_localizations(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List agreementFileLocalizations
  Get a list of the default and localized agreement files. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalizationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_list_localizations(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalizationCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_list_localizations(
        connection,
        agreement_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalizationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to versions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `microsoft_graph_agreement_file_version` (MicrosoftGraphAgreementFileVersion): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_localizations_create_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_localizations_create_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        microsoft_graph_agreement_file_version,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions"
      )
      |> add_param(:body, :body, microsoft_graph_agreement_file_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property versions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `agreement_file_version_id` (String.t): The unique identifier of agreementFileVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_localizations_delete_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_localizations_delete_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        agreement_file_version_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions/#{agreement_file_version_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_localizations_get_count_d8c7(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_localizations_get_count_d8c7(
        connection,
        agreement_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get versions from identityGovernance
  Read-only. Customized versions of the terms of use agreement in the Microsoft Entra tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `agreement_file_version_id` (String.t): The unique identifier of agreementFileVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_localizations_get_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_localizations_get_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        agreement_file_version_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions/#{agreement_file_version_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get versions from identityGovernance
  Read-only. Customized versions of the terms of use agreement in the Microsoft Entra tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_localizations_list_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersionCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_localizations_list_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property versions in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `agreement_file_version_id` (String.t): The unique identifier of agreementFileVersion
  - `microsoft_graph_agreement_file_version` (MicrosoftGraphAgreementFileVersion): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_localizations_update_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_localizations_update_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        agreement_file_version_id,
        microsoft_graph_agreement_file_version,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions/#{agreement_file_version_id}"
      )
      |> add_param(:body, :body, microsoft_graph_agreement_file_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_localizations_versions_get_count47c0(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_localizations_versions_get_count47c0(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property localizations in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `microsoft_graph_agreement_file_localization` (MicrosoftGraphAgreementFileLocalization): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_file_update_localizations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_file_update_localizations(
        connection,
        agreement_id,
        agreement_file_localization_id,
        microsoft_graph_agreement_file_localization,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}"
      )
      |> add_param(:body, :body, microsoft_graph_agreement_file_localization)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to versions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `microsoft_graph_agreement_file_version` (MicrosoftGraphAgreementFileVersion): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_files_create_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_files_create_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        microsoft_graph_agreement_file_version,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/files/#{agreement_file_localization_id}/versions"
      )
      |> add_param(:body, :body, microsoft_graph_agreement_file_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property versions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `agreement_file_version_id` (String.t): The unique identifier of agreementFileVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_files_delete_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_files_delete_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        agreement_file_version_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/files/#{agreement_file_localization_id}/versions/#{agreement_file_version_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_files_get_count54ad(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_files_get_count54ad(
        connection,
        agreement_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get versions from identityGovernance
  Read-only. Customized versions of the terms of use agreement in the Microsoft Entra tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `agreement_file_version_id` (String.t): The unique identifier of agreementFileVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_files_get_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_files_get_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        agreement_file_version_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/files/#{agreement_file_localization_id}/versions/#{agreement_file_version_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get versions from identityGovernance
  Read-only. Customized versions of the terms of use agreement in the Microsoft Entra tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_files_list_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersionCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_files_list_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/files/#{agreement_file_localization_id}/versions"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property versions in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `agreement_file_version_id` (String.t): The unique identifier of agreementFileVersion
  - `microsoft_graph_agreement_file_version` (MicrosoftGraphAgreementFileVersion): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_files_update_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_files_update_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        agreement_file_version_id,
        microsoft_graph_agreement_file_version,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/files/#{agreement_file_localization_id}/versions/#{agreement_file_version_id}"
      )
      |> add_param(:body, :body, microsoft_graph_agreement_file_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_files_versions_get_count9b3e(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_files_versions_get_count9b3e(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/files/#{agreement_file_localization_id}/versions/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get acceptances from identityGovernance
  Read-only. Information about acceptances of this agreement.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_acceptance_id` (String.t): The unique identifier of agreementAcceptance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_get_acceptances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_get_acceptances(
        connection,
        agreement_id,
        agreement_acceptance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/acceptances/#{agreement_acceptance_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_get_count7fcc(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_get_count7fcc(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreements/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get agreementFile
  Retrieve the details of an agreement file, including the language and version information. The default file can have multiple versions, each with its own language, that can be retrieved by specifying the Accept-Language header. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_get_file(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFile.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_get_file(connection, agreement_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}/file")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from identityGovernance
  PDFs linked to this agreement. This property is in the process of being deprecated. Use the  file property instead. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_get_files(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_get_files(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/files/#{agreement_file_localization_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List acceptances
  Get the details about the acceptance records for a specific agreement. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptanceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_list_acceptances(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptanceCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_list_acceptances(
        connection,
        agreement_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}/acceptances")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptanceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from identityGovernance
  PDFs linked to this agreement. This property is in the process of being deprecated. Use the  file property instead. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalizationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_list_files(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalizationCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_list_files(connection, agreement_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalizationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property acceptances in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_acceptance_id` (String.t): The unique identifier of agreementAcceptance
  - `microsoft_graph_agreement_acceptance` (MicrosoftGraphAgreementAcceptance): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_update_acceptances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_update_acceptances(
        connection,
        agreement_id,
        agreement_acceptance_id,
        microsoft_graph_agreement_acceptance,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/acceptances/#{agreement_acceptance_id}"
      )
      |> add_param(:body, :body, microsoft_graph_agreement_acceptance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property file in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `microsoft_graph_agreement_file` (MicrosoftGraphAgreementFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_update_file(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFile.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFile.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_update_file(
        connection,
        agreement_id,
        microsoft_graph_agreement_file,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}/file")
      |> add_param(:body, :body, microsoft_graph_agreement_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `microsoft_graph_agreement_file_localization` (MicrosoftGraphAgreementFileLocalization): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_agreements_update_files(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_agreements_update_files(
        connection,
        agreement_id,
        agreement_file_localization_id,
        microsoft_graph_agreement_file_localization,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/termsOfUse/agreements/#{agreement_id}/files/#{agreement_file_localization_id}"
      )
      |> add_param(:body, :body, microsoft_graph_agreement_file_localization)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to agreementAcceptances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_agreement_acceptance` (MicrosoftGraphAgreementAcceptance): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_create_agreement_acceptances(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_create_agreement_acceptances(
        connection,
        microsoft_graph_agreement_acceptance,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/termsOfUse/agreementAcceptances")
      |> add_param(:body, :body, microsoft_graph_agreement_acceptance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create agreement
  Create a new agreement object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_agreement` (MicrosoftGraphAgreement): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreement.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_create_agreements(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphAgreement.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreement.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_create_agreements(
        connection,
        microsoft_graph_agreement,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/termsOfUse/agreements")
      |> add_param(:body, :body, microsoft_graph_agreement)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreement},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property agreementAcceptances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_acceptance_id` (String.t): The unique identifier of agreementAcceptance
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_delete_agreement_acceptances(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_delete_agreement_acceptances(
        connection,
        agreement_acceptance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/termsOfUse/agreementAcceptances/#{agreement_acceptance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete agreement
  Delete an agreement object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_delete_agreements(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_delete_agreements(connection, agreement_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get agreementAcceptances from identityGovernance
  Represents the current status of a user's response to a company's customizable terms of use agreement.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_acceptance_id` (String.t): The unique identifier of agreementAcceptance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_get_agreement_acceptances(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_get_agreement_acceptances(
        connection,
        agreement_acceptance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreementAcceptances/#{agreement_acceptance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get agreement
  Retrieve the properties and relationships of an agreement object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreement.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_get_agreements(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreement.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_get_agreements(connection, agreement_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreement},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get agreementAcceptances from identityGovernance
  Represents the current status of a user's response to a company's customizable terms of use agreement.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptanceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_list_agreement_acceptances(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptanceCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_list_agreement_acceptances(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreementAcceptances")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptanceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List agreements
  Retrieve a list of agreement objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_list_agreements(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_list_agreements(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/termsOfUse/agreements")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property agreementAcceptances in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_acceptance_id` (String.t): The unique identifier of agreementAcceptance
  - `microsoft_graph_agreement_acceptance` (MicrosoftGraphAgreementAcceptance): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_update_agreement_acceptances(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_update_agreement_acceptances(
        connection,
        agreement_acceptance_id,
        microsoft_graph_agreement_acceptance,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/termsOfUse/agreementAcceptances/#{agreement_acceptance_id}")
      |> add_param(:body, :body, microsoft_graph_agreement_acceptance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementAcceptance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update agreement
  Update the properties of an agreement object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `microsoft_graph_agreement` (MicrosoftGraphAgreement): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreement.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_terms_of_use_update_agreements(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreement.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreement.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_terms_of_use_update_agreements(
        connection,
        agreement_id,
        microsoft_graph_agreement,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/termsOfUse/agreements/#{agreement_id}")
      |> add_param(:body, :body, microsoft_graph_agreement)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreement},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property termsOfUse in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_terms_of_use_container` (MicrosoftGraphTermsOfUseContainer): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsOfUseContainer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_update_terms_of_use(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphTermsOfUseContainer.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsOfUseContainer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_update_terms_of_use(
        connection,
        microsoft_graph_terms_of_use_container,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/termsOfUse")
      |> add_param(:body, :body, microsoft_graph_terms_of_use_container)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsOfUseContainer},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
