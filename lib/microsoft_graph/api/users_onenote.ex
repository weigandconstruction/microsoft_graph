# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.UsersOnenote do
  @moduledoc """
  API calls for all endpoints tagged `UsersOnenote`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property onenote for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_delete_onenote(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_delete_onenote(connection, user_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/users/#{user_id}/onenote")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get onenote from users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenote.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_get_onenote(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenote.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_get_onenote(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenote},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create notebook
  Create a new OneNote notebook. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `microsoft_graph_notebook` (MicrosoftGraphNotebook): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_create_notebooks(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphNotebook.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_create_notebooks(connection, user_id, microsoft_graph_notebook, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/users/#{user_id}/onenote/notebooks")
      |> add_param(:body, :body, microsoft_graph_notebook)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to operations for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `microsoft_graph_onenote_operation` (MicrosoftGraphOnenoteOperation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_create_operations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_create_operations(
        connection,
        user_id,
        microsoft_graph_onenote_operation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/users/#{user_id}/onenote/operations")
      |> add_param(:body, :body, microsoft_graph_onenote_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create onenotePage
  Create a new OneNote page in the default section of the default notebook. To create a page in a different section in the default notebook, you can use the sectionName query parameter.  Example: ../onenote/pages?sectionName=My%20section The POST /onenote/pages operation is used only to create pages in the current user's default notebook. If you're targeting other notebooks, you can create pages in a specified section.   This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_create_pages(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_create_pages(connection, user_id, microsoft_graph_onenote_page, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/users/#{user_id}/onenote/pages")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resources for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `microsoft_graph_onenote_resource` (MicrosoftGraphOnenoteResource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_create_resources(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_create_resources(
        connection,
        user_id,
        microsoft_graph_onenote_resource,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/users/#{user_id}/onenote/resources")
      |> add_param(:body, :body, microsoft_graph_onenote_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sectionGroups for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `microsoft_graph_section_group` (MicrosoftGraphSectionGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_create_section_groups(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_create_section_groups(
        connection,
        user_id,
        microsoft_graph_section_group,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/users/#{user_id}/onenote/sectionGroups")
      |> add_param(:body, :body, microsoft_graph_section_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sections for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_create_sections(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_create_sections(
        connection,
        user_id,
        microsoft_graph_onenote_section,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/users/#{user_id}/onenote/sections")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property notebooks for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_delete_notebooks(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_delete_notebooks(connection, user_id, notebook_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property operations for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_operation_id` (String.t): The unique identifier of onenoteOperation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_delete_operations(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_delete_operations(connection, user_id, onenote_operation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/users/#{user_id}/onenote/operations/#{onenote_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete page
  Delete a OneNote page. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_delete_pages(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_delete_pages(connection, user_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/users/#{user_id}/onenote/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resources for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_resource_id` (String.t): The unique identifier of onenoteResource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_delete_resources(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_delete_resources(connection, user_id, onenote_resource_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/users/#{user_id}/onenote/resources/#{onenote_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sectionGroups for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_delete_section_groups(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_delete_section_groups(connection, user_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/users/#{user_id}/onenote/sectionGroups/#{section_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sections for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_delete_sections(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_delete_sections(connection, user_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/users/#{user_id}/onenote/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get notebook
  Retrieve the properties and relationships of a notebook object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_get_notebooks(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_get_notebooks(connection, user_id, notebook_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get onenoteOperation
  Get the status of a long-running OneNote operation. This applies to operations that return the Operation-Location header in the response, such as CopyNotebook, CopyToNotebook, CopyToSectionGroup, and CopyToSection.    You can poll the Operation-Location endpoint until the status property returns completed or failed.  If the status is completed, the resourceLocation property contains the resource endpoint URI.  If the status is failed, the error and @api.diagnostics properties provide error information. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_operation_id` (String.t): The unique identifier of onenoteOperation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_get_operations(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_get_operations(connection, user_id, onenote_operation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/operations/#{onenote_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get page
  Retrieve the properties and relationships of a page object. Getting page information Access a page's metadata by page identifier: Getting page content You can use the page's content endpoint to get the HTML content of a page: The includeIDs=true query option is used to update pages. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_get_pages(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_get_pages(connection, user_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property pages from users
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_get_pages_content(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_get_pages_content(connection, user_id, onenote_page_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/pages/#{onenote_page_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resources from users
  The image and other file resources in OneNote pages. Getting a resources collection isn't supported, but you can get the binary content of a specific resource. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_resource_id` (String.t): The unique identifier of onenoteResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_get_resources(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_get_resources(connection, user_id, onenote_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/resources/#{onenote_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property resources from users
  The content stream

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_resource_id` (String.t): The unique identifier of onenoteResource
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_get_resources_content(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_get_resources_content(connection, user_id, onenote_resource_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/resources/#{onenote_resource_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sectionGroup
  Retrieve the properties and relationships of a sectionGroup object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_get_section_groups(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_get_section_groups(connection, user_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sectionGroups/#{section_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get section
  Retrieve the properties and relationships of a onenoteSection object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_get_sections(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_get_sections(connection, user_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List notebooks
  Retrieve a list of notebook objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebookCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_list_notebooks(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebookCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_list_notebooks(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/notebooks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebookCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get onenoteOperation
  Get the status of a long-running OneNote operation. This applies to operations that return the Operation-Location header in the response, such as CopyNotebook, CopyToNotebook, CopyToSectionGroup, and CopyToSection.    You can poll the Operation-Location endpoint until the status property returns completed or failed.  If the status is completed, the resourceLocation property contains the resource endpoint URI.  If the status is failed, the error and @api.diagnostics properties provide error information. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_list_operations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperationCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_list_operations(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/operations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteOperationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List onenotePages
  Retrieve a list of page objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_list_pages(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_list_pages(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/pages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resources from users
  The image and other file resources in OneNote pages. Getting a resources collection isn't supported, but you can get the binary content of a specific resource. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_list_resources(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResourceCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_list_resources(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/resources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteResourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sectionGroups
  Retrieve a list of sectionGroup objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_list_section_groups(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_list_section_groups(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sectionGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sections
  Retrieve a list of onenoteSection objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_list_sections(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_list_sections(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sections")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create sectionGroup
  Create a new section group in the specified notebook. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `microsoft_graph_section_group` (MicrosoftGraphSectionGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_create_section_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_create_section_groups(
        connection,
        user_id,
        notebook_id,
        microsoft_graph_section_group,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups")
      |> add_param(:body, :body, microsoft_graph_section_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create section
  Create a new onenoteSection in the specified notebook. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_create_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_create_sections(
        connection,
        user_id,
        notebook_id,
        microsoft_graph_onenote_section,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sectionGroups for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_delete_section_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_delete_section_groups(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sections for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_delete_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_delete_sections(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_get_count_af06(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_get_count_af06(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/notebooks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sectionGroups from users
  The section groups in the notebook. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_get_section_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_get_section_groups(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sections from users
  The sections in the notebook. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_get_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_get_sections(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sectionGroups
  Retrieve a list of section groups from the specified notebook. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_list_section_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_list_section_groups(connection, user_id, notebook_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sections
  Retrieve a list of onenoteSection objects from the specified notebook. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_list_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_list_sections(connection, user_id, notebook_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create section
  Create a new onenoteSection in the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_create_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_create_sections(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        microsoft_graph_onenote_section,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections"
      )
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sections for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_delete_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_delete_sections(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_get_count2e9f(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_get_count2e9f(
        connection,
        user_id,
        notebook_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from users
  The notebook that contains the section group. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_get_parent_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_get_parent_notebook(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/parentNotebook"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from users
  The section group that contains the section group. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_get_parent_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_get_parent_section_group(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/parentSectionGroup"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sectionGroups from users
  The section groups in the section. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `section_group_id1` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_get_section_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_get_section_groups(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        section_group_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sectionGroups/#{section_group_id1}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sections from users
  The sections in the section group. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_get_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_get_sections(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sectionGroups
  Retrieve a list of section groups from the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_list_section_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_list_section_groups(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sectionGroups"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sections
  Retrieve a list of onenoteSection objects from the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_list_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_list_sections(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_section_groups_get_count2e9f(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_section_groups_get_count2e9f(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sectionGroups/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create page
  Create a new page in the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_create_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_create_pages(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        microsoft_graph_onenote_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages"
      )
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property pages for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_delete_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_delete_pages(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_get_count2e73(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_get_count2e73(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get pages from users
  The collection of pages in the section.  Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_get_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_get_pages(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property pages from users
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_get_pages_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_get_pages_content(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from users
  The notebook that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_get_parent_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_get_parent_notebook(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/parentNotebook"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from users
  The section group that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_get_parent_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_get_parent_section_group(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/parentSectionGroup"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List pages
  Retrieve a list of page objects from the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_list_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_list_pages(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_pages_get_count_a323(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_pages_get_count_a323(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from users
  The notebook that contains the page.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_pages_get_parent_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_pages_get_parent_notebook(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentNotebook"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSection from users
  The section that contains the page. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_pages_get_parent_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_pages_get_parent_section(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentSection"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pages in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_update_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_update_pages(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        microsoft_graph_onenote_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}"
      )
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property pages in users
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_sections_update_pages_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_sections_update_pages_content(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content"
      )
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sections in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_section_groups_update_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_section_groups_update_sections(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        microsoft_graph_onenote_section,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}"
      )
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create page
  Create a new page in the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_create_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_create_pages(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        microsoft_graph_onenote_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages"
      )
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property pages for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_delete_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_delete_pages(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_get_count2f79(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_get_count2f79(connection, user_id, notebook_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get pages from users
  The collection of pages in the section.  Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_get_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_get_pages(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property pages from users
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_get_pages_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_get_pages_content(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from users
  The notebook that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_get_parent_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_get_parent_notebook(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/parentNotebook"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from users
  The section group that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_get_parent_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_get_parent_section_group(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/parentSectionGroup"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List pages
  Retrieve a list of page objects from the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_list_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_list_pages(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_pages_get_count_c5e5(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_pages_get_count_c5e5(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from users
  The notebook that contains the page.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_pages_get_parent_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_pages_get_parent_notebook(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentNotebook"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSection from users
  The section that contains the page. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_pages_get_parent_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_pages_get_parent_section(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentSection"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pages in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_update_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_update_pages(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        microsoft_graph_onenote_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}"
      )
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property pages in users
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_sections_update_pages_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_sections_update_pages_content(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content"
      )
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sectionGroups in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `microsoft_graph_section_group` (MicrosoftGraphSectionGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_update_section_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_update_section_groups(
        connection,
        user_id,
        notebook_id,
        section_group_id,
        microsoft_graph_section_group,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/users/#{user_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}"
      )
      |> add_param(:body, :body, microsoft_graph_section_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sections in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_notebooks_update_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_notebooks_update_sections(
        connection,
        user_id,
        notebook_id,
        onenote_section_id,
        microsoft_graph_onenote_section,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_operations_get_count_adfa(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_operations_get_count_adfa(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/operations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_pages_get_count_b080(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_pages_get_count_b080(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/pages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from users
  The notebook that contains the page.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_pages_get_parent_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_pages_get_parent_notebook(connection, user_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/pages/#{onenote_page_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSection from users
  The section that contains the page. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_pages_get_parent_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_pages_get_parent_section(connection, user_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/pages/#{onenote_page_id}/parentSection")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_resources_get_count_dba6(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_resources_get_count_dba6(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/resources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create section
  Create a new onenoteSection in the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_create_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_create_sections(
        connection,
        user_id,
        section_group_id,
        microsoft_graph_onenote_section,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sections for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_delete_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_delete_sections(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_get_count497a(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_get_count497a(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sectionGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from users
  The notebook that contains the section group. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_get_parent_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_get_parent_notebook(
        connection,
        user_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from users
  The section group that contains the section group. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_get_parent_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_get_parent_section_group(
        connection,
        user_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/parentSectionGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sectionGroups from users
  The section groups in the section. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `section_group_id1` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_get_section_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_get_section_groups(
        connection,
        user_id,
        section_group_id,
        section_group_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sectionGroups/#{section_group_id1}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sections from users
  The sections in the section group. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_get_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_get_sections(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sectionGroups
  Retrieve a list of section groups from the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_list_section_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_list_section_groups(
        connection,
        user_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sectionGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sections
  Retrieve a list of onenoteSection objects from the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_list_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_list_sections(
        connection,
        user_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_section_groups_get_count497a(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_section_groups_get_count497a(
        connection,
        user_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sectionGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create page
  Create a new page in the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_create_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_create_pages(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        microsoft_graph_onenote_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages"
      )
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property pages for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_delete_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_delete_pages(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_get_count6826(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_get_count6826(
        connection,
        user_id,
        section_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get pages from users
  The collection of pages in the section.  Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_get_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_get_pages(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property pages from users
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_get_pages_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_get_pages_content(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from users
  The notebook that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_get_parent_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_get_parent_notebook(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/parentNotebook"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from users
  The section group that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_get_parent_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_get_parent_section_group(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/parentSectionGroup"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List pages
  Retrieve a list of page objects from the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_list_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_list_pages(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_pages_get_count_dfde(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_pages_get_count_dfde(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from users
  The notebook that contains the page.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_pages_get_parent_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_pages_get_parent_notebook(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentNotebook"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSection from users
  The section that contains the page. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_pages_get_parent_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_pages_get_parent_section(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentSection"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pages in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_update_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_update_pages(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        microsoft_graph_onenote_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}"
      )
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property pages in users
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_sections_update_pages_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_sections_update_pages_content(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content"
      )
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sections in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_section_groups_update_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_section_groups_update_sections(
        connection,
        user_id,
        section_group_id,
        onenote_section_id,
        microsoft_graph_onenote_section,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/users/#{user_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}"
      )
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create page
  Create a new page in the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_create_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_create_pages(
        connection,
        user_id,
        onenote_section_id,
        microsoft_graph_onenote_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/users/#{user_id}/onenote/sections/#{onenote_section_id}/pages")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property pages for users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_delete_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_delete_pages(
        connection,
        user_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/users/#{user_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_get_count8b0b(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_get_count8b0b(connection, user_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sections/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get pages from users
  The collection of pages in the section.  Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_get_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_get_pages(
        connection,
        user_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property pages from users
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_get_pages_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_get_pages_content(
        connection,
        user_id,
        onenote_section_id,
        onenote_page_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from users
  The notebook that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_get_parent_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_get_parent_notebook(
        connection,
        user_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sections/#{onenote_section_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from users
  The section group that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_get_parent_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_get_parent_section_group(
        connection,
        user_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sections/#{onenote_section_id}/parentSectionGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List pages
  Retrieve a list of page objects from the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_list_pages(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_list_pages(connection, user_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sections/#{onenote_section_id}/pages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_pages_get_count17eb(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_pages_get_count17eb(
        connection,
        user_id,
        onenote_section_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/users/#{user_id}/onenote/sections/#{onenote_section_id}/pages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from users
  The notebook that contains the page.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_pages_get_parent_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_pages_get_parent_notebook(
        connection,
        user_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentNotebook"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSection from users
  The section that contains the page. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_pages_get_parent_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_pages_get_parent_section(
        connection,
        user_id,
        onenote_section_id,
        onenote_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/users/#{user_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentSection"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pages in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_update_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_update_pages(
        connection,
        user_id,
        onenote_section_id,
        onenote_page_id,
        microsoft_graph_onenote_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/users/#{user_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property pages in users
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_sections_update_pages_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_sections_update_pages_content(
        connection,
        user_id,
        onenote_section_id,
        onenote_page_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url(
        "/users/#{user_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content"
      )
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property notebooks in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `notebook_id` (String.t): The unique identifier of notebook
  - `microsoft_graph_notebook` (MicrosoftGraphNotebook): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_update_notebooks(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphNotebook.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_update_notebooks(
        connection,
        user_id,
        notebook_id,
        microsoft_graph_notebook,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/users/#{user_id}/onenote/notebooks/#{notebook_id}")
      |> add_param(:body, :body, microsoft_graph_notebook)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property operations in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_operation_id` (String.t): The unique identifier of onenoteOperation
  - `microsoft_graph_onenote_operation` (MicrosoftGraphOnenoteOperation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_update_operations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_update_operations(
        connection,
        user_id,
        onenote_operation_id,
        microsoft_graph_onenote_operation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/users/#{user_id}/onenote/operations/#{onenote_operation_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pages in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_update_pages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_update_pages(
        connection,
        user_id,
        onenote_page_id,
        microsoft_graph_onenote_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/users/#{user_id}/onenote/pages/#{onenote_page_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property pages in users
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_update_pages_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_update_pages_content(connection, user_id, onenote_page_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/users/#{user_id}/onenote/pages/#{onenote_page_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resources in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_resource_id` (String.t): The unique identifier of onenoteResource
  - `microsoft_graph_onenote_resource` (MicrosoftGraphOnenoteResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_update_resources(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_update_resources(
        connection,
        user_id,
        onenote_resource_id,
        microsoft_graph_onenote_resource,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/users/#{user_id}/onenote/resources/#{onenote_resource_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property resources in users
  The content stream

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_resource_id` (String.t): The unique identifier of onenoteResource
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_update_resources_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_update_resources_content(
        connection,
        user_id,
        onenote_resource_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url("/users/#{user_id}/onenote/resources/#{onenote_resource_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sectionGroups in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `microsoft_graph_section_group` (MicrosoftGraphSectionGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_update_section_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_update_section_groups(
        connection,
        user_id,
        section_group_id,
        microsoft_graph_section_group,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/users/#{user_id}/onenote/sectionGroups/#{section_group_id}")
      |> add_param(:body, :body, microsoft_graph_section_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sections in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_onenote_update_sections(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_onenote_update_sections(
        connection,
        user_id,
        onenote_section_id,
        microsoft_graph_onenote_section,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/users/#{user_id}/onenote/sections/#{onenote_section_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property onenote in users

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): The unique identifier of user
  - `microsoft_graph_onenote` (MicrosoftGraphOnenote): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenote.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec users_update_onenote(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOnenote.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenote.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def users_update_onenote(connection, user_id, microsoft_graph_onenote, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/users/#{user_id}/onenote")
      |> add_param(:body, :body, microsoft_graph_onenote)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenote},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
