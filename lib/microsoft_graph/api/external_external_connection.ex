# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.ExternalExternalConnection do
  @moduledoc """
  API calls for all endpoints tagged `ExternalExternalConnection`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create externalGroup
  Create a new externalGroup object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `microsoft_graph_external_connectors_external_group` (MicrosoftGraphExternalConnectorsExternalGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_create_groups(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroup.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_create_groups(
        connection,
        external_connection_id,
        microsoft_graph_external_connectors_external_group,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/external/connections/#{external_connection_id}/groups")
      |> add_param(:body, :body, microsoft_graph_external_connectors_external_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to items for external

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `microsoft_graph_external_connectors_external_item` (MicrosoftGraphExternalConnectorsExternalItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_create_items(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItem.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_create_items(
        connection,
        external_connection_id,
        microsoft_graph_external_connectors_external_item,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/external/connections/#{external_connection_id}/items")
      |> add_param(:body, :body, microsoft_graph_external_connectors_external_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to operations for external

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `microsoft_graph_external_connectors_connection_operation` (MicrosoftGraphExternalConnectorsConnectionOperation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_create_operations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperation.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_create_operations(
        connection,
        external_connection_id,
        microsoft_graph_external_connectors_connection_operation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/external/connections/#{external_connection_id}/operations")
      |> add_param(:body, :body, microsoft_graph_external_connectors_connection_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete externalGroup
  Delete an externalGroup object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_group_id` (String.t): The unique identifier of externalGroup
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_delete_groups(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_delete_groups(
        connection,
        external_connection_id,
        external_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/external/connections/#{external_connection_id}/groups/#{external_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete externalItem
  Delete an externalItem object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_item_id` (String.t): The unique identifier of externalItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_delete_items(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_delete_items(
        connection,
        external_connection_id,
        external_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/external/connections/#{external_connection_id}/items/#{external_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property operations for external

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `connection_operation_id` (String.t): The unique identifier of connectionOperation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_delete_operations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_delete_operations(
        connection,
        external_connection_id,
        connection_operation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/external/connections/#{external_connection_id}/operations/#{connection_operation_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_get_count5ccf(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_get_count5ccf(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get externalGroup
  Get an externalGroup object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_group_id` (String.t): The unique identifier of externalGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_get_groups(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_get_groups(
        connection,
        external_connection_id,
        external_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections/#{external_connection_id}/groups/#{external_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get externalItem
  Read the properties and relationships of an externalItem object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_item_id` (String.t): The unique identifier of externalItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_get_items(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_get_items(
        connection,
        external_connection_id,
        external_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections/#{external_connection_id}/items/#{external_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get connectionOperation
  Read the properties and relationships of a connectionOperation object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `connection_operation_id` (String.t): The unique identifier of connectionOperation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_get_operations(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperation.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_get_operations(
        connection,
        external_connection_id,
        connection_operation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/external/connections/#{external_connection_id}/operations/#{connection_operation_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get schema
  Read the properties and relationships of a schema object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsSchema.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_get_schema(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsSchema.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_get_schema(connection, external_connection_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections/#{external_connection_id}/schema")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsSchema},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create identity
  Create an identity resource for a new member in an externalGroup. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_group_id` (String.t): The unique identifier of externalGroup
  - `microsoft_graph_external_connectors_identity` (MicrosoftGraphExternalConnectorsIdentity): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_groups_create_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_groups_create_members(
        connection,
        external_connection_id,
        external_group_id,
        microsoft_graph_external_connectors_identity,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/external/connections/#{external_connection_id}/groups/#{external_group_id}/members"
      )
      |> add_param(:body, :body, microsoft_graph_external_connectors_identity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete identity
  Delete an identity resource to remove the corresponding member from an externalGroup. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_group_id` (String.t): The unique identifier of externalGroup
  - `identity_id` (String.t): The unique identifier of identity
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_groups_delete_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_groups_delete_members(
        connection,
        external_connection_id,
        external_group_id,
        identity_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/external/connections/#{external_connection_id}/groups/#{external_group_id}/members/#{identity_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_groups_get_count51f5(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_groups_get_count51f5(connection, external_connection_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections/#{external_connection_id}/groups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get members from external
  A member added to an externalGroup. You can add Microsoft Entra users, Microsoft Entra groups, or an externalGroup as members.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_group_id` (String.t): The unique identifier of externalGroup
  - `identity_id` (String.t): The unique identifier of identity
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_groups_get_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_groups_get_members(
        connection,
        external_connection_id,
        external_group_id,
        identity_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/external/connections/#{external_connection_id}/groups/#{external_group_id}/members/#{identity_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get members from external
  A member added to an externalGroup. You can add Microsoft Entra users, Microsoft Entra groups, or an externalGroup as members.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_group_id` (String.t): The unique identifier of externalGroup
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentityCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_groups_list_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentityCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_groups_list_members(
        connection,
        external_connection_id,
        external_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/external/connections/#{external_connection_id}/groups/#{external_group_id}/members"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentityCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_group_id` (String.t): The unique identifier of externalGroup
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_groups_members_get_count482b(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_groups_members_get_count482b(
        connection,
        external_connection_id,
        external_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/external/connections/#{external_connection_id}/groups/#{external_group_id}/members/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property members in external

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_group_id` (String.t): The unique identifier of externalGroup
  - `identity_id` (String.t): The unique identifier of identity
  - `microsoft_graph_external_connectors_identity` (MicrosoftGraphExternalConnectorsIdentity): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_groups_update_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_groups_update_members(
        connection,
        external_connection_id,
        external_group_id,
        identity_id,
        microsoft_graph_external_connectors_identity,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/external/connections/#{external_connection_id}/groups/#{external_group_id}/members/#{identity_id}"
      )
      |> add_param(:body, :body, microsoft_graph_external_connectors_identity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_item_id` (String.t): The unique identifier of externalItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_items_activities_get_count_d5b5(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_items_activities_get_count_d5b5(
        connection,
        external_connection_id,
        external_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/external/connections/#{external_connection_id}/items/#{external_item_id}/activities/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get performedBy from external
  Represents an identity used to identify who is responsible for the activity.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_item_id` (String.t): The unique identifier of externalItem
  - `external_activity_id` (String.t): The unique identifier of externalActivity
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_items_activities_get_performed_by(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_items_activities_get_performed_by(
        connection,
        external_connection_id,
        external_item_id,
        external_activity_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/external/connections/#{external_connection_id}/items/#{external_item_id}/activities/#{external_activity_id}/performedBy"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsIdentity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to activities for external

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_item_id` (String.t): The unique identifier of externalItem
  - `microsoft_graph_external_connectors_external_activity` (MicrosoftGraphExternalConnectorsExternalActivity): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_items_create_activities(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivity.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivity.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_items_create_activities(
        connection,
        external_connection_id,
        external_item_id,
        microsoft_graph_external_connectors_external_activity,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/external/connections/#{external_connection_id}/items/#{external_item_id}/activities"
      )
      |> add_param(:body, :body, microsoft_graph_external_connectors_external_activity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property activities for external

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_item_id` (String.t): The unique identifier of externalItem
  - `external_activity_id` (String.t): The unique identifier of externalActivity
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_items_delete_activities(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_items_delete_activities(
        connection,
        external_connection_id,
        external_item_id,
        external_activity_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/external/connections/#{external_connection_id}/items/#{external_item_id}/activities/#{external_activity_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activities from external
  Returns a list of activities performed on the item. Write-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_item_id` (String.t): The unique identifier of externalItem
  - `external_activity_id` (String.t): The unique identifier of externalActivity
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_items_get_activities(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivity.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_items_get_activities(
        connection,
        external_connection_id,
        external_item_id,
        external_activity_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/external/connections/#{external_connection_id}/items/#{external_item_id}/activities/#{external_activity_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_items_get_count_e4dc(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_items_get_count_e4dc(connection, external_connection_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections/#{external_connection_id}/items/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activities from external
  Returns a list of activities performed on the item. Write-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_item_id` (String.t): The unique identifier of externalItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivityCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_items_list_activities(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivityCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_items_list_activities(
        connection,
        external_connection_id,
        external_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/external/connections/#{external_connection_id}/items/#{external_item_id}/activities"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivityCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property activities in external

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_item_id` (String.t): The unique identifier of externalItem
  - `external_activity_id` (String.t): The unique identifier of externalActivity
  - `microsoft_graph_external_connectors_external_activity` (MicrosoftGraphExternalConnectorsExternalActivity): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_items_update_activities(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivity.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivity.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_items_update_activities(
        connection,
        external_connection_id,
        external_item_id,
        external_activity_id,
        microsoft_graph_external_connectors_external_activity,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/external/connections/#{external_connection_id}/items/#{external_item_id}/activities/#{external_activity_id}"
      )
      |> add_param(:body, :body, microsoft_graph_external_connectors_external_activity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get externalGroup
  Get an externalGroup object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_list_groups(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroupCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_list_groups(connection, external_connection_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections/#{external_connection_id}/groups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get externalItem
  Read the properties and relationships of an externalItem object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_list_items(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItemCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_list_items(connection, external_connection_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections/#{external_connection_id}/items")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get connectionOperation
  Read the properties and relationships of a connectionOperation object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_list_operations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperationCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_list_operations(connection, external_connection_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections/#{external_connection_id}/operations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_operations_get_count_f5c4(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_operations_get_count_f5c4(
        connection,
        external_connection_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections/#{external_connection_id}/operations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update externalGroup
  Update the properties of an externalGroup object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_group_id` (String.t): The unique identifier of externalGroup
  - `microsoft_graph_external_connectors_external_group` (MicrosoftGraphExternalConnectorsExternalGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_update_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroup.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_update_groups(
        connection,
        external_connection_id,
        external_group_id,
        microsoft_graph_external_connectors_external_group,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/external/connections/#{external_connection_id}/groups/#{external_group_id}")
      |> add_param(:body, :body, microsoft_graph_external_connectors_external_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property items in external

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `external_item_id` (String.t): The unique identifier of externalItem
  - `microsoft_graph_external_connectors_external_item` (MicrosoftGraphExternalConnectorsExternalItem): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_update_items(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItem.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_update_items(
        connection,
        external_connection_id,
        external_item_id,
        microsoft_graph_external_connectors_external_item,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url("/external/connections/#{external_connection_id}/items/#{external_item_id}")
      |> add_param(:body, :body, microsoft_graph_external_connectors_external_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property operations in external

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `connection_operation_id` (String.t): The unique identifier of connectionOperation
  - `microsoft_graph_external_connectors_connection_operation` (MicrosoftGraphExternalConnectorsConnectionOperation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_update_operations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperation.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_update_operations(
        connection,
        external_connection_id,
        connection_operation_id,
        microsoft_graph_external_connectors_connection_operation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/external/connections/#{external_connection_id}/operations/#{connection_operation_id}"
      )
      |> add_param(:body, :body, microsoft_graph_external_connectors_connection_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsConnectionOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create schema
  Create a new schema object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `microsoft_graph_external_connectors_schema` (MicrosoftGraphExternalConnectorsSchema): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsSchema.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_connections_update_schema(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsSchema.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsSchema.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_connections_update_schema(
        connection,
        external_connection_id,
        microsoft_graph_external_connectors_schema,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/external/connections/#{external_connection_id}/schema")
      |> add_param(:body, :body, microsoft_graph_external_connectors_schema)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsSchema},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create externalConnection
  Create a new externalConnection object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_external_connectors_external_connection` (MicrosoftGraphExternalConnectorsExternalConnection): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_create_connections(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnection.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnection.t()}
          | {:error, Tesla.Env.t()}
  def external_create_connections(
        connection,
        microsoft_graph_external_connectors_external_connection,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/external/connections")
      |> add_param(:body, :body, microsoft_graph_external_connectors_external_connection)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete externalConnection
  Deletes an externalConnection object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_delete_connections(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def external_delete_connections(connection, external_connection_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/external/connections/#{external_connection_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get externalConnection
  Read the properties and relationships of an externalConnection object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_get_connections(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnection.t()}
          | {:error, Tesla.Env.t()}
  def external_get_connections(connection, external_connection_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections/#{external_connection_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List externalConnections
  Get a list of the externalConnection objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnectionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_list_connections(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnectionCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def external_list_connections(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/external/connections")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnectionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update externalConnection
  Update the properties of an externalConnection object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `external_connection_id` (String.t): The unique identifier of externalConnection
  - `microsoft_graph_external_connectors_external_connection` (MicrosoftGraphExternalConnectorsExternalConnection): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec external_update_connections(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnection.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnection.t()}
          | {:error, Tesla.Env.t()}
  def external_update_connections(
        connection,
        external_connection_id,
        microsoft_graph_external_connectors_external_connection,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/external/connections/#{external_connection_id}")
      |> add_param(:body, :body, microsoft_graph_external_connectors_external_connection)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExternalConnectorsExternalConnection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
