# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.AdminActions do
  @moduledoc """
  API calls for all endpoints tagged `AdminActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action publish
  Publish the specified browserSiteList for devices to download. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `browser_site_list_id` (String.t): The unique identifier of browserSiteList
  - `admin_edge_internet_explorer_mode_site_lists_browser_site_list_publish_request` (AdminEdgeInternetExplorerModeSiteListsBrowserSiteListPublishRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.AdminEdgeInternetExplorerModeSiteListsBrowserSiteListPublish2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_edge_internet_explorer_mode_site_lists_browser_site_list_publish(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.AdminEdgeInternetExplorerModeSiteListsBrowserSiteListPublishRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.AdminEdgeInternetExplorerModeSiteListsBrowserSiteListPublish2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def admin_edge_internet_explorer_mode_site_lists_browser_site_list_publish(
        connection,
        browser_site_list_id,
        admin_edge_internet_explorer_mode_site_lists_browser_site_list_publish_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/edge/internetExplorerMode/siteLists/#{browser_site_list_id}/publish")
      |> add_param(
        :body,
        :body,
        admin_edge_internet_explorer_mode_site_lists_browser_site_list_publish_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.AdminEdgeInternetExplorerModeSiteListsBrowserSiteListPublish2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action archive
  Archive a list of serviceUpdateMessages for the signed in user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `admin_service_announcement_messages_unfavorite_request` (AdminServiceAnnouncementMessagesUnfavoriteRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_archive(
          Tesla.Env.client(),
          MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavoriteRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def admin_service_announcement_messages_archive(
        connection,
        admin_service_announcement_messages_unfavorite_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/serviceAnnouncement/messages/archive")
      |> add_param(:body, :body, admin_service_announcement_messages_unfavorite_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action favorite
  Change the status of a list of serviceUpdateMessages to favorite for the signed in user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `admin_service_announcement_messages_unfavorite_request` (AdminServiceAnnouncementMessagesUnfavoriteRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_favorite(
          Tesla.Env.client(),
          MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavoriteRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def admin_service_announcement_messages_favorite(
        connection,
        admin_service_announcement_messages_unfavorite_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/serviceAnnouncement/messages/favorite")
      |> add_param(:body, :body, admin_service_announcement_messages_unfavorite_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action markRead
  Mark a list of serviceUpdateMessages as read for the signed in user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `admin_service_announcement_messages_unfavorite_request` (AdminServiceAnnouncementMessagesUnfavoriteRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_mark_read(
          Tesla.Env.client(),
          MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavoriteRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def admin_service_announcement_messages_mark_read(
        connection,
        admin_service_announcement_messages_unfavorite_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/serviceAnnouncement/messages/markRead")
      |> add_param(:body, :body, admin_service_announcement_messages_unfavorite_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action markUnread
  Mark a list of serviceUpdateMessages as unread for the signed in user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `admin_service_announcement_messages_unfavorite_request` (AdminServiceAnnouncementMessagesUnfavoriteRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_mark_unread(
          Tesla.Env.client(),
          MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavoriteRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def admin_service_announcement_messages_mark_unread(
        connection,
        admin_service_announcement_messages_unfavorite_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/serviceAnnouncement/messages/markUnread")
      |> add_param(:body, :body, admin_service_announcement_messages_unfavorite_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unarchive
  Unarchive a list of serviceUpdateMessages for the signed in user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `admin_service_announcement_messages_unfavorite_request` (AdminServiceAnnouncementMessagesUnfavoriteRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_unarchive(
          Tesla.Env.client(),
          MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavoriteRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def admin_service_announcement_messages_unarchive(
        connection,
        admin_service_announcement_messages_unfavorite_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/serviceAnnouncement/messages/unarchive")
      |> add_param(:body, :body, admin_service_announcement_messages_unfavorite_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unfavorite
  Remove the favorite status of serviceUpdateMessages for the signed in user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `admin_service_announcement_messages_unfavorite_request` (AdminServiceAnnouncementMessagesUnfavoriteRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_unfavorite(
          Tesla.Env.client(),
          MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavoriteRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def admin_service_announcement_messages_unfavorite(
        connection,
        admin_service_announcement_messages_unfavorite_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/serviceAnnouncement/messages/unfavorite")
      |> add_param(:body, :body, admin_service_announcement_messages_unfavorite_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
