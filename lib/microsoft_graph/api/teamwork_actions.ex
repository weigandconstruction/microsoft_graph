# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.TeamworkActions do
  @moduledoc """
  API calls for all endpoints tagged `TeamworkActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action completeMigration
  Complete the message migration process by removing migration mode from a channel in a team. Migration mode is a special state that prevents certain operations, like sending messages and adding members, during the data migration process. After a completeMigration request is made, you can't import additional messages into the team. You can add members to the team after the request returns a successful response. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_complete_migration(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_complete_migration(connection, deleted_team_id, channel_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/completeMigration")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Add multiple members in a single request to a team. The response provides details about which memberships could and couldn't be created. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `me_joined_teams_team_members_add_request` (MeJoinedTeamsTeamMembersAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_members_add(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_members_add(connection, deleted_team_id, channel_id, me_joined_teams_team_members_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/members/add")
      |> add_param(:body, :body, me_joined_teams_team_members_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_set_reaction(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_set_reaction(connection, deleted_team_id, channel_id, chat_message_id, chat_message_id1, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/setReaction")
      |> add_param(:body, :body, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_soft_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_soft_delete(connection, deleted_team_id, channel_id, chat_message_id, chat_message_id1, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/softDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_undo_soft_delete(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_undo_soft_delete(connection, deleted_team_id, channel_id, chat_message_id, chat_message_id1, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/undoSoftDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_unset_reaction(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_replies_chat_message_unset_reaction(connection, deleted_team_id, channel_id, chat_message_id, chat_message_id1, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/unsetReaction")
      |> add_param(:body, :body, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_set_reaction(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_set_reaction(connection, deleted_team_id, channel_id, chat_message_id, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/messages/#{chat_message_id}/setReaction")
      |> add_param(:body, :body, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_soft_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_soft_delete(connection, deleted_team_id, channel_id, chat_message_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/messages/#{chat_message_id}/softDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_undo_soft_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_undo_soft_delete(connection, deleted_team_id, channel_id, chat_message_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/messages/#{chat_message_id}/undoSoftDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_unset_reaction(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_messages_chat_message_unset_reaction(connection, deleted_team_id, channel_id, chat_message_id, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/messages/#{chat_message_id}/unsetReaction")
      |> add_param(:body, :body, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action provisionEmail
  Provision an email address for a channel. Microsoft Teams doesn't automatically provision an email address for a channel by default. To have Teams provision an email address, you can call provisionEmail, or through the Teams user interface, select Get email address, which triggers Teams to generate an email address if it has not already provisioned one. To remove the email address of a channel, use the removeEmail method. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_provision_email(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_provision_email(connection, deleted_team_id, channel_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/provisionEmail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action removeEmail
  Remove the email address of a channel. You can remove an email address only if it was provisioned using the provisionEmail method or through the Microsoft Teams client. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `deleted_team_id` (String.t): The unique identifier of deletedTeam
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_deleted_teams_deleted_team_channels_channel_remove_email(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_deleted_teams_deleted_team_channels_channel_remove_email(connection, deleted_team_id, channel_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/deletedTeams/#{deleted_team_id}/channels/#{channel_id}/removeEmail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sendActivityNotificationToRecipients
  Send activity feed notifications to multiple users, in bulk.  For more details about sending notifications and the requirements for doing so, see sending Teams activity notifications. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teamwork_send_activity_notification_to_recipients_request` (TeamworkSendActivityNotificationToRecipientsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teamwork_send_activity_notification_to_recipients(Tesla.Env.client, MicrosoftGraph.Model.TeamworkSendActivityNotificationToRecipientsRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teamwork_send_activity_notification_to_recipients(connection, teamwork_send_activity_notification_to_recipients_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teamwork/sendActivityNotificationToRecipients")
      |> add_param(:body, :body, teamwork_send_activity_notification_to_recipients_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
