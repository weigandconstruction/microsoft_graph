# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceAppManagementTargetedManagedAppConfiguration do
  @moduledoc """
  API calls for all endpoints tagged `DeviceAppManagementTargetedManagedAppConfiguration`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create targetedManagedAppConfiguration
  Create a new targetedManagedAppConfiguration object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_targeted_managed_app_configuration` (MicrosoftGraphTargetedManagedAppConfiguration): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_create_targeted_managed_app_configurations(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfiguration.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfiguration.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_create_targeted_managed_app_configurations(
        connection,
        microsoft_graph_targeted_managed_app_configuration,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/targetedManagedAppConfigurations")
      |> add_param(:body, :body, microsoft_graph_targeted_managed_app_configuration)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete targetedManagedAppConfiguration
  Deletes a targetedManagedAppConfiguration.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_delete_targeted_managed_app_configurations(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_delete_targeted_managed_app_configurations(
        connection,
        targeted_managed_app_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get targetedManagedAppConfiguration
  Read properties and relationships of the targetedManagedAppConfiguration object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_targeted_managed_app_configurations(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfiguration.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_get_targeted_managed_app_configurations(
        connection,
        targeted_managed_app_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List targetedManagedAppConfigurations
  List properties and relationships of the targetedManagedAppConfiguration objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfigurationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_targeted_managed_app_configurations(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfigurationCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_list_targeted_managed_app_configurations(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/targetedManagedAppConfigurations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfigurationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_apps_get_count0ba7(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_apps_get_count0ba7(
        connection,
        targeted_managed_app_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/apps/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_assignments_get_count5948(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_assignments_get_count5948(
        connection,
        targeted_managed_app_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/assignments/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to apps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `microsoft_graph_managed_mobile_app` (MicrosoftGraphManagedMobileApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_create_apps(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_create_apps(
        connection,
        targeted_managed_app_configuration_id,
        microsoft_graph_managed_mobile_app,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/apps"
      )
      |> add_param(:body, :body, microsoft_graph_managed_mobile_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to assignments for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `microsoft_graph_targeted_managed_app_policy_assignment` (MicrosoftGraphTargetedManagedAppPolicyAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_create_assignments(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_create_assignments(
        connection,
        targeted_managed_app_configuration_id,
        microsoft_graph_targeted_managed_app_policy_assignment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/assignments"
      )
      |> add_param(:body, :body, microsoft_graph_targeted_managed_app_policy_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property apps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `managed_mobile_app_id` (String.t): The unique identifier of managedMobileApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_delete_apps(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_delete_apps(
        connection,
        targeted_managed_app_configuration_id,
        managed_mobile_app_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/apps/#{managed_mobile_app_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property assignments for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `targeted_managed_app_policy_assignment_id` (String.t): The unique identifier of targetedManagedAppPolicyAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_delete_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_delete_assignments(
        connection,
        targeted_managed_app_configuration_id,
        targeted_managed_app_policy_assignment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/assignments/#{targeted_managed_app_policy_assignment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property deploymentSummary for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_delete_deployment_summary(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_delete_deployment_summary(
        connection,
        targeted_managed_app_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/deploymentSummary"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get apps from deviceAppManagement
  List of apps to which the policy is deployed.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `managed_mobile_app_id` (String.t): The unique identifier of managedMobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_get_apps(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_get_apps(
        connection,
        targeted_managed_app_configuration_id,
        managed_mobile_app_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/apps/#{managed_mobile_app_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get assignments from deviceAppManagement
  Navigation property to list of inclusion and exclusion groups to which the policy is deployed.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `targeted_managed_app_policy_assignment_id` (String.t): The unique identifier of targetedManagedAppPolicyAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_get_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_get_assignments(
        connection,
        targeted_managed_app_configuration_id,
        targeted_managed_app_policy_assignment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/assignments/#{targeted_managed_app_policy_assignment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_get_count8d50(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_get_count8d50(
        connection,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/targetedManagedAppConfigurations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deploymentSummary from deviceAppManagement
  Navigation property to deployment summary of the configuration.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_get_deployment_summary(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_get_deployment_summary(
        connection,
        targeted_managed_app_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/deploymentSummary"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get apps from deviceAppManagement
  List of apps to which the policy is deployed.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_list_apps(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileAppCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_list_apps(
        connection,
        targeted_managed_app_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/apps"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedMobileAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get assignments from deviceAppManagement
  Navigation property to list of inclusion and exclusion groups to which the policy is deployed.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_list_assignments(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignmentCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_list_assignments(
        connection,
        targeted_managed_app_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/assignments"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property apps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `managed_mobile_app_id` (String.t): The unique identifier of managedMobileApp
  - `microsoft_graph_managed_mobile_app` (MicrosoftGraphManagedMobileApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_update_apps(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_update_apps(
        connection,
        targeted_managed_app_configuration_id,
        managed_mobile_app_id,
        microsoft_graph_managed_mobile_app,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/apps/#{managed_mobile_app_id}"
      )
      |> add_param(:body, :body, microsoft_graph_managed_mobile_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property assignments in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `targeted_managed_app_policy_assignment_id` (String.t): The unique identifier of targetedManagedAppPolicyAssignment
  - `microsoft_graph_targeted_managed_app_policy_assignment` (MicrosoftGraphTargetedManagedAppPolicyAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_update_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_update_assignments(
        connection,
        targeted_managed_app_configuration_id,
        targeted_managed_app_policy_assignment_id,
        microsoft_graph_targeted_managed_app_policy_assignment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/assignments/#{targeted_managed_app_policy_assignment_id}"
      )
      |> add_param(:body, :body, microsoft_graph_targeted_managed_app_policy_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppPolicyAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property deploymentSummary in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `microsoft_graph_managed_app_policy_deployment_summary` (MicrosoftGraphManagedAppPolicyDeploymentSummary): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_targeted_managed_app_configurations_update_deployment_summary(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_targeted_managed_app_configurations_update_deployment_summary(
        connection,
        targeted_managed_app_configuration_id,
        microsoft_graph_managed_app_policy_deployment_summary,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}/deploymentSummary"
      )
      |> add_param(:body, :body, microsoft_graph_managed_app_policy_deployment_summary)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update targetedManagedAppConfiguration
  Update the properties of a targetedManagedAppConfiguration object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `targeted_managed_app_configuration_id` (String.t): The unique identifier of targetedManagedAppConfiguration
  - `microsoft_graph_targeted_managed_app_configuration` (MicrosoftGraphTargetedManagedAppConfiguration): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_update_targeted_managed_app_configurations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfiguration.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfiguration.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_update_targeted_managed_app_configurations(
        connection,
        targeted_managed_app_configuration_id,
        microsoft_graph_targeted_managed_app_configuration,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceAppManagement/targetedManagedAppConfigurations/#{targeted_managed_app_configuration_id}"
      )
      |> add_param(:body, :body, microsoft_graph_targeted_managed_app_configuration)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTargetedManagedAppConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
