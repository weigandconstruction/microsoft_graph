# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceAppManagementManagedEBook do
  @moduledoc """
  API calls for all endpoints tagged `DeviceAppManagementManagedEBook`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create iosVppEBook
  Create a new iosVppEBook object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_managed_e_book` (MicrosoftGraphManagedEBook): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_create_managed_e_books(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphManagedEBook.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBook.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_create_managed_e_books(
        connection,
        microsoft_graph_managed_e_book,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/managedEBooks")
      |> add_param(:body, :body, microsoft_graph_managed_e_book)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedEBook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete iosVppEBook
  Deletes a iosVppEBook.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_delete_managed_e_books(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_delete_managed_e_books(connection, managed_e_book_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get iosVppEBook
  Read properties and relationships of the iosVppEBook object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_managed_e_books(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBook.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_get_managed_e_books(connection, managed_e_book_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedEBook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List iosVppEBooks
  List properties and relationships of the iosVppEBook objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBookCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_managed_e_books(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBookCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_list_managed_e_books(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/managedEBooks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedEBookCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_assignments_get_count_b034(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_assignments_get_count_b034(
        connection,
        managed_e_book_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create iosVppEBookAssignment
  Create a new iosVppEBookAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `microsoft_graph_managed_e_book_assignment` (MicrosoftGraphManagedEBookAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_create_assignments(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_create_assignments(
        connection,
        managed_e_book_id,
        microsoft_graph_managed_e_book_assignment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/assignments")
      |> add_param(:body, :body, microsoft_graph_managed_e_book_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create deviceInstallState
  Create a new deviceInstallState object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `microsoft_graph_device_install_state` (MicrosoftGraphDeviceInstallState): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_create_device_states(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_create_device_states(
        connection,
        managed_e_book_id,
        microsoft_graph_device_install_state,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/deviceStates")
      |> add_param(:body, :body, microsoft_graph_device_install_state)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create userInstallStateSummary
  Create a new userInstallStateSummary object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `microsoft_graph_user_install_state_summary` (MicrosoftGraphUserInstallStateSummary): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_create_user_state_summary(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummary.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummary.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_create_user_state_summary(
        connection,
        managed_e_book_id,
        microsoft_graph_user_install_state_summary,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary")
      |> add_param(:body, :body, microsoft_graph_user_install_state_summary)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete managedEBookAssignment
  Deletes a managedEBookAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `managed_e_book_assignment_id` (String.t): The unique identifier of managedEBookAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_delete_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_delete_assignments(
        connection,
        managed_e_book_id,
        managed_e_book_assignment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/assignments/#{managed_e_book_assignment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete deviceInstallState
  Deletes a deviceInstallState.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `device_install_state_id` (String.t): The unique identifier of deviceInstallState
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_delete_device_states(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_delete_device_states(
        connection,
        managed_e_book_id,
        device_install_state_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/deviceStates/#{device_install_state_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property installSummary for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_delete_install_summary(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_delete_install_summary(
        connection,
        managed_e_book_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/installSummary")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete userInstallStateSummary
  Deletes a userInstallStateSummary.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `user_install_state_summary_id` (String.t): The unique identifier of userInstallStateSummary
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_delete_user_state_summary(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_delete_user_state_summary(
        connection,
        managed_e_book_id,
        user_install_state_summary_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary/#{user_install_state_summary_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_device_states_get_count6c04(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_device_states_get_count6c04(
        connection,
        managed_e_book_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/deviceStates/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get iosVppEBookAssignment
  Read properties and relationships of the iosVppEBookAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `managed_e_book_assignment_id` (String.t): The unique identifier of managedEBookAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_get_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_get_assignments(
        connection,
        managed_e_book_id,
        managed_e_book_assignment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/assignments/#{managed_e_book_assignment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_get_count72ff(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_get_count72ff(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/managedEBooks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceInstallState
  Read properties and relationships of the deviceInstallState object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `device_install_state_id` (String.t): The unique identifier of deviceInstallState
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_get_device_states(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_get_device_states(
        connection,
        managed_e_book_id,
        device_install_state_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/deviceStates/#{device_install_state_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get eBookInstallSummary
  Read properties and relationships of the eBookInstallSummary object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEBookInstallSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_get_install_summary(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEBookInstallSummary.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_get_install_summary(
        connection,
        managed_e_book_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/installSummary")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEBookInstallSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get userInstallStateSummary
  Read properties and relationships of the userInstallStateSummary object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `user_install_state_summary_id` (String.t): The unique identifier of userInstallStateSummary
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_get_user_state_summary(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummary.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_get_user_state_summary(
        connection,
        managed_e_book_id,
        user_install_state_summary_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary/#{user_install_state_summary_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List iosVppEBookAssignments
  List properties and relationships of the iosVppEBookAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_list_assignments(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignmentCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_list_assignments(
        connection,
        managed_e_book_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List deviceInstallStates
  List properties and relationships of the deviceInstallState objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallStateCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_list_device_states(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallStateCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_list_device_states(
        connection,
        managed_e_book_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/deviceStates")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceInstallStateCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List userInstallStateSummaries
  List properties and relationships of the userInstallStateSummary objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummaryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_list_user_state_summary(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummaryCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_list_user_state_summary(
        connection,
        managed_e_book_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummaryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update iosVppEBookAssignment
  Update the properties of a iosVppEBookAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `managed_e_book_assignment_id` (String.t): The unique identifier of managedEBookAssignment
  - `microsoft_graph_managed_e_book_assignment` (MicrosoftGraphManagedEBookAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_update_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_update_assignments(
        connection,
        managed_e_book_id,
        managed_e_book_assignment_id,
        microsoft_graph_managed_e_book_assignment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/assignments/#{managed_e_book_assignment_id}"
      )
      |> add_param(:body, :body, microsoft_graph_managed_e_book_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedEBookAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceInstallState
  Update the properties of a deviceInstallState object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `device_install_state_id` (String.t): The unique identifier of deviceInstallState
  - `microsoft_graph_device_install_state` (MicrosoftGraphDeviceInstallState): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_update_device_states(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_update_device_states(
        connection,
        managed_e_book_id,
        device_install_state_id,
        microsoft_graph_device_install_state,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/deviceStates/#{device_install_state_id}"
      )
      |> add_param(:body, :body, microsoft_graph_device_install_state)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update eBookInstallSummary
  Update the properties of a eBookInstallSummary object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `microsoft_graph_e_book_install_summary` (MicrosoftGraphEBookInstallSummary): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEBookInstallSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_update_install_summary(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphEBookInstallSummary.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEBookInstallSummary.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_update_install_summary(
        connection,
        managed_e_book_id,
        microsoft_graph_e_book_install_summary,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/installSummary")
      |> add_param(:body, :body, microsoft_graph_e_book_install_summary)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEBookInstallSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update userInstallStateSummary
  Update the properties of a userInstallStateSummary object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `user_install_state_summary_id` (String.t): The unique identifier of userInstallStateSummary
  - `microsoft_graph_user_install_state_summary` (MicrosoftGraphUserInstallStateSummary): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_update_user_state_summary(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummary.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummary.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_update_user_state_summary(
        connection,
        managed_e_book_id,
        user_install_state_summary_id,
        microsoft_graph_user_install_state_summary,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary/#{user_install_state_summary_id}"
      )
      |> add_param(:body, :body, microsoft_graph_user_install_state_summary)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserInstallStateSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to deviceStates for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `user_install_state_summary_id` (String.t): The unique identifier of userInstallStateSummary
  - `microsoft_graph_device_install_state` (MicrosoftGraphDeviceInstallState): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_user_state_summary_create_device_states(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_user_state_summary_create_device_states(
        connection,
        managed_e_book_id,
        user_install_state_summary_id,
        microsoft_graph_device_install_state,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary/#{user_install_state_summary_id}/deviceStates"
      )
      |> add_param(:body, :body, microsoft_graph_device_install_state)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property deviceStates for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `user_install_state_summary_id` (String.t): The unique identifier of userInstallStateSummary
  - `device_install_state_id` (String.t): The unique identifier of deviceInstallState
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_user_state_summary_delete_device_states(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_user_state_summary_delete_device_states(
        connection,
        managed_e_book_id,
        user_install_state_summary_id,
        device_install_state_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary/#{user_install_state_summary_id}/deviceStates/#{device_install_state_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `user_install_state_summary_id` (String.t): The unique identifier of userInstallStateSummary
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_user_state_summary_device_states_get_count_a97e(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_user_state_summary_device_states_get_count_a97e(
        connection,
        managed_e_book_id,
        user_install_state_summary_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary/#{user_install_state_summary_id}/deviceStates/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_user_state_summary_get_count862d(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_user_state_summary_get_count862d(
        connection,
        managed_e_book_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceStates from deviceAppManagement
  The install state of the eBook.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `user_install_state_summary_id` (String.t): The unique identifier of userInstallStateSummary
  - `device_install_state_id` (String.t): The unique identifier of deviceInstallState
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_user_state_summary_get_device_states(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_user_state_summary_get_device_states(
        connection,
        managed_e_book_id,
        user_install_state_summary_id,
        device_install_state_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary/#{user_install_state_summary_id}/deviceStates/#{device_install_state_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceStates from deviceAppManagement
  The install state of the eBook.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `user_install_state_summary_id` (String.t): The unique identifier of userInstallStateSummary
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallStateCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_user_state_summary_list_device_states(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallStateCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_user_state_summary_list_device_states(
        connection,
        managed_e_book_id,
        user_install_state_summary_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary/#{user_install_state_summary_id}/deviceStates"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceInstallStateCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property deviceStates in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `user_install_state_summary_id` (String.t): The unique identifier of userInstallStateSummary
  - `device_install_state_id` (String.t): The unique identifier of deviceInstallState
  - `microsoft_graph_device_install_state` (MicrosoftGraphDeviceInstallState): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_managed_e_books_user_state_summary_update_device_states(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_managed_e_books_user_state_summary_update_device_states(
        connection,
        managed_e_book_id,
        user_install_state_summary_id,
        device_install_state_id,
        microsoft_graph_device_install_state,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceAppManagement/managedEBooks/#{managed_e_book_id}/userStateSummary/#{user_install_state_summary_id}/deviceStates/#{device_install_state_id}"
      )
      |> add_param(:body, :body, microsoft_graph_device_install_state)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceInstallState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update iosVppEBook
  Update the properties of a iosVppEBook object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_e_book_id` (String.t): The unique identifier of managedEBook
  - `microsoft_graph_managed_e_book` (MicrosoftGraphManagedEBook): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_update_managed_e_books(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphManagedEBook.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedEBook.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_app_management_update_managed_e_books(
        connection,
        managed_e_book_id,
        microsoft_graph_managed_e_book,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/managedEBooks/#{managed_e_book_id}")
      |> add_param(:body, :body, microsoft_graph_managed_e_book)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedEBook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
