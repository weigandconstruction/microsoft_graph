# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.SecurityAttackSimulationRoot do
  @moduledoc """
  API calls for all endpoints tagged `SecurityAttackSimulationRoot`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create new navigation property to endUserNotifications for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_end_user_notification` (MicrosoftGraphEndUserNotification): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotification.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_create_end_user_notifications(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphEndUserNotification.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotification.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_create_end_user_notifications(
        connection,
        microsoft_graph_end_user_notification,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/security/attackSimulation/endUserNotifications")
      |> add_param(:body, :body, microsoft_graph_end_user_notification)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEndUserNotification},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to landingPages for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_landing_page` (MicrosoftGraphLandingPage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_create_landing_pages(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphLandingPage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_create_landing_pages(
        connection,
        microsoft_graph_landing_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/security/attackSimulation/landingPages")
      |> add_param(:body, :body, microsoft_graph_landing_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLandingPage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to loginPages for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_login_page` (MicrosoftGraphLoginPage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLoginPage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_create_login_pages(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphLoginPage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphLoginPage.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_create_login_pages(
        connection,
        microsoft_graph_login_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/security/attackSimulation/loginPages")
      |> add_param(:body, :body, microsoft_graph_login_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLoginPage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to operations for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_attack_simulation_operation` (MicrosoftGraphAttackSimulationOperation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_create_operations(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperation.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_create_operations(
        connection,
        microsoft_graph_attack_simulation_operation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/security/attackSimulation/operations")
      |> add_param(:body, :body, microsoft_graph_attack_simulation_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to payloads for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_payload` (MicrosoftGraphPayload): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPayload.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_create_payloads(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphPayload.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphPayload.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_create_payloads(connection, microsoft_graph_payload, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/attackSimulation/payloads")
      |> add_param(:body, :body, microsoft_graph_payload)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPayload},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to simulationAutomations for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_simulation_automation` (MicrosoftGraphSimulationAutomation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_create_simulation_automations(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphSimulationAutomation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_create_simulation_automations(
        connection,
        microsoft_graph_simulation_automation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/security/attackSimulation/simulationAutomations")
      |> add_param(:body, :body, microsoft_graph_simulation_automation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulationAutomation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create simulation
  Create an attack simulation campaign for a tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_simulation` (MicrosoftGraphSimulation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_create_simulations(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphSimulation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSimulation.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_create_simulations(
        connection,
        microsoft_graph_simulation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/security/attackSimulation/simulations")
      |> add_param(:body, :body, microsoft_graph_simulation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to trainings for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_training` (MicrosoftGraphTraining): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTraining.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_create_trainings(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphTraining.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTraining.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_create_trainings(
        connection,
        microsoft_graph_training,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/security/attackSimulation/trainings")
      |> add_param(:body, :body, microsoft_graph_training)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTraining},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property endUserNotifications for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `end_user_notification_id` (String.t): The unique identifier of endUserNotification
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_delete_end_user_notifications(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_delete_end_user_notifications(
        connection,
        end_user_notification_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/attackSimulation/endUserNotifications/#{end_user_notification_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property landingPages for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `landing_page_id` (String.t): The unique identifier of landingPage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_delete_landing_pages(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_delete_landing_pages(connection, landing_page_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/attackSimulation/landingPages/#{landing_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property loginPages for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `login_page_id` (String.t): The unique identifier of loginPage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_delete_login_pages(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_delete_login_pages(connection, login_page_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/attackSimulation/loginPages/#{login_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property operations for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `attack_simulation_operation_id` (String.t): The unique identifier of attackSimulationOperation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_delete_operations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_delete_operations(
        connection,
        attack_simulation_operation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/attackSimulation/operations/#{attack_simulation_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property payloads for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `payload_id` (String.t): The unique identifier of payload
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_delete_payloads(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_delete_payloads(connection, payload_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/attackSimulation/payloads/#{payload_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property simulationAutomations for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_automation_id` (String.t): The unique identifier of simulationAutomation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_delete_simulation_automations(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_delete_simulation_automations(
        connection,
        simulation_automation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/attackSimulation/simulationAutomations/#{simulation_automation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete simulation
  Delete an attack simulation campaign for a tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_id` (String.t): The unique identifier of simulation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_delete_simulations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_delete_simulations(connection, simulation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/attackSimulation/simulations/#{simulation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property trainings for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `training_id` (String.t): The unique identifier of training
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_delete_trainings(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_delete_trainings(connection, training_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/attackSimulation/trainings/#{training_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to details for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `end_user_notification_id` (String.t): The unique identifier of endUserNotification
  - `microsoft_graph_end_user_notification_detail` (MicrosoftGraphEndUserNotificationDetail): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_end_user_notifications_create_details(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetail.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetail.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_end_user_notifications_create_details(
        connection,
        end_user_notification_id,
        microsoft_graph_end_user_notification_detail,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/security/attackSimulation/endUserNotifications/#{end_user_notification_id}/details"
      )
      |> add_param(:body, :body, microsoft_graph_end_user_notification_detail)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property details for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `end_user_notification_id` (String.t): The unique identifier of endUserNotification
  - `end_user_notification_detail_id` (String.t): The unique identifier of endUserNotificationDetail
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_end_user_notifications_delete_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_end_user_notifications_delete_details(
        connection,
        end_user_notification_id,
        end_user_notification_detail_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/security/attackSimulation/endUserNotifications/#{end_user_notification_id}/details/#{end_user_notification_detail_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `end_user_notification_id` (String.t): The unique identifier of endUserNotification
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_end_user_notifications_details_get_count5759(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_end_user_notifications_details_get_count5759(
        connection,
        end_user_notification_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/security/attackSimulation/endUserNotifications/#{end_user_notification_id}/details/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_end_user_notifications_get_count421b(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_end_user_notifications_get_count421b(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/endUserNotifications/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get details from security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `end_user_notification_id` (String.t): The unique identifier of endUserNotification
  - `end_user_notification_detail_id` (String.t): The unique identifier of endUserNotificationDetail
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_end_user_notifications_get_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetail.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_end_user_notifications_get_details(
        connection,
        end_user_notification_id,
        end_user_notification_detail_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/security/attackSimulation/endUserNotifications/#{end_user_notification_id}/details/#{end_user_notification_detail_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get details from security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `end_user_notification_id` (String.t): The unique identifier of endUserNotification
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetailCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_end_user_notifications_list_details(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetailCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_end_user_notifications_list_details(
        connection,
        end_user_notification_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/security/attackSimulation/endUserNotifications/#{end_user_notification_id}/details"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetailCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property details in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `end_user_notification_id` (String.t): The unique identifier of endUserNotification
  - `end_user_notification_detail_id` (String.t): The unique identifier of endUserNotificationDetail
  - `microsoft_graph_end_user_notification_detail` (MicrosoftGraphEndUserNotificationDetail): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_end_user_notifications_update_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetail.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetail.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_end_user_notifications_update_details(
        connection,
        end_user_notification_id,
        end_user_notification_detail_id,
        microsoft_graph_end_user_notification_detail,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/security/attackSimulation/endUserNotifications/#{end_user_notification_id}/details/#{end_user_notification_detail_id}"
      )
      |> add_param(:body, :body, microsoft_graph_end_user_notification_detail)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get endUserNotifications from security
  Represents an end user's notification for an attack simulation training.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `end_user_notification_id` (String.t): The unique identifier of endUserNotification
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotification.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_get_end_user_notifications(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotification.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_get_end_user_notifications(
        connection,
        end_user_notification_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/endUserNotifications/#{end_user_notification_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEndUserNotification},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get landingPages from security
  Represents an attack simulation training landing page.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `landing_page_id` (String.t): The unique identifier of landingPage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_get_landing_pages(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_get_landing_pages(connection, landing_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/landingPages/#{landing_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLandingPage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get loginPages from security
  Represents an attack simulation training login page.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `login_page_id` (String.t): The unique identifier of loginPage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLoginPage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_get_login_pages(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphLoginPage.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_get_login_pages(connection, login_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/loginPages/#{login_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLoginPage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get attackSimulationOperation
  Get an attack simulation operation to track a long-running operation request for a tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `attack_simulation_operation_id` (String.t): The unique identifier of attackSimulationOperation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_get_operations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperation.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_get_operations(
        connection,
        attack_simulation_operation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/operations/#{attack_simulation_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get payloads from security
  Represents an attack simulation training campaign payload in a tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `payload_id` (String.t): The unique identifier of payload
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPayload.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_get_payloads(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphPayload.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_get_payloads(connection, payload_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/payloads/#{payload_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPayload},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get simulationAutomation
  Get an attack simulation automation for a tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_automation_id` (String.t): The unique identifier of simulationAutomation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_get_simulation_automations(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_get_simulation_automations(
        connection,
        simulation_automation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/simulationAutomations/#{simulation_automation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulationAutomation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get simulation
  Get an attack simulation campaign for a tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_id` (String.t): The unique identifier of simulation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_get_simulations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSimulation.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_get_simulations(connection, simulation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/simulations/#{simulation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get trainings from security
  Represents details about attack simulation trainings.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `training_id` (String.t): The unique identifier of training
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTraining.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_get_trainings(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTraining.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_get_trainings(connection, training_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/trainings/#{training_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTraining},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to details for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `landing_page_id` (String.t): The unique identifier of landingPage
  - `microsoft_graph_landing_page_detail` (MicrosoftGraphLandingPageDetail): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPageDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_landing_pages_create_details(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphLandingPageDetail.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPageDetail.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_landing_pages_create_details(
        connection,
        landing_page_id,
        microsoft_graph_landing_page_detail,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/security/attackSimulation/landingPages/#{landing_page_id}/details")
      |> add_param(:body, :body, microsoft_graph_landing_page_detail)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLandingPageDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property details for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `landing_page_id` (String.t): The unique identifier of landingPage
  - `landing_page_detail_id` (String.t): The unique identifier of landingPageDetail
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_landing_pages_delete_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_landing_pages_delete_details(
        connection,
        landing_page_id,
        landing_page_detail_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/security/attackSimulation/landingPages/#{landing_page_id}/details/#{landing_page_detail_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `landing_page_id` (String.t): The unique identifier of landingPage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_landing_pages_details_get_count8be7(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_landing_pages_details_get_count8be7(
        connection,
        landing_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/landingPages/#{landing_page_id}/details/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_landing_pages_get_count7f61(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_landing_pages_get_count7f61(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/landingPages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get details from security
  The detail information for a landing page associated with a simulation during its creation.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `landing_page_id` (String.t): The unique identifier of landingPage
  - `landing_page_detail_id` (String.t): The unique identifier of landingPageDetail
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPageDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_landing_pages_get_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPageDetail.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_landing_pages_get_details(
        connection,
        landing_page_id,
        landing_page_detail_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/security/attackSimulation/landingPages/#{landing_page_id}/details/#{landing_page_detail_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLandingPageDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get details from security
  The detail information for a landing page associated with a simulation during its creation.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `landing_page_id` (String.t): The unique identifier of landingPage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPageDetailCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_landing_pages_list_details(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPageDetailCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_landing_pages_list_details(
        connection,
        landing_page_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/landingPages/#{landing_page_id}/details")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLandingPageDetailCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property details in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `landing_page_id` (String.t): The unique identifier of landingPage
  - `landing_page_detail_id` (String.t): The unique identifier of landingPageDetail
  - `microsoft_graph_landing_page_detail` (MicrosoftGraphLandingPageDetail): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPageDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_landing_pages_update_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphLandingPageDetail.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPageDetail.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_landing_pages_update_details(
        connection,
        landing_page_id,
        landing_page_detail_id,
        microsoft_graph_landing_page_detail,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/security/attackSimulation/landingPages/#{landing_page_id}/details/#{landing_page_detail_id}"
      )
      |> add_param(:body, :body, microsoft_graph_landing_page_detail)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLandingPageDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List endUserNotifications
  Get a list of endUserNotification objects and their properties.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_list_end_user_notifications(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_list_end_user_notifications(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/endUserNotifications")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEndUserNotificationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List landingPages
  Get a list of the landingPage objects and their properties.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_list_landing_pages(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPageCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_list_landing_pages(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/landingPages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLandingPageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List loginPages
  Get a list of the loginPage objects and their properties.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLoginPageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_list_login_pages(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphLoginPageCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_list_login_pages(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/loginPages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLoginPageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get attackSimulationOperation
  Get an attack simulation operation to track a long-running operation request for a tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_list_operations(Tesla.Env.client(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperationCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_list_operations(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/operations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List payloads
  Get a list of payloads for attack simulation campaigns. This operation expects the mandatory parameter source to filter and query the respective data source.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPayloadCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_list_payloads(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphPayloadCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_list_payloads(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/payloads")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPayloadCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List simulationAutomations
  Get a list of attack simulation automations for a tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_list_simulation_automations(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_list_simulation_automations(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/simulationAutomations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List simulations
  Get a list of attack simulation campaigns for a tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_list_simulations(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_list_simulations(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/simulations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List trainings
  Get a list of the training objects and their properties.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTrainingCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_list_trainings(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTrainingCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_list_trainings(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/trainings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTrainingCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_login_pages_get_count_a7ea(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_login_pages_get_count_a7ea(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/loginPages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_operations_get_count_e5f7(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_operations_get_count_e5f7(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/operations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_payloads_get_count_f3a2(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_payloads_get_count_f3a2(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/payloads/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to runs for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_automation_id` (String.t): The unique identifier of simulationAutomation
  - `microsoft_graph_simulation_automation_run` (MicrosoftGraphSimulationAutomationRun): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRun.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_simulation_automations_create_runs(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRun.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRun.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_simulation_automations_create_runs(
        connection,
        simulation_automation_id,
        microsoft_graph_simulation_automation_run,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/security/attackSimulation/simulationAutomations/#{simulation_automation_id}/runs")
      |> add_param(:body, :body, microsoft_graph_simulation_automation_run)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRun},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property runs for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_automation_id` (String.t): The unique identifier of simulationAutomation
  - `simulation_automation_run_id` (String.t): The unique identifier of simulationAutomationRun
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_simulation_automations_delete_runs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_simulation_automations_delete_runs(
        connection,
        simulation_automation_id,
        simulation_automation_run_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/security/attackSimulation/simulationAutomations/#{simulation_automation_id}/runs/#{simulation_automation_run_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_simulation_automations_get_count6071(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_simulation_automations_get_count6071(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/simulationAutomations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get runs from security
  A collection of simulation automation runs.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_automation_id` (String.t): The unique identifier of simulationAutomation
  - `simulation_automation_run_id` (String.t): The unique identifier of simulationAutomationRun
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRun.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_simulation_automations_get_runs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRun.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_simulation_automations_get_runs(
        connection,
        simulation_automation_id,
        simulation_automation_run_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/security/attackSimulation/simulationAutomations/#{simulation_automation_id}/runs/#{simulation_automation_run_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRun},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List runs
  Get a list of the attack simulation automation runs for a tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_automation_id` (String.t): The unique identifier of simulationAutomation
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRunCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_simulation_automations_list_runs(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRunCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_simulation_automations_list_runs(
        connection,
        simulation_automation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/simulationAutomations/#{simulation_automation_id}/runs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRunCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_automation_id` (String.t): The unique identifier of simulationAutomation
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_simulation_automations_runs_get_count9ec4(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_simulation_automations_runs_get_count9ec4(
        connection,
        simulation_automation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/security/attackSimulation/simulationAutomations/#{simulation_automation_id}/runs/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property runs in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_automation_id` (String.t): The unique identifier of simulationAutomation
  - `simulation_automation_run_id` (String.t): The unique identifier of simulationAutomationRun
  - `microsoft_graph_simulation_automation_run` (MicrosoftGraphSimulationAutomationRun): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRun.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_simulation_automations_update_runs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRun.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRun.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_simulation_automations_update_runs(
        connection,
        simulation_automation_id,
        simulation_automation_run_id,
        microsoft_graph_simulation_automation_run,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/security/attackSimulation/simulationAutomations/#{simulation_automation_id}/runs/#{simulation_automation_run_id}"
      )
      |> add_param(:body, :body, microsoft_graph_simulation_automation_run)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulationAutomationRun},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_simulations_get_count285e(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_simulations_get_count285e(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/simulations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get landingPage from security
  The landing page associated with a simulation during its creation.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_id` (String.t): The unique identifier of simulation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_simulations_get_landing_page(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_simulations_get_landing_page(
        connection,
        simulation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/simulations/#{simulation_id}/landingPage")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLandingPage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get loginPage from security
  The login page associated with a simulation during its creation.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_id` (String.t): The unique identifier of simulation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLoginPage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_simulations_get_login_page(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphLoginPage.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_simulations_get_login_page(connection, simulation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/simulations/#{simulation_id}/loginPage")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLoginPage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get payload from security
  The payload associated with a simulation during its creation.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_id` (String.t): The unique identifier of simulation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPayload.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_simulations_get_payload(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphPayload.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_simulations_get_payload(connection, simulation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/simulations/#{simulation_id}/payload")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPayload},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to languageDetails for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `training_id` (String.t): The unique identifier of training
  - `microsoft_graph_training_language_detail` (MicrosoftGraphTrainingLanguageDetail): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_trainings_create_language_details(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetail.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetail.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_trainings_create_language_details(
        connection,
        training_id,
        microsoft_graph_training_language_detail,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/security/attackSimulation/trainings/#{training_id}/languageDetails")
      |> add_param(:body, :body, microsoft_graph_training_language_detail)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property languageDetails for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `training_id` (String.t): The unique identifier of training
  - `training_language_detail_id` (String.t): The unique identifier of trainingLanguageDetail
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_trainings_delete_language_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_trainings_delete_language_details(
        connection,
        training_id,
        training_language_detail_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/security/attackSimulation/trainings/#{training_id}/languageDetails/#{training_language_detail_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_trainings_get_count_b606(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_trainings_get_count_b606(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/trainings/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get languageDetails from security
  Language specific details on a training.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `training_id` (String.t): The unique identifier of training
  - `training_language_detail_id` (String.t): The unique identifier of trainingLanguageDetail
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_trainings_get_language_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetail.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_trainings_get_language_details(
        connection,
        training_id,
        training_language_detail_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/security/attackSimulation/trainings/#{training_id}/languageDetails/#{training_language_detail_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `training_id` (String.t): The unique identifier of training
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_trainings_language_details_get_count_b009(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_trainings_language_details_get_count_b009(
        connection,
        training_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/trainings/#{training_id}/languageDetails/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get languageDetails from security
  Language specific details on a training.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `training_id` (String.t): The unique identifier of training
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetailCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_trainings_list_language_details(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetailCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_trainings_list_language_details(
        connection,
        training_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation/trainings/#{training_id}/languageDetails")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetailCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property languageDetails in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `training_id` (String.t): The unique identifier of training
  - `training_language_detail_id` (String.t): The unique identifier of trainingLanguageDetail
  - `microsoft_graph_training_language_detail` (MicrosoftGraphTrainingLanguageDetail): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_trainings_update_language_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetail.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetail.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_trainings_update_language_details(
        connection,
        training_id,
        training_language_detail_id,
        microsoft_graph_training_language_detail,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/security/attackSimulation/trainings/#{training_id}/languageDetails/#{training_language_detail_id}"
      )
      |> add_param(:body, :body, microsoft_graph_training_language_detail)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTrainingLanguageDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property endUserNotifications in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `end_user_notification_id` (String.t): The unique identifier of endUserNotification
  - `microsoft_graph_end_user_notification` (MicrosoftGraphEndUserNotification): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotification.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_update_end_user_notifications(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphEndUserNotification.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphEndUserNotification.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_update_end_user_notifications(
        connection,
        end_user_notification_id,
        microsoft_graph_end_user_notification,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/attackSimulation/endUserNotifications/#{end_user_notification_id}")
      |> add_param(:body, :body, microsoft_graph_end_user_notification)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEndUserNotification},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property landingPages in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `landing_page_id` (String.t): The unique identifier of landingPage
  - `microsoft_graph_landing_page` (MicrosoftGraphLandingPage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_update_landing_pages(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphLandingPage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphLandingPage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_update_landing_pages(
        connection,
        landing_page_id,
        microsoft_graph_landing_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/attackSimulation/landingPages/#{landing_page_id}")
      |> add_param(:body, :body, microsoft_graph_landing_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLandingPage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property loginPages in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `login_page_id` (String.t): The unique identifier of loginPage
  - `microsoft_graph_login_page` (MicrosoftGraphLoginPage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLoginPage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_update_login_pages(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphLoginPage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphLoginPage.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_update_login_pages(
        connection,
        login_page_id,
        microsoft_graph_login_page,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/attackSimulation/loginPages/#{login_page_id}")
      |> add_param(:body, :body, microsoft_graph_login_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLoginPage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property operations in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `attack_simulation_operation_id` (String.t): The unique identifier of attackSimulationOperation
  - `microsoft_graph_attack_simulation_operation` (MicrosoftGraphAttackSimulationOperation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_update_operations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperation.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_update_operations(
        connection,
        attack_simulation_operation_id,
        microsoft_graph_attack_simulation_operation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/attackSimulation/operations/#{attack_simulation_operation_id}")
      |> add_param(:body, :body, microsoft_graph_attack_simulation_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttackSimulationOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property payloads in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `payload_id` (String.t): The unique identifier of payload
  - `microsoft_graph_payload` (MicrosoftGraphPayload): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPayload.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_update_payloads(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphPayload.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphPayload.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_update_payloads(
        connection,
        payload_id,
        microsoft_graph_payload,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/attackSimulation/payloads/#{payload_id}")
      |> add_param(:body, :body, microsoft_graph_payload)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPayload},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property simulationAutomations in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_automation_id` (String.t): The unique identifier of simulationAutomation
  - `microsoft_graph_simulation_automation` (MicrosoftGraphSimulationAutomation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_update_simulation_automations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSimulationAutomation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSimulationAutomation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_update_simulation_automations(
        connection,
        simulation_automation_id,
        microsoft_graph_simulation_automation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/attackSimulation/simulationAutomations/#{simulation_automation_id}")
      |> add_param(:body, :body, microsoft_graph_simulation_automation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulationAutomation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update simulation
  Update an attack simulation campaign for a tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `simulation_id` (String.t): The unique identifier of simulation
  - `microsoft_graph_simulation` (MicrosoftGraphSimulation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSimulation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_update_simulations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSimulation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSimulation.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_update_simulations(
        connection,
        simulation_id,
        microsoft_graph_simulation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/attackSimulation/simulations/#{simulation_id}")
      |> add_param(:body, :body, microsoft_graph_simulation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSimulation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property trainings in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `training_id` (String.t): The unique identifier of training
  - `microsoft_graph_training` (MicrosoftGraphTraining): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTraining.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_attack_simulation_update_trainings(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTraining.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTraining.t()}
          | {:error, Tesla.Env.t()}
  def security_attack_simulation_update_trainings(
        connection,
        training_id,
        microsoft_graph_training,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/attackSimulation/trainings/#{training_id}")
      |> add_param(:body, :body, microsoft_graph_training)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTraining},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property attackSimulation for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_delete_attack_simulation(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_delete_attack_simulation(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/attackSimulation")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get attackSimulation from security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttackSimulationRoot.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_get_attack_simulation(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAttackSimulationRoot.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_get_attack_simulation(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/attackSimulation")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttackSimulationRoot},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property attackSimulation in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_attack_simulation_root` (MicrosoftGraphAttackSimulationRoot): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAttackSimulationRoot.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_update_attack_simulation(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphAttackSimulationRoot.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAttackSimulationRoot.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_update_attack_simulation(
        connection,
        microsoft_graph_attack_simulation_root,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/attackSimulation")
      |> add_param(:body, :body, microsoft_graph_attack_simulation_root)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAttackSimulationRoot},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
