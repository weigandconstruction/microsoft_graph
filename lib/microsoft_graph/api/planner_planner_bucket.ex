# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.PlannerPlannerBucket do
  @moduledoc """
  API calls for all endpoints tagged `PlannerPlannerBucket`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create new navigation property to tasks for planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `microsoft_graph_planner_task` (MicrosoftGraphPlannerTask): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_create_tasks(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphPlannerTask.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTask.t} | {:error, Tesla.Env.t}
  def planner_buckets_create_tasks(connection, planner_bucket_id, microsoft_graph_planner_task, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks")
      |> add_param(:body, :body, microsoft_graph_planner_task)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property tasks for planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_delete_tasks(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_delete_tasks(connection, planner_bucket_id, planner_task_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_get_count9ddb(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_get_count9ddb(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/planner/buckets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tasks from planner
  Read-only. Nullable. The collection of tasks in the bucket.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_get_tasks(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTask.t} | {:error, Tesla.Env.t}
  def planner_buckets_get_tasks(connection, planner_bucket_id, planner_task_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List tasks
  Retrieve a list of plannerTask objects associated to a plannerBucket object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTaskCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_list_tasks(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTaskCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_list_tasks(connection, planner_bucket_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerTaskCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property assignedToTaskBoardFormat for planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_delete_assigned_to_task_board_format(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_delete_assigned_to_task_board_format(connection, planner_bucket_id, planner_task_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/assignedToTaskBoardFormat")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property bucketTaskBoardFormat for planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_delete_bucket_task_board_format(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_delete_bucket_task_board_format(connection, planner_bucket_id, planner_task_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/bucketTaskBoardFormat")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property details for planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_delete_details(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_delete_details(connection, planner_bucket_id, planner_task_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/details")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property progressTaskBoardFormat for planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_delete_progress_task_board_format(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_delete_progress_task_board_format(connection, planner_bucket_id, planner_task_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/progressTaskBoardFormat")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get plannerAssignedToTaskBoardTaskFormat
  Retrieve the properties and relationships of a plannerAssignedToTaskBoardTaskFormat object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_get_assigned_to_task_board_format(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_get_assigned_to_task_board_format(connection, planner_bucket_id, planner_task_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/assignedToTaskBoardFormat")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get plannerBucketTaskBoardTaskFormat
  Retrieve the properties and relationships of plannerBucketTaskBoardTaskFormat object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucketTaskBoardTaskFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_get_bucket_task_board_format(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucketTaskBoardTaskFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_get_bucket_task_board_format(connection, planner_bucket_id, planner_task_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/bucketTaskBoardFormat")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerBucketTaskBoardTaskFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_get_count145a(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_get_count145a(connection, planner_bucket_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get plannerTaskDetails
  Retrieve the properties and relationships of a plannerTaskDetails object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTaskDetails.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_get_details(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTaskDetails.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_get_details(connection, planner_bucket_id, planner_task_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/details")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerTaskDetails},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get plannerProgressTaskBoardTaskFormat
  Retrieve the properties and relationships of plannerProgressTaskBoardTaskFormat object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerProgressTaskBoardTaskFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_get_progress_task_board_format(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerProgressTaskBoardTaskFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_get_progress_task_board_format(connection, planner_bucket_id, planner_task_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/progressTaskBoardFormat")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerProgressTaskBoardTaskFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property assignedToTaskBoardFormat in planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `if_match` (String.t): ETag value.
  - `microsoft_graph_planner_assigned_to_task_board_task_format` (MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_update_assigned_to_task_board_format(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_update_assigned_to_task_board_format(connection, planner_bucket_id, planner_task_id, if_match, microsoft_graph_planner_assigned_to_task_board_task_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/assignedToTaskBoardFormat")
      |> add_param(:headers, :"If-Match", if_match)
      |> add_param(:body, :body, microsoft_graph_planner_assigned_to_task_board_task_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property bucketTaskBoardFormat in planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `if_match` (String.t): ETag value.
  - `microsoft_graph_planner_bucket_task_board_task_format` (MicrosoftGraphPlannerBucketTaskBoardTaskFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucketTaskBoardTaskFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_update_bucket_task_board_format(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphPlannerBucketTaskBoardTaskFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucketTaskBoardTaskFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_update_bucket_task_board_format(connection, planner_bucket_id, planner_task_id, if_match, microsoft_graph_planner_bucket_task_board_task_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/bucketTaskBoardFormat")
      |> add_param(:headers, :"If-Match", if_match)
      |> add_param(:body, :body, microsoft_graph_planner_bucket_task_board_task_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerBucketTaskBoardTaskFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property details in planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `if_match` (String.t): ETag value.
  - `microsoft_graph_planner_task_details` (MicrosoftGraphPlannerTaskDetails): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTaskDetails.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_update_details(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphPlannerTaskDetails.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTaskDetails.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_update_details(connection, planner_bucket_id, planner_task_id, if_match, microsoft_graph_planner_task_details, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/details")
      |> add_param(:headers, :"If-Match", if_match)
      |> add_param(:body, :body, microsoft_graph_planner_task_details)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerTaskDetails},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property progressTaskBoardFormat in planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `if_match` (String.t): ETag value.
  - `microsoft_graph_planner_progress_task_board_task_format` (MicrosoftGraphPlannerProgressTaskBoardTaskFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerProgressTaskBoardTaskFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_tasks_update_progress_task_board_format(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphPlannerProgressTaskBoardTaskFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerProgressTaskBoardTaskFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_buckets_tasks_update_progress_task_board_format(connection, planner_bucket_id, planner_task_id, if_match, microsoft_graph_planner_progress_task_board_task_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}/progressTaskBoardFormat")
      |> add_param(:headers, :"If-Match", if_match)
      |> add_param(:body, :body, microsoft_graph_planner_progress_task_board_task_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerProgressTaskBoardTaskFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property tasks in planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `planner_task_id` (String.t): The unique identifier of plannerTask
  - `microsoft_graph_planner_task` (MicrosoftGraphPlannerTask): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTask.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_buckets_update_tasks(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphPlannerTask.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerTask.t} | {:error, Tesla.Env.t}
  def planner_buckets_update_tasks(connection, planner_bucket_id, planner_task_id, microsoft_graph_planner_task, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/planner/buckets/#{planner_bucket_id}/tasks/#{planner_task_id}")
      |> add_param(:body, :body, microsoft_graph_planner_task)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerTask},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create plannerBucket
  Create a new plannerBucket object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_planner_bucket` (MicrosoftGraphPlannerBucket): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucket.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_create_buckets(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphPlannerBucket.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucket.t} | {:error, Tesla.Env.t}
  def planner_create_buckets(connection, microsoft_graph_planner_bucket, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/planner/buckets")
      |> add_param(:body, :body, microsoft_graph_planner_bucket)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerBucket},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete plannerBucket
  Delete plannerBucket. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_delete_buckets(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def planner_delete_buckets(connection, planner_bucket_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/planner/buckets/#{planner_bucket_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get plannerBucket
  Retrieve the properties and relationships of a plannerBucket object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucket.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_get_buckets(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucket.t} | {:error, Tesla.Env.t}
  def planner_get_buckets(connection, planner_bucket_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/planner/buckets/#{planner_bucket_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerBucket},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List buckets
  Retrieve a list of plannerbucket objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucketCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_list_buckets(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucketCollectionResponse.t} | {:error, Tesla.Env.t}
  def planner_list_buckets(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/planner/buckets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerBucketCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property buckets in planner

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `planner_bucket_id` (String.t): The unique identifier of plannerBucket
  - `if_match` (String.t): ETag value.
  - `microsoft_graph_planner_bucket` (MicrosoftGraphPlannerBucket): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucket.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec planner_update_buckets(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphPlannerBucket.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPlannerBucket.t} | {:error, Tesla.Env.t}
  def planner_update_buckets(connection, planner_bucket_id, if_match, microsoft_graph_planner_bucket, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/planner/buckets/#{planner_bucket_id}")
      |> add_param(:headers, :"If-Match", if_match)
      |> add_param(:body, :body, microsoft_graph_planner_bucket)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPlannerBucket},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
