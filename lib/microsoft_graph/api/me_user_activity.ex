# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.MeUserActivity do
  @moduledoc """
  API calls for all endpoints tagged `MeUserActivity`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create new navigation property to historyItems for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_activity_id` (String.t): The unique identifier of userActivity
  - `microsoft_graph_activity_history_item` (MicrosoftGraphActivityHistoryItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_activities_create_history_items(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_activities_create_history_items(connection, user_activity_id, microsoft_graph_activity_history_item, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/activities/#{user_activity_id}/historyItems")
      |> add_param(:body, :body, microsoft_graph_activity_history_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property historyItems for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_activity_id` (String.t): The unique identifier of userActivity
  - `activity_history_item_id` (String.t): The unique identifier of activityHistoryItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_activities_delete_history_items(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_activities_delete_history_items(connection, user_activity_id, activity_history_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/activities/#{user_activity_id}/historyItems/#{activity_history_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_activities_get_count65ad(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_activities_get_count65ad(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/activities/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get historyItems from me
  Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_activity_id` (String.t): The unique identifier of userActivity
  - `activity_history_item_id` (String.t): The unique identifier of activityHistoryItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_activities_get_history_items(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_activities_get_history_items(connection, user_activity_id, activity_history_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/activities/#{user_activity_id}/historyItems/#{activity_history_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activity from me
  Optional. NavigationProperty/Containment; navigation property to the associated activity.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_activity_id` (String.t): The unique identifier of userActivity
  - `activity_history_item_id` (String.t): The unique identifier of activityHistoryItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_activities_history_items_get_activity(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserActivity.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_activities_history_items_get_activity(connection, user_activity_id, activity_history_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/activities/#{user_activity_id}/historyItems/#{activity_history_item_id}/activity")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_activity_id` (String.t): The unique identifier of userActivity
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_activities_history_items_get_count_b80d(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_activities_history_items_get_count_b80d(connection, user_activity_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/activities/#{user_activity_id}/historyItems/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get historyItems from me
  Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_activity_id` (String.t): The unique identifier of userActivity
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_activities_list_history_items(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItemCollectionResponse.t} | {:error, Tesla.Env.t}
  def me_activities_list_history_items(connection, user_activity_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/activities/#{user_activity_id}/historyItems")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete a historyItem
  Delete an existing history item for an existing user activity. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_activity_id` (String.t): The unique identifier of userActivity
  - `activity_history_item_id` (String.t): The unique identifier of activityHistoryItem
  - `microsoft_graph_activity_history_item` (MicrosoftGraphActivityHistoryItem): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_activities_update_history_items(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_activities_update_history_items(connection, user_activity_id, activity_history_item_id, microsoft_graph_activity_history_item, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/activities/#{user_activity_id}/historyItems/#{activity_history_item_id}")
      |> add_param(:body, :body, microsoft_graph_activity_history_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphActivityHistoryItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to activities for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_user_activity` (MicrosoftGraphUserActivity): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_create_activities(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUserActivity.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserActivity.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_create_activities(connection, microsoft_graph_user_activity, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/activities")
      |> add_param(:body, :body, microsoft_graph_user_activity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete an activity
  Delete an existing user activity for your app. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_activity_id` (String.t): The unique identifier of userActivity
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_delete_activities(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_delete_activities(connection, user_activity_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/activities/#{user_activity_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activities from me
  The user's activities across devices. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_activity_id` (String.t): The unique identifier of userActivity
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_get_activities(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserActivity.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_get_activities(connection, user_activity_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/activities/#{user_activity_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get user activities
  Get activities for a given user. Unlike the recent OData function, activities without histories will be returned. The permission UserActivity.ReadWrite.CreatedByApp will apply extra filtering to the response, so that only activities created by your application are returned. This server-side filtering might result in empty pages if the user is particularly active and other applications have created more recent activities. To get your application's activities, use the nextLink property to paginate. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserActivityCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_list_activities(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUserActivityCollectionResponse.t} | {:error, Tesla.Env.t}
  def me_list_activities(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/activities")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserActivityCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property activities in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_activity_id` (String.t): The unique identifier of userActivity
  - `microsoft_graph_user_activity` (MicrosoftGraphUserActivity): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_update_activities(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUserActivity.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserActivity.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_update_activities(connection, user_activity_id, microsoft_graph_user_activity, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/activities/#{user_activity_id}")
      |> add_param(:body, :body, microsoft_graph_user_activity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
