# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.ReportsFunctions do
  @moduledoc """
  API calls for all endpoints tagged `ReportsFunctions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke function usersRegisteredByFeature

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserRegistrationFeatureSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_authentication_methods_users_registered_by_feature07f2(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphUserRegistrationFeatureSummary.t()}
          | {:error, Tesla.Env.t()}
  def reports_authentication_methods_users_registered_by_feature07f2(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/authenticationMethods/usersRegisteredByFeature()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserRegistrationFeatureSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function usersRegisteredByFeature

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `included_user_types` (ReportsAuthenticationMethodsUsersRegisteredByFeatureB345IncludedUserTypesParameter): Usage: includedUserTypes='{includedUserTypes}'
  - `included_user_roles` (ReportsAuthenticationMethodsUsersRegisteredByFeatureB345IncludedUserRolesParameter): Usage: includedUserRoles='{includedUserRoles}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserRegistrationFeatureSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_authentication_methods_users_registered_by_feature_b345(
          Tesla.Env.client(),
          MicrosoftGraph.Model.ReportsAuthenticationMethodsUsersRegisteredByFeatureB345IncludedUserTypesParameter.t(),
          MicrosoftGraph.Model.ReportsAuthenticationMethodsUsersRegisteredByFeatureB345IncludedUserRolesParameter.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphUserRegistrationFeatureSummary.t()}
          | {:error, Tesla.Env.t()}
  def reports_authentication_methods_users_registered_by_feature_b345(
        connection,
        included_user_types,
        included_user_roles,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/authenticationMethods/usersRegisteredByFeature(includedUserTypes&#x3D;&#39;#{included_user_types}&#39;,includedUserRoles&#x3D;&#39;#{included_user_roles}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserRegistrationFeatureSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function usersRegisteredByMethod

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserRegistrationMethodSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_authentication_methods_users_registered_by_method_d25d(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphUserRegistrationMethodSummary.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_authentication_methods_users_registered_by_method_d25d(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/authenticationMethods/usersRegisteredByMethod()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserRegistrationMethodSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function usersRegisteredByMethod

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `included_user_types` (ReportsAuthenticationMethodsUsersRegisteredByFeatureB345IncludedUserTypesParameter): Usage: includedUserTypes='{includedUserTypes}'
  - `included_user_roles` (ReportsAuthenticationMethodsUsersRegisteredByFeatureB345IncludedUserRolesParameter): Usage: includedUserRoles='{includedUserRoles}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserRegistrationMethodSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_authentication_methods_users_registered_by_method_fb94(
          Tesla.Env.client(),
          MicrosoftGraph.Model.ReportsAuthenticationMethodsUsersRegisteredByFeatureB345IncludedUserTypesParameter.t(),
          MicrosoftGraph.Model.ReportsAuthenticationMethodsUsersRegisteredByFeatureB345IncludedUserRolesParameter.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphUserRegistrationMethodSummary.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_authentication_methods_users_registered_by_method_fb94(
        connection,
        included_user_types,
        included_user_roles,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/authenticationMethods/usersRegisteredByMethod(includedUserTypes&#x3D;&#39;#{included_user_types}&#39;,includedUserRoles&#x3D;&#39;#{included_user_roles}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserRegistrationMethodSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function deviceConfigurationDeviceActivity
  Metadata for the device configuration device activity report

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_device_configuration_device_activity(Tesla.Env.client(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_device_configuration_device_activity(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/deviceConfigurationDeviceActivity()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function deviceConfigurationUserActivity
  Metadata for the device configuration user activity report

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_device_configuration_user_activity(Tesla.Env.client(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_device_configuration_user_activity(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/deviceConfigurationUserActivity()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getEmailActivityCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_email_activity_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_email_activity_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getEmailActivityCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getEmailActivityUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_email_activity_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_email_activity_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getEmailActivityUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getEmailActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_email_activity_user_detail4d91(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_email_activity_user_detail4d91(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getEmailActivityUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getEmailActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_email_activity_user_detail6549(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_email_activity_user_detail6549(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getEmailActivityUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getEmailAppUsageAppsUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_email_app_usage_apps_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_email_app_usage_apps_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getEmailAppUsageAppsUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getEmailAppUsageUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_email_app_usage_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_email_app_usage_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getEmailAppUsageUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getEmailAppUsageUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_email_app_usage_user_detail6aff(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_email_app_usage_user_detail6aff(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getEmailAppUsageUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getEmailAppUsageUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_email_app_usage_user_detail_d5d6(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_email_app_usage_user_detail_d5d6(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getEmailAppUsageUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getEmailAppUsageVersionsUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_email_app_usage_versions_user_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_email_app_usage_versions_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getEmailAppUsageVersionsUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getGroupArchivedPrintJobs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): Usage: groupId='{groupId}'
  - `start_date_time` (DateTime.t): Usage: startDateTime={startDateTime}
  - `end_date_time` (DateTime.t): Usage: endDateTime={endDateTime}
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetUserArchivedPrintJobs2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_group_archived_print_jobs(
          Tesla.Env.client(),
          String.t(),
          DateTime.t(),
          DateTime.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ReportsGetUserArchivedPrintJobs2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_group_archived_print_jobs(
        connection,
        group_id,
        start_date_time,
        end_date_time,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getGroupArchivedPrintJobs(groupId&#x3D;&#39;#{group_id}&#39;,startDateTime&#x3D;#{start_date_time},endDateTime&#x3D;#{end_date_time})"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetUserArchivedPrintJobs2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getM365AppPlatformUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_m365_app_platform_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_m365_app_platform_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getM365AppPlatformUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getM365AppUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_m365_app_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_m365_app_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getM365AppUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getM365AppUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_m365_app_user_detail0f08(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_m365_app_user_detail0f08(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getM365AppUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getM365AppUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_m365_app_user_detail8c91(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_m365_app_user_detail8c91(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getM365AppUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getMailboxUsageDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_mailbox_usage_detail(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_mailbox_usage_detail(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getMailboxUsageDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getMailboxUsageMailboxCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_mailbox_usage_mailbox_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_mailbox_usage_mailbox_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getMailboxUsageMailboxCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getMailboxUsageQuotaStatusMailboxCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_mailbox_usage_quota_status_mailbox_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_mailbox_usage_quota_status_mailbox_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getMailboxUsageQuotaStatusMailboxCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getMailboxUsageStorage

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_mailbox_usage_storage(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_mailbox_usage_storage(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getMailboxUsageStorage(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365ActivationCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_activation_counts(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_activation_counts(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365ActivationCounts()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365ActivationsUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_activations_user_counts(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_activations_user_counts(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365ActivationsUserCounts()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365ActivationsUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_activations_user_detail(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_activations_user_detail(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365ActivationsUserDetail()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365ActiveUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_active_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_active_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365ActiveUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365ActiveUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_active_user_detail3cc0(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_active_user_detail3cc0(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365ActiveUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365ActiveUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_active_user_detail_b911(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_active_user_detail_b911(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365ActiveUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365GroupsActivityCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_groups_activity_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_groups_activity_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365GroupsActivityCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365GroupsActivityDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_groups_activity_detail87d6(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_groups_activity_detail87d6(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365GroupsActivityDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365GroupsActivityDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_groups_activity_detail_fe77(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_groups_activity_detail_fe77(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365GroupsActivityDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365GroupsActivityFileCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_groups_activity_file_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_groups_activity_file_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365GroupsActivityFileCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365GroupsActivityGroupCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_groups_activity_group_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_groups_activity_group_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365GroupsActivityGroupCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365GroupsActivityStorage

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_groups_activity_storage(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_groups_activity_storage(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365GroupsActivityStorage(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOffice365ServicesUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_office365_services_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_office365_services_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOffice365ServicesUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOneDriveActivityFileCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_one_drive_activity_file_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_one_drive_activity_file_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOneDriveActivityFileCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOneDriveActivityUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_one_drive_activity_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_one_drive_activity_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOneDriveActivityUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOneDriveActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_one_drive_activity_user_detail657c(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_one_drive_activity_user_detail657c(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOneDriveActivityUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOneDriveActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_one_drive_activity_user_detail77b1(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_one_drive_activity_user_detail77b1(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOneDriveActivityUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOneDriveUsageAccountCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_one_drive_usage_account_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_one_drive_usage_account_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOneDriveUsageAccountCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOneDriveUsageAccountDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_one_drive_usage_account_detail20b2(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_one_drive_usage_account_detail20b2(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOneDriveUsageAccountDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOneDriveUsageAccountDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_one_drive_usage_account_detail3b63(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_one_drive_usage_account_detail3b63(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOneDriveUsageAccountDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOneDriveUsageFileCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_one_drive_usage_file_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_one_drive_usage_file_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOneDriveUsageFileCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getOneDriveUsageStorage

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_one_drive_usage_storage(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_one_drive_usage_storage(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getOneDriveUsageStorage(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getPrinterArchivedPrintJobs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `printer_id` (String.t): Usage: printerId='{printerId}'
  - `start_date_time` (DateTime.t): Usage: startDateTime={startDateTime}
  - `end_date_time` (DateTime.t): Usage: endDateTime={endDateTime}
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetUserArchivedPrintJobs2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_printer_archived_print_jobs(
          Tesla.Env.client(),
          String.t(),
          DateTime.t(),
          DateTime.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ReportsGetUserArchivedPrintJobs2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_printer_archived_print_jobs(
        connection,
        printer_id,
        start_date_time,
        end_date_time,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getPrinterArchivedPrintJobs(printerId&#x3D;&#39;#{printer_id}&#39;,startDateTime&#x3D;#{start_date_time},endDateTime&#x3D;#{end_date_time})"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetUserArchivedPrintJobs2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSharePointActivityFileCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_share_point_activity_file_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_share_point_activity_file_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSharePointActivityFileCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSharePointActivityPages

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_share_point_activity_pages(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_share_point_activity_pages(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSharePointActivityPages(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSharePointActivityUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_share_point_activity_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_share_point_activity_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSharePointActivityUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSharePointActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_share_point_activity_user_detail48b2(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_share_point_activity_user_detail48b2(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSharePointActivityUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSharePointActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_share_point_activity_user_detail9e51(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_share_point_activity_user_detail9e51(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSharePointActivityUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSharePointSiteUsageDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_share_point_site_usage_detail4fd6(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_share_point_site_usage_detail4fd6(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSharePointSiteUsageDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSharePointSiteUsageDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_share_point_site_usage_detail_a4c0(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_share_point_site_usage_detail_a4c0(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSharePointSiteUsageDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSharePointSiteUsageFileCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_share_point_site_usage_file_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_share_point_site_usage_file_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSharePointSiteUsageFileCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSharePointSiteUsagePages

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_share_point_site_usage_pages(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_share_point_site_usage_pages(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSharePointSiteUsagePages(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSharePointSiteUsageSiteCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_share_point_site_usage_site_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_share_point_site_usage_site_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSharePointSiteUsageSiteCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSharePointSiteUsageStorage

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_share_point_site_usage_storage(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_share_point_site_usage_storage(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSharePointSiteUsageStorage(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessActivityCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_activity_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_activity_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSkypeForBusinessActivityCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessActivityUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_activity_user_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_activity_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSkypeForBusinessActivityUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_activity_user_detail74d9(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_activity_user_detail74d9(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSkypeForBusinessActivityUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_activity_user_detail83d0(
          Tesla.Env.client(),
          Date.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_activity_user_detail83d0(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSkypeForBusinessActivityUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessDeviceUsageDistributionUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_device_usage_distribution_user_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_device_usage_distribution_user_counts(
        connection,
        period,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getSkypeForBusinessDeviceUsageDistributionUserCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessDeviceUsageUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_device_usage_user_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_device_usage_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSkypeForBusinessDeviceUsageUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessDeviceUsageUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_device_usage_user_detail_ee84(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_device_usage_user_detail_ee84(
        connection,
        period,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSkypeForBusinessDeviceUsageUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessDeviceUsageUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_device_usage_user_detail_fe29(
          Tesla.Env.client(),
          Date.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_device_usage_user_detail_fe29(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getSkypeForBusinessDeviceUsageUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessOrganizerActivityCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_organizer_activity_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_organizer_activity_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getSkypeForBusinessOrganizerActivityCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessOrganizerActivityMinuteCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_organizer_activity_minute_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_organizer_activity_minute_counts(
        connection,
        period,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getSkypeForBusinessOrganizerActivityMinuteCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessOrganizerActivityUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_organizer_activity_user_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_organizer_activity_user_counts(
        connection,
        period,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getSkypeForBusinessOrganizerActivityUserCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessParticipantActivityCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_participant_activity_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_participant_activity_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getSkypeForBusinessParticipantActivityCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessParticipantActivityMinuteCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_participant_activity_minute_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_participant_activity_minute_counts(
        connection,
        period,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getSkypeForBusinessParticipantActivityMinuteCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessParticipantActivityUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_participant_activity_user_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_participant_activity_user_counts(
        connection,
        period,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getSkypeForBusinessParticipantActivityUserCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessPeerToPeerActivityCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_peer_to_peer_activity_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_peer_to_peer_activity_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getSkypeForBusinessPeerToPeerActivityCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessPeerToPeerActivityMinuteCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_peer_to_peer_activity_minute_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_peer_to_peer_activity_minute_counts(
        connection,
        period,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getSkypeForBusinessPeerToPeerActivityMinuteCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getSkypeForBusinessPeerToPeerActivityUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_skype_for_business_peer_to_peer_activity_user_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_skype_for_business_peer_to_peer_activity_user_counts(
        connection,
        period,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getSkypeForBusinessPeerToPeerActivityUserCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsDeviceUsageDistributionUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_device_usage_distribution_user_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_device_usage_distribution_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getTeamsDeviceUsageDistributionUserCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsDeviceUsageUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_device_usage_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_device_usage_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsDeviceUsageUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsDeviceUsageUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_device_usage_user_detail62d3(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_device_usage_user_detail62d3(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsDeviceUsageUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsDeviceUsageUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_device_usage_user_detail8630(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_device_usage_user_detail8630(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsDeviceUsageUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsTeamActivityCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_team_activity_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_team_activity_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsTeamActivityCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsTeamActivityDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_team_activity_detail391d(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_team_activity_detail391d(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsTeamActivityDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsTeamActivityDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_team_activity_detail_ee18(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_team_activity_detail_ee18(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsTeamActivityDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsTeamActivityDistributionCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_team_activity_distribution_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_team_activity_distribution_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsTeamActivityDistributionCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsTeamCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_team_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_team_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsTeamCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsUserActivityCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_user_activity_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_user_activity_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsUserActivityCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsUserActivityUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_user_activity_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_user_activity_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsUserActivityUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsUserActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_user_activity_user_detail7554(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_user_activity_user_detail7554(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsUserActivityUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getTeamsUserActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_teams_user_activity_user_detail_fba7(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_teams_user_activity_user_detail_fba7(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getTeamsUserActivityUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getUserArchivedPrintJobs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `user_id` (String.t): Usage: userId='{userId}'
  - `start_date_time` (DateTime.t): Usage: startDateTime={startDateTime}
  - `end_date_time` (DateTime.t): Usage: endDateTime={endDateTime}
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetUserArchivedPrintJobs2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_user_archived_print_jobs(
          Tesla.Env.client(),
          String.t(),
          DateTime.t(),
          DateTime.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ReportsGetUserArchivedPrintJobs2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_user_archived_print_jobs(
        connection,
        user_id,
        start_date_time,
        end_date_time,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getUserArchivedPrintJobs(userId&#x3D;&#39;#{user_id}&#39;,startDateTime&#x3D;#{start_date_time},endDateTime&#x3D;#{end_date_time})"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetUserArchivedPrintJobs2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerActivityCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_activity_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_activity_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getYammerActivityCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerActivityUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_activity_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_activity_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getYammerActivityUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_activity_user_detail41fe(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_activity_user_detail41fe(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getYammerActivityUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerActivityUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_activity_user_detail9506(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_activity_user_detail9506(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getYammerActivityUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerDeviceUsageDistributionUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_device_usage_distribution_user_counts(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_device_usage_distribution_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/getYammerDeviceUsageDistributionUserCounts(period&#x3D;&#39;#{period}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerDeviceUsageUserCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_device_usage_user_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_device_usage_user_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getYammerDeviceUsageUserCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerDeviceUsageUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_device_usage_user_detail07bb(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_device_usage_user_detail07bb(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getYammerDeviceUsageUserDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerDeviceUsageUserDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_device_usage_user_detail_e734(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_device_usage_user_detail_e734(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getYammerDeviceUsageUserDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerGroupsActivityCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_groups_activity_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_groups_activity_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getYammerGroupsActivityCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerGroupsActivityDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_groups_activity_detail99d3(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_groups_activity_detail99d3(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getYammerGroupsActivityDetail(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerGroupsActivityDetail

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `date` (Date.t): Usage: date={date}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_groups_activity_detail9ea3(Tesla.Env.client(), Date.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_groups_activity_detail9ea3(connection, date, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getYammerGroupsActivityDetail(date&#x3D;#{date})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getYammerGroupsActivityGroupCounts

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_get_yammer_groups_activity_group_counts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_get_yammer_groups_activity_group_counts(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/getYammerGroupsActivityGroupCounts(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsGetOffice365GroupsActivityFileCounts2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function managedDeviceEnrollmentFailureDetails

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_managed_device_enrollment_failure_details8191(Tesla.Env.client(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_managed_device_enrollment_failure_details8191(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/managedDeviceEnrollmentFailureDetails()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function managedDeviceEnrollmentFailureDetails

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `skip` (integer()): Usage: skip={skip}
  - `top` (integer()): Usage: top={top}
  - `filter` (String.t): Usage: filter='{filter}'
  - `skip_token` (String.t): Usage: skipToken='{skipToken}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_managed_device_enrollment_failure_details_aa46(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_managed_device_enrollment_failure_details_aa46(
        connection,
        skip,
        top,
        filter,
        skip_token,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/reports/managedDeviceEnrollmentFailureDetails(skip&#x3D;#{skip},top&#x3D;#{top},filter&#x3D;&#39;#{filter}&#39;,skipToken&#x3D;&#39;#{skip_token}&#39;)"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function managedDeviceEnrollmentTopFailures

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `period` (String.t): Usage: period='{period}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_managed_device_enrollment_top_failures2157(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_managed_device_enrollment_top_failures2157(connection, period, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/managedDeviceEnrollmentTopFailures(period&#x3D;&#39;#{period}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function managedDeviceEnrollmentTopFailures

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_managed_device_enrollment_top_failures9ce7(Tesla.Env.client(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_managed_device_enrollment_top_failures9ce7(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/reports/managedDeviceEnrollmentTopFailures()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsManagedDeviceEnrollmentFailureDetailsAa462XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getAttackSimulationRepeatOffenders

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsSecurityGetAttackSimulationRepeatOffenders2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_security_get_attack_simulation_repeat_offenders(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.ReportsSecurityGetAttackSimulationRepeatOffenders2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def reports_security_get_attack_simulation_repeat_offenders(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/reports/security/getAttackSimulationRepeatOffenders()")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ReportsSecurityGetAttackSimulationRepeatOffenders2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getAttackSimulationSimulationUserCoverage

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsSecurityGetAttackSimulationSimulationUserCoverage2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_security_get_attack_simulation_simulation_user_coverage(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.ReportsSecurityGetAttackSimulationSimulationUserCoverage2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_security_get_attack_simulation_simulation_user_coverage(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/reports/security/getAttackSimulationSimulationUserCoverage()")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.ReportsSecurityGetAttackSimulationSimulationUserCoverage2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getAttackSimulationTrainingUserCoverage

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ReportsSecurityGetAttackSimulationTrainingUserCoverage2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec reports_security_get_attack_simulation_training_user_coverage(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.ReportsSecurityGetAttackSimulationTrainingUserCoverage2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def reports_security_get_attack_simulation_training_user_coverage(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/reports/security/getAttackSimulationTrainingUserCoverage()")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.ReportsSecurityGetAttackSimulationTrainingUserCoverage2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
