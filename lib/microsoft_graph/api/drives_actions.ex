# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DrivesActions do
  @moduledoc """
  API calls for all endpoints tagged `DrivesActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action assignSensitivityLabel

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_assign_sensitivity_label_request` (DrivesDriveItemsDriveItemAssignSensitivityLabelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_assign_sensitivity_label(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemAssignSensitivityLabelRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_assign_sensitivity_label(connection, drive_id, drive_item_id, drives_drive_items_drive_item_assign_sensitivity_label_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/assignSensitivityLabel")
      |> add_param(:body, :body, drives_drive_items_drive_item_assign_sensitivity_label_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action checkin
  Check in a checked out driveItem resource, which makes the version of the document available to others. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_checkin_request` (DrivesDriveItemsDriveItemCheckinRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_checkin(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemCheckinRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_checkin(connection, drive_id, drive_item_id, drives_drive_items_drive_item_checkin_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/checkin")
      |> add_param(:body, :body, drives_drive_items_drive_item_checkin_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action checkout
  Check out a driveItem resource to prevent others from editing the document, and prevent your changes from being visible until the documented is checked in. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_checkout(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_checkout(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/checkout")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copy
  Asynchronously creates a copy of an driveItem][item-resource] (including any children), under a new parent item or with a new name. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_copy_request` (DrivesDriveItemsDriveItemCopyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDriveItemAllOfValueInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_copy(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemCopyRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfDriveItemAllOfValueInner.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_copy(connection, drive_id, drive_item_id, drives_drive_items_drive_item_copy_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/copy")
      |> add_param(:body, :body, drives_drive_items_drive_item_copy_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDriveItemAllOfValueInner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createLink
  You can use createLink action to share a DriveItem via a sharing link. The createLink action will create a new sharing link if the specified link type doesn't already exist for the calling application. If a sharing link of the specified type already exists for the app, the existing sharing link will be returned. DriveItem resources inherit sharing permissions from their ancestors. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_create_link_request` (DrivesDriveItemsDriveItemCreateLinkRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfPermissionAllOfValueInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_create_link(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemCreateLinkRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfPermissionAllOfValueInner.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_create_link(connection, drive_id, drive_item_id, drives_drive_items_drive_item_create_link_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/createLink")
      |> add_param(:body, :body, drives_drive_items_drive_item_create_link_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfPermissionAllOfValueInner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_create_upload_session_request` (DrivesDriveItemsDriveItemCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_create_upload_session(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemCreateUploadSessionRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_create_upload_session(connection, drive_id, drive_item_id, drives_drive_items_drive_item_create_upload_session_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/createUploadSession")
      |> add_param(:body, :body, drives_drive_items_drive_item_create_upload_session_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action extractSensitivityLabels

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemExtractSensitivityLabels2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_extract_sensitivity_labels(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemExtractSensitivityLabels2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_extract_sensitivity_labels(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/extractSensitivityLabels")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemExtractSensitivityLabels2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action follow
  Follow a driveItem. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDriveItemAllOfValueInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_follow(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfDriveItemAllOfValueInner.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_follow(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/follow")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDriveItemAllOfValueInner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action invite
  Sends a sharing invitation for a driveItem. A sharing invitation provides permissions to the recipients and optionally sends them an email with a sharing link][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_invite_request` (DrivesDriveItemsDriveItemInviteRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_invite(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemInviteRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CollectionOfPermission.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_invite(connection, drive_id, drive_item_id, drives_drive_items_drive_item_invite_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/invite")
      |> add_param(:body, :body, drives_drive_items_drive_item_invite_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action permanentDelete

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_permanent_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_permanent_delete(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/permanentDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action grant
  Grant users access to a link represented by a permission][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `permission_id` (String.t): The unique identifier of permission
  - `sites_site_permissions_permission_grant_request` (SitesSitePermissionsPermissionGrantRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_permissions_permission_grant(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.SitesSitePermissionsPermissionGrantRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CollectionOfPermission.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_permissions_permission_grant(connection, drive_id, drive_item_id, permission_id, sites_site_permissions_permission_grant_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/permissions/#{permission_id}/grant")
      |> add_param(:body, :body, sites_site_permissions_permission_grant_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action preview

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_preview_request` (DrivesDriveItemsDriveItemPreviewRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemPreview2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_preview(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemPreviewRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemPreview2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_preview(connection, drive_id, drive_item_id, drives_drive_items_drive_item_preview_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/preview")
      |> add_param(:body, :body, drives_drive_items_drive_item_preview_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemPreview2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restore
  Restore a driveItem that has been deleted and is currently in the recycle bin. NOTE: This functionality is currently only available for OneDrive Personal. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_copy_request` (DrivesDriveItemsDriveItemCopyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDriveItemAllOfValueInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_restore(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemCopyRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfDriveItemAllOfValueInner.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_restore(connection, drive_id, drive_item_id, drives_drive_items_drive_item_copy_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/restore")
      |> add_param(:body, :body, drives_drive_items_drive_item_copy_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDriveItemAllOfValueInner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reauthorize
  Reauthorize a subscription when you receive a reauthorizationRequired challenge. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `subscription_id` (String.t): The unique identifier of subscription
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_subscriptions_subscription_reauthorize(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_subscriptions_subscription_reauthorize(connection, drive_id, drive_item_id, subscription_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/subscriptions/#{subscription_id}/reauthorize")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unfollow
  Unfollow a driveItem. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_unfollow(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_unfollow(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/unfollow")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action validatePermission

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_validate_permission_request` (DrivesDriveItemsDriveItemValidatePermissionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_validate_permission(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemValidatePermissionRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_validate_permission(connection, drive_id, drive_item_id, drives_drive_items_drive_item_validate_permission_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/validatePermission")
      |> add_param(:body, :body, drives_drive_items_drive_item_validate_permission_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restoreVersion
  Restore a previous version of a DriveItem to be the current version. This will create a new version with the contents of the previous version, but preserves all existing versions of the file. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drive_item_version_id` (String.t): The unique identifier of driveItemVersion
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_versions_drive_item_version_restore_version(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_versions_drive_item_version_restore_version(connection, drive_id, drive_item_id, drive_item_version_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/versions/#{drive_item_version_id}/restoreVersion")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action calculate
  Recalculate all currently opened workbooks in Excel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_application_calculate_request` (DrivesDriveItemsDriveItemWorkbookApplicationCalculateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_application_calculate(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookApplicationCalculateRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_application_calculate(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_application_calculate_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/application/calculate")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_application_calculate_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action closeSession
  Use this API to close an existing workbook session. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_close_session(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_close_session(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/closeSession")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createSession
  Create a new workbook session.  Excel APIs can be called in one of two modes:  To represent the session in the API, use the workbook-session-id: {session-id} header.  In some cases, creating a new session requires an indeterminate time to complete. Microsoft Graph also provides a long running operations pattern. This pattern provides a way to poll for creation status updates, without waiting for the creation to complete. The following are the steps: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_create_session_request` (DrivesDriveItemsDriveItemWorkbookCreateSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookCreateSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_create_session(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookCreateSessionRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookCreateSession2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_create_session(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_create_session_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/createSession")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_create_session_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookCreateSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action abs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_abs(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_abs(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/abs")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accrInt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_accr_int_request` (DrivesDriveItemsDriveItemWorkbookFunctionsAccrIntRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_accr_int(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsAccrIntRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_accr_int(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_accr_int_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/accrInt")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_accr_int_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accrIntM

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_accr_int_m_request` (DrivesDriveItemsDriveItemWorkbookFunctionsAccrIntMRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_accr_int_m(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsAccrIntMRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_accr_int_m(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_accr_int_m_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/accrIntM")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_accr_int_m_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action acos

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_acos(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_acos(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/acos")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action acosh

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_acosh(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_acosh(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/acosh")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action acot

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_acot(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_acot(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/acot")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action acoth

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_acoth(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_acoth(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/acoth")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action amorDegrc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_amor_linc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsAmorLincRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_amor_degrc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsAmorLincRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_amor_degrc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_amor_linc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/amorDegrc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_amor_linc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action amorLinc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_amor_linc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsAmorLincRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_amor_linc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsAmorLincRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_amor_linc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_amor_linc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/amorLinc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_amor_linc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action and

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_and(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_and(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/and")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action arabic

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_arabic(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_arabic(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/arabic")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action areas

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_formula_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsFormulaRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_areas(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsFormulaRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_areas(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_formula_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/areas")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_formula_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action asc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_asc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_asc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/asc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action asin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_asin(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_asin(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/asin")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action asinh

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_asinh(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_asinh(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/asinh")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action atan

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_atan(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_atan(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/atan")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action atan2

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_atan2_request` (DrivesDriveItemsDriveItemWorkbookFunctionsAtan2Request): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_atan2(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsAtan2Request.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_atan2(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_atan2_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/atan2")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_atan2_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action atanh

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_atanh(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_atanh(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/atanh")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action aveDev

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_ave_dev(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_ave_dev(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/aveDev")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action average

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_average(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_average(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/average")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action averageA

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_average_a(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_average_a(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/averageA")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action averageIf

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_average_if_request` (DrivesDriveItemsDriveItemWorkbookFunctionsAverageIfRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_average_if(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsAverageIfRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_average_if(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_average_if_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/averageIf")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_average_if_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action averageIfs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_average_ifs_request` (DrivesDriveItemsDriveItemWorkbookFunctionsAverageIfsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_average_ifs(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsAverageIfsRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_average_ifs(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_average_ifs_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/averageIfs")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_average_ifs_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action bahtText

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_baht_text(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_baht_text(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/bahtText")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action base

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_base_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBaseRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_base(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBaseRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_base(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_base_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/base")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_base_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action besselI

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_bessel_i_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBesselIRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bessel_i(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBesselIRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bessel_i(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_bessel_i_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/besselI")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_bessel_i_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action besselJ

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_bessel_i_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBesselIRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bessel_j(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBesselIRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bessel_j(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_bessel_i_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/besselJ")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_bessel_i_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action besselK

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_bessel_i_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBesselIRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bessel_k(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBesselIRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bessel_k(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_bessel_i_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/besselK")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_bessel_i_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action besselY

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_bessel_i_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBesselIRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bessel_y(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBesselIRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bessel_y(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_bessel_i_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/besselY")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_bessel_i_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action beta_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_beta_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBetaDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_beta_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBetaDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_beta_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_beta_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/beta_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_beta_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action beta_Inv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_beta_inv_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBetaInvRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_beta_inv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBetaInvRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_beta_inv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_beta_inv_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/beta_Inv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_beta_inv_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action bin2Dec

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bin2_dec(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bin2_dec(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/bin2Dec")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action bin2Hex

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dec2_bin_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bin2_hex(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bin2_hex(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dec2_bin_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/bin2Hex")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dec2_bin_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action bin2Oct

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dec2_bin_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bin2_oct(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bin2_oct(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dec2_bin_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/bin2Oct")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dec2_bin_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action binom_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_binom_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBinomDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_binom_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBinomDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_binom_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_binom_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/binom_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_binom_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action binom_Dist_Range

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_binom_dist_range_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBinomDistRangeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_binom_dist_range(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBinomDistRangeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_binom_dist_range(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_binom_dist_range_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/binom_Dist_Range")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_binom_dist_range_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action binom_Inv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_binom_inv_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBinomInvRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_binom_inv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBinomInvRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_binom_inv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_binom_inv_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/binom_Inv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_binom_inv_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action bitand

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_bitor_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBitorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bitand(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBitorRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bitand(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_bitor_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/bitand")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_bitor_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action bitlshift

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_bitlshift_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBitlshiftRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bitlshift(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBitlshiftRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bitlshift(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_bitlshift_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/bitlshift")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_bitlshift_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action bitor

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_bitor_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBitorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bitor(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBitorRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bitor(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_bitor_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/bitor")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_bitor_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action bitrshift

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_bitlshift_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBitlshiftRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bitrshift(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBitlshiftRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bitrshift(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_bitlshift_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/bitrshift")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_bitlshift_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action bitxor

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_bitor_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBitorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_bitxor(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBitorRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_bitxor(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_bitor_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/bitxor")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_bitor_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action ceiling_Math

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_ceiling_math_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCeilingMathRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_ceiling_math(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCeilingMathRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_ceiling_math(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_ceiling_math_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/ceiling_Math")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_ceiling_math_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action ceiling_Precise

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_ceiling_precise_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCeilingPreciseRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_ceiling_precise(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCeilingPreciseRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_ceiling_precise(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_ceiling_precise_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/ceiling_Precise")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_ceiling_precise_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action char

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_char(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_char(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/char")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action chiSq_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_t_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_chi_sq_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_chi_sq_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_t_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/chiSq_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_t_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action chiSq_Dist_RT

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_chi_sq_dist_rt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsChiSqDistRtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_chi_sq_dist_rt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsChiSqDistRtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_chi_sq_dist_rt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_chi_sq_dist_rt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/chiSq_Dist_RT")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_chi_sq_dist_rt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action chiSq_Inv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_t_inv2_t_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTInv2TRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_chi_sq_inv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTInv2TRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_chi_sq_inv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_t_inv2_t_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/chiSq_Inv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_t_inv2_t_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action chiSq_Inv_RT

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_t_inv2_t_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTInv2TRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_chi_sq_inv_rt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTInv2TRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_chi_sq_inv_rt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_t_inv2_t_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/chiSq_Inv_RT")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_t_inv2_t_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action choose

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_choose_request` (DrivesDriveItemsDriveItemWorkbookFunctionsChooseRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_choose(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsChooseRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_choose(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_choose_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/choose")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_choose_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clean

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_clean(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_clean(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/clean")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action code

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_code(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_code(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/code")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action columns

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_rows_request` (DrivesDriveItemsDriveItemWorkbookFunctionsRowsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_columns(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsRowsRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_columns(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_rows_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/columns")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_rows_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action combin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_permut_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPermutRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_combin(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPermutRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_combin(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_permut_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/combin")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_permut_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action combina

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_permut_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPermutRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_combina(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPermutRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_combina(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_permut_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/combina")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_permut_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action complex

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_complex_request` (DrivesDriveItemsDriveItemWorkbookFunctionsComplexRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_complex(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsComplexRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_complex(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_complex_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/complex")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_complex_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action concatenate

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_concatenate(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_concatenate(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/concatenate")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action confidence_Norm

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_confidence_norm_request` (DrivesDriveItemsDriveItemWorkbookFunctionsConfidenceNormRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_confidence_norm(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsConfidenceNormRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_confidence_norm(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_confidence_norm_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/confidence_Norm")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_confidence_norm_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action confidence_T

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_confidence_norm_request` (DrivesDriveItemsDriveItemWorkbookFunctionsConfidenceNormRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_confidence_t(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsConfidenceNormRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_confidence_t(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_confidence_norm_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/confidence_T")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_confidence_norm_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action convert

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_convert_request` (DrivesDriveItemsDriveItemWorkbookFunctionsConvertRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_convert(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsConvertRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_convert(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_convert_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/convert")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_convert_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cos

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_cos(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_cos(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/cos")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cosh

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_cosh(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_cosh(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/cosh")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cot

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_cot(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_cot(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/cot")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action coth

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_coth(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_coth(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/coth")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action count

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_count(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_count(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/count")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action countA

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_count_a(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_count_a(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/countA")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action countBlank

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_count_blank_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCountBlankRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_count_blank(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCountBlankRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_count_blank(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_count_blank_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/countBlank")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_count_blank_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action countIf

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_count_if_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCountIfRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_count_if(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCountIfRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_count_if(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_count_if_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/countIf")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_count_if_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action countIfs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_count_ifs(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_count_ifs(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/countIfs")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action coupDayBs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_coup_days_nc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_coup_day_bs(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_coup_day_bs(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/coupDayBs")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action coupDays

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_coup_days_nc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_coup_days(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_coup_days(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/coupDays")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action coupDaysNc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_coup_days_nc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_coup_days_nc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_coup_days_nc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/coupDaysNc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action coupNcd

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_coup_days_nc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_coup_ncd(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_coup_ncd(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/coupNcd")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action coupNum

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_coup_days_nc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_coup_num(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_coup_num(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/coupNum")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action coupPcd

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_coup_days_nc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_coup_pcd(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCoupDaysNcRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_coup_pcd(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/coupPcd")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_coup_days_nc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action csc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_csc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_csc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/csc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action csch

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_csch(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_csch(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/csch")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cumIPmt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_cum_i_pmt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCumIPmtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_cum_i_pmt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCumIPmtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_cum_i_pmt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_cum_i_pmt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/cumIPmt")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_cum_i_pmt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cumPrinc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_cum_i_pmt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCumIPmtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_cum_princ(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCumIPmtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_cum_princ(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_cum_i_pmt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/cumPrinc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_cum_i_pmt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action date

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_date_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_date(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDateRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_date(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_date_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/date")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_date_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action datevalue

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_datevalue_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDatevalueRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_datevalue(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDatevalueRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_datevalue(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_datevalue_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/datevalue")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_datevalue_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action daverage

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_daverage(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_daverage(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/daverage")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action day

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_month_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_day(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_day(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_month_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/day")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_month_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action days

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_days_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDaysRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_days(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDaysRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_days(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_days_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/days")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_days_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action days360

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_days360_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDays360Request): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_days360(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDays360Request.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_days360(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_days360_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/days360")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_days360_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action db

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_db_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDbRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_db(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDbRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_db(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_db_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/db")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_db_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dbcs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dbcs(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dbcs(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dbcs")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dcount

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dcount(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dcount(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dcount")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dcountA

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dcount_a(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dcount_a(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dcountA")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action ddb

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_ddb_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDdbRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_ddb(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDdbRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_ddb(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_ddb_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/ddb")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_ddb_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dec2Bin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dec2_bin_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dec2_bin(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dec2_bin(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dec2_bin_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dec2Bin")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dec2_bin_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dec2Hex

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dec2_bin_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dec2_hex(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dec2_hex(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dec2_bin_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dec2Hex")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dec2_bin_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dec2Oct

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dec2_bin_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dec2_oct(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dec2_oct(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dec2_bin_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dec2Oct")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dec2_bin_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decimal

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_decimal_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDecimalRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_decimal(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDecimalRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_decimal(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_decimal_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/decimal")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_decimal_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action degrees

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_degrees_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDegreesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_degrees(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDegreesRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_degrees(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_degrees_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/degrees")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_degrees_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action delta

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_bitor_request` (DrivesDriveItemsDriveItemWorkbookFunctionsBitorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_delta(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsBitorRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_delta(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_bitor_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/delta")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_bitor_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action devSq

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dev_sq(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dev_sq(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/devSq")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dget

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dget(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dget(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dget")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action disc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_disc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDiscRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_disc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDiscRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_disc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_disc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/disc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_disc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dmax

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dmax(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dmax(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dmax")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dmin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dmin(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dmin(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dmin")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dollar

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dollar_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDollarRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dollar(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDollarRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dollar(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dollar_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dollar")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dollar_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dollarDe

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dollar_de_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDollarDeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dollar_de(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDollarDeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dollar_de(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dollar_de_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dollarDe")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dollar_de_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dollarFr

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dollar_fr_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDollarFrRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dollar_fr(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDollarFrRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dollar_fr(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dollar_fr_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dollarFr")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dollar_fr_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dproduct

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dproduct(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dproduct(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dproduct")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dstDev

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dst_dev(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dst_dev(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dstDev")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dstDevP

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dst_dev_p(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dst_dev_p(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dstDevP")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dsum

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dsum(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dsum(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dsum")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action duration

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_duration_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDurationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_duration(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDurationRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_duration(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_duration_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/duration")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_duration_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dvar

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dvar(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dvar(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dvar")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dvarP

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dmax_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_dvar_p(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDmaxRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_dvar_p(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dmax_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/dvarP")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dmax_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action ecma_Ceiling

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_ceiling_precise_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCeilingPreciseRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_ecma_ceiling(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCeilingPreciseRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_ecma_ceiling(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_ceiling_precise_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/ecma_Ceiling")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_ceiling_precise_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action edate

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_edate_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEdateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_edate(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEdateRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_edate(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_edate_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/edate")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_edate_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action effect

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_effect_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEffectRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_effect(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEffectRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_effect(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_effect_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/effect")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_effect_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action eoMonth

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_edate_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEdateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_eo_month(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEdateRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_eo_month(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_edate_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/eoMonth")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_edate_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action erf

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_erf_request` (DrivesDriveItemsDriveItemWorkbookFunctionsErfRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_erf(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsErfRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_erf(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_erf_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/erf")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_erf_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action erfC

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_phi_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_erf_c(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_erf_c(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_phi_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/erfC")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_phi_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action erfC_Precise

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_erf_precise_request` (DrivesDriveItemsDriveItemWorkbookFunctionsErfPreciseRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_erf_c_precise(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsErfPreciseRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_erf_c_precise(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_erf_precise_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/erfC_Precise")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_erf_precise_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action erf_Precise

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_erf_precise_request` (DrivesDriveItemsDriveItemWorkbookFunctionsErfPreciseRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_erf_precise(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsErfPreciseRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_erf_precise(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_erf_precise_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/erf_Precise")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_erf_precise_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action error_Type

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_error_type_request` (DrivesDriveItemsDriveItemWorkbookFunctionsErrorTypeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_error_type(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsErrorTypeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_error_type(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_error_type_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/error_Type")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_error_type_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action even

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_even(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_even(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/even")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action exact

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_exact_request` (DrivesDriveItemsDriveItemWorkbookFunctionsExactRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_exact(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsExactRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_exact(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_exact_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/exact")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_exact_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action exp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_exp(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_exp(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/exp")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action expon_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_expon_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsExponDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_expon_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsExponDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_expon_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_expon_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/expon_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_expon_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action f_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_f_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsFDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_f_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsFDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_f_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_f_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/f_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_f_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action f_Dist_RT

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_f_dist_rt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsFDistRtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_f_dist_rt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsFDistRtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_f_dist_rt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_f_dist_rt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/f_Dist_RT")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_f_dist_rt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action f_Inv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_f_inv_rt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsFInvRtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_f_inv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsFInvRtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_f_inv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_f_inv_rt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/f_Inv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_f_inv_rt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action f_Inv_RT

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_f_inv_rt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsFInvRtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_f_inv_rt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsFInvRtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_f_inv_rt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_f_inv_rt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/f_Inv_RT")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_f_inv_rt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action fact

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_fact(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_fact(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/fact")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action factDouble

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_fact_double(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_fact_double(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/factDouble")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action false

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_false(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_false(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/false")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action find

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_find_request` (DrivesDriveItemsDriveItemWorkbookFunctionsFindRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_find(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsFindRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_find(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_find_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/find")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_find_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action findB

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_find_request` (DrivesDriveItemsDriveItemWorkbookFunctionsFindRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_find_b(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsFindRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_find_b(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_find_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/findB")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_find_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action fisher

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_phi_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_fisher(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_fisher(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_phi_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/fisher")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_phi_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action fisherInv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_fisher_inv_request` (DrivesDriveItemsDriveItemWorkbookFunctionsFisherInvRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_fisher_inv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsFisherInvRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_fisher_inv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_fisher_inv_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/fisherInv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_fisher_inv_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action fixed

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_fixed_request` (DrivesDriveItemsDriveItemWorkbookFunctionsFixedRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_fixed(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsFixedRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_fixed(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_fixed_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/fixed")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_fixed_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action floor_Math

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_ceiling_math_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCeilingMathRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_floor_math(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCeilingMathRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_floor_math(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_ceiling_math_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/floor_Math")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_ceiling_math_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action floor_Precise

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_ceiling_precise_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCeilingPreciseRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_floor_precise(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCeilingPreciseRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_floor_precise(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_ceiling_precise_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/floor_Precise")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_ceiling_precise_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action fv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_fv_request` (DrivesDriveItemsDriveItemWorkbookFunctionsFvRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_fv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsFvRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_fv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_fv_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/fv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_fv_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action fvschedule

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_fvschedule_request` (DrivesDriveItemsDriveItemWorkbookFunctionsFvscheduleRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_fvschedule(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsFvscheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_fvschedule(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_fvschedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/fvschedule")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_fvschedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action gamma

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_phi_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_gamma(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_gamma(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_phi_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/gamma")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_phi_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action gamma_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_gamma_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsGammaDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_gamma_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsGammaDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_gamma_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_gamma_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/gamma_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_gamma_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action gamma_Inv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_gamma_inv_request` (DrivesDriveItemsDriveItemWorkbookFunctionsGammaInvRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_gamma_inv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsGammaInvRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_gamma_inv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_gamma_inv_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/gamma_Inv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_gamma_inv_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action gammaLn

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_phi_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_gamma_ln(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_gamma_ln(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_phi_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/gammaLn")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_phi_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action gammaLn_Precise

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_phi_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_gamma_ln_precise(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_gamma_ln_precise(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_phi_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/gammaLn_Precise")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_phi_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action gauss

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_phi_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_gauss(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_gauss(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_phi_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/gauss")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_phi_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action gcd

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_gcd(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_gcd(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/gcd")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action geStep

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_ge_step_request` (DrivesDriveItemsDriveItemWorkbookFunctionsGeStepRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_ge_step(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsGeStepRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_ge_step(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_ge_step_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/geStep")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_ge_step_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action geoMean

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_geo_mean(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_geo_mean(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/geoMean")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action harMean

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_har_mean(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_har_mean(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/harMean")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action hex2Bin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dec2_bin_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_hex2_bin(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_hex2_bin(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dec2_bin_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/hex2Bin")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dec2_bin_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action hex2Dec

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_hex2_dec(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_hex2_dec(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/hex2Dec")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action hex2Oct

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dec2_bin_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_hex2_oct(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_hex2_oct(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dec2_bin_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/hex2Oct")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dec2_bin_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action hlookup

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_hlookup_request` (DrivesDriveItemsDriveItemWorkbookFunctionsHlookupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_hlookup(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsHlookupRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_hlookup(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_hlookup_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/hlookup")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_hlookup_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action hour

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_month_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_hour(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_hour(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_month_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/hour")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_month_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action hypGeom_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_hyp_geom_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsHypGeomDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_hyp_geom_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsHypGeomDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_hyp_geom_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_hyp_geom_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/hypGeom_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_hyp_geom_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action hyperlink

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_hyperlink_request` (DrivesDriveItemsDriveItemWorkbookFunctionsHyperlinkRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_hyperlink(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsHyperlinkRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_hyperlink(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_hyperlink_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/hyperlink")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_hyperlink_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action if

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_if_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIfRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_if(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIfRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_if(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_if_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/if")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_if_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imAbs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_abs(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_abs(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imAbs")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imArgument

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_argument(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_argument(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imArgument")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imConjugate

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_conjugate(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_conjugate(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imConjugate")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imCos

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_cos(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_cos(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imCos")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imCosh

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_cosh(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_cosh(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imCosh")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imCot

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_cot(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_cot(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imCot")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imCsc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_csc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_csc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imCsc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imCsch

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_csch(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_csch(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imCsch")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imDiv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sub_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSubRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_div(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSubRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_div(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sub_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imDiv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sub_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imExp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_exp(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_exp(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imExp")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imLn

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_ln(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_ln(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imLn")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imLog10

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_log10(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_log10(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imLog10")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imLog2

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_log2(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_log2(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imLog2")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imPower

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_power_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImPowerRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_power(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImPowerRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_power(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_power_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imPower")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_power_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imProduct

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_product(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_product(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imProduct")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imReal

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_real(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_real(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imReal")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imSec

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_sec(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_sec(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imSec")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imSech

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_sech(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_sech(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imSech")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imSin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_sin(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_sin(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imSin")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imSinh

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_sinh(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_sinh(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imSinh")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imSqrt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_sqrt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_sqrt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imSqrt")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imSub

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sub_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSubRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_sub(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSubRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_sub(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sub_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imSub")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sub_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imSum

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_sum(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_sum(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imSum")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imTan

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_im_tan(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_im_tan(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imTan")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action imaginary

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_im_sech_request` (DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_imaginary(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSechRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_imaginary(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_im_sech_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/imaginary")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_im_sech_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action int

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_int(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_int(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/int")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action intRate

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_int_rate_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIntRateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_int_rate(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIntRateRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_int_rate(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_int_rate_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/intRate")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_int_rate_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action ipmt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_ppmt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPpmtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_ipmt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPpmtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_ipmt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_ppmt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/ipmt")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_ppmt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action irr

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_irr_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIrrRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_irr(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIrrRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_irr(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_irr_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/irr")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_irr_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isErr

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_is_err(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_is_err(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isErr")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isError

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_is_error(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_is_error(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isError")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isEven

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_is_even(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_is_even(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isEven")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isFormula

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_formula_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsFormulaRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_is_formula(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsFormulaRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_is_formula(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_formula_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isFormula")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_formula_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isLogical

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_is_logical(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_is_logical(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isLogical")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isNA

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_is_na(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_is_na(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isNA")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isNonText

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_is_non_text(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_is_non_text(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isNonText")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isNumber

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_is_number(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_is_number(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isNumber")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isOdd

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_is_odd(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_is_odd(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isOdd")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isText

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_is_text(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_is_text(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isText")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action iso_Ceiling

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_ceiling_precise_request` (DrivesDriveItemsDriveItemWorkbookFunctionsCeilingPreciseRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_iso_ceiling(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsCeilingPreciseRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_iso_ceiling(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_ceiling_precise_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/iso_Ceiling")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_ceiling_precise_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isoWeekNum

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_iso_week_num_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsoWeekNumRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_iso_week_num(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsoWeekNumRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_iso_week_num(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_iso_week_num_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isoWeekNum")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_iso_week_num_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action ispmt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_ispmt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIspmtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_ispmt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIspmtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_ispmt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_ispmt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/ispmt")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_ispmt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action isref

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_isref(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_isref(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/isref")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action kurt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_kurt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_kurt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/kurt")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action large

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_small_request` (DrivesDriveItemsDriveItemWorkbookFunctionsSmallRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_large(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsSmallRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_large(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_small_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/large")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_small_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action lcm

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_lcm(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_lcm(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/lcm")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action left

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_left_request` (DrivesDriveItemsDriveItemWorkbookFunctionsLeftRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_left(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsLeftRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_left(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_left_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/left")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_left_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action leftb

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_leftb_request` (DrivesDriveItemsDriveItemWorkbookFunctionsLeftbRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_leftb(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsLeftbRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_leftb(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_leftb_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/leftb")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_leftb_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action len

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_len(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_len(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/len")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action lenb

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_lenb(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_lenb(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/lenb")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action ln

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_ln(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_ln(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/ln")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action log

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_log_request` (DrivesDriveItemsDriveItemWorkbookFunctionsLogRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_log(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsLogRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_log(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_log_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/log")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_log_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action log10

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_log10(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_log10(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/log10")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action logNorm_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_log_norm_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsLogNormDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_log_norm_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsLogNormDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_log_norm_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_log_norm_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/logNorm_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_log_norm_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action logNorm_Inv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_log_norm_inv_request` (DrivesDriveItemsDriveItemWorkbookFunctionsLogNormInvRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_log_norm_inv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsLogNormInvRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_log_norm_inv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_log_norm_inv_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/logNorm_Inv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_log_norm_inv_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action lookup

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_lookup_request` (DrivesDriveItemsDriveItemWorkbookFunctionsLookupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_lookup(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsLookupRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_lookup(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_lookup_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/lookup")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_lookup_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action lower

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_lower(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_lower(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/lower")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action match

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_match_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMatchRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_match(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMatchRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_match(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_match_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/match")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_match_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action max

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_max(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_max(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/max")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action maxA

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_max_a(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_max_a(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/maxA")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action mduration

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_duration_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDurationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_mduration(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDurationRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_mduration(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_duration_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/mduration")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_duration_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action median

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_median(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_median(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/median")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action mid

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_mid_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMidRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_mid(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMidRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_mid(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_mid_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/mid")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_mid_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action midb

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_midb_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMidbRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_midb(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMidbRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_midb(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_midb_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/midb")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_midb_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action min

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_min(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_min(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/min")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action minA

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_min_a(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_min_a(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/minA")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action minute

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_month_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_minute(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_minute(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_month_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/minute")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_month_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action mirr

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_mirr_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMirrRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_mirr(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMirrRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_mirr(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_mirr_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/mirr")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_mirr_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action mod

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_mod_request` (DrivesDriveItemsDriveItemWorkbookFunctionsModRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_mod(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsModRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_mod(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_mod_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/mod")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_mod_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action month

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_month_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_month(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_month(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_month_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/month")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_month_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action mround

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_mround_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMroundRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_mround(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMroundRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_mround(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_mround_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/mround")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_mround_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action multiNomial

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_multi_nomial(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_multi_nomial(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/multiNomial")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action n

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_n(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_n(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/n")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action na

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_na(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_na(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/na")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action negBinom_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_neg_binom_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsNegBinomDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_neg_binom_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsNegBinomDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_neg_binom_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_neg_binom_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/negBinom_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_neg_binom_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action networkDays

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_network_days_request` (DrivesDriveItemsDriveItemWorkbookFunctionsNetworkDaysRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_network_days(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsNetworkDaysRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_network_days(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_network_days_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/networkDays")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_network_days_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action networkDays_Intl

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_network_days_intl_request` (DrivesDriveItemsDriveItemWorkbookFunctionsNetworkDaysIntlRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_network_days_intl(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsNetworkDaysIntlRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_network_days_intl(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_network_days_intl_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/networkDays_Intl")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_network_days_intl_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action nominal

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_nominal_request` (DrivesDriveItemsDriveItemWorkbookFunctionsNominalRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_nominal(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsNominalRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_nominal(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_nominal_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/nominal")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_nominal_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action norm_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_log_norm_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsLogNormDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_norm_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsLogNormDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_norm_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_log_norm_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/norm_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_log_norm_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action norm_Inv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_log_norm_inv_request` (DrivesDriveItemsDriveItemWorkbookFunctionsLogNormInvRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_norm_inv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsLogNormInvRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_norm_inv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_log_norm_inv_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/norm_Inv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_log_norm_inv_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action norm_S_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_norm_s_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsNormSDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_norm_s_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsNormSDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_norm_s_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_norm_s_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/norm_S_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_norm_s_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action norm_S_Inv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_norm_s_inv_request` (DrivesDriveItemsDriveItemWorkbookFunctionsNormSInvRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_norm_s_inv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsNormSInvRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_norm_s_inv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_norm_s_inv_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/norm_S_Inv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_norm_s_inv_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action not

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_not_request` (DrivesDriveItemsDriveItemWorkbookFunctionsNotRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_not(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsNotRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_not(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_not_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/not")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_not_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action now

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_now(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_now(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/now")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action nper

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_nper_request` (DrivesDriveItemsDriveItemWorkbookFunctionsNperRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_nper(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsNperRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_nper(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_nper_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/nper")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_nper_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action npv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_npv_request` (DrivesDriveItemsDriveItemWorkbookFunctionsNpvRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_npv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsNpvRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_npv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_npv_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/npv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_npv_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action numberValue

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_number_value_request` (DrivesDriveItemsDriveItemWorkbookFunctionsNumberValueRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_number_value(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsNumberValueRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_number_value(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_number_value_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/numberValue")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_number_value_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action oct2Bin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dec2_bin_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_oct2_bin(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_oct2_bin(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dec2_bin_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/oct2Bin")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dec2_bin_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action oct2Dec

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_oct2_dec(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_oct2_dec(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/oct2Dec")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action oct2Hex

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dec2_bin_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_oct2_hex(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDec2BinRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_oct2_hex(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dec2_bin_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/oct2Hex")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dec2_bin_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action odd

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_odd(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_odd(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/odd")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action oddFPrice

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_odd_f_price_request` (DrivesDriveItemsDriveItemWorkbookFunctionsOddFPriceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_odd_f_price(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsOddFPriceRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_odd_f_price(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_odd_f_price_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/oddFPrice")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_odd_f_price_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action oddFYield

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_odd_f_yield_request` (DrivesDriveItemsDriveItemWorkbookFunctionsOddFYieldRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_odd_f_yield(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsOddFYieldRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_odd_f_yield(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_odd_f_yield_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/oddFYield")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_odd_f_yield_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action oddLPrice

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_odd_l_price_request` (DrivesDriveItemsDriveItemWorkbookFunctionsOddLPriceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_odd_l_price(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsOddLPriceRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_odd_l_price(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_odd_l_price_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/oddLPrice")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_odd_l_price_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action oddLYield

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_odd_l_yield_request` (DrivesDriveItemsDriveItemWorkbookFunctionsOddLYieldRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_odd_l_yield(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsOddLYieldRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_odd_l_yield(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_odd_l_yield_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/oddLYield")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_odd_l_yield_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action or

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_or(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_or(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/or")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action pduration

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_pduration_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPdurationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_pduration(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPdurationRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_pduration(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_pduration_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/pduration")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_pduration_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action percentRank_Exc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_percent_rank_inc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPercentRankIncRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_percent_rank_exc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPercentRankIncRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_percent_rank_exc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_percent_rank_inc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/percentRank_Exc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_percent_rank_inc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action percentRank_Inc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_percent_rank_inc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPercentRankIncRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_percent_rank_inc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPercentRankIncRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_percent_rank_inc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_percent_rank_inc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/percentRank_Inc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_percent_rank_inc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action percentile_Exc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_small_request` (DrivesDriveItemsDriveItemWorkbookFunctionsSmallRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_percentile_exc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsSmallRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_percentile_exc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_small_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/percentile_Exc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_small_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action percentile_Inc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_small_request` (DrivesDriveItemsDriveItemWorkbookFunctionsSmallRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_percentile_inc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsSmallRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_percentile_inc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_small_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/percentile_Inc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_small_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action permut

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_permut_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPermutRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_permut(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPermutRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_permut(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_permut_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/permut")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_permut_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action permutationa

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_permut_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPermutRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_permutationa(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPermutRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_permutationa(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_permut_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/permutationa")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_permut_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action phi

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_phi_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_phi(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPhiRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_phi(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_phi_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/phi")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_phi_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action pi

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_pi(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_pi(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/pi")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action pmt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_pmt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPmtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_pmt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPmtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_pmt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_pmt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/pmt")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_pmt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action poisson_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_poisson_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPoissonDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_poisson_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPoissonDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_poisson_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_poisson_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/poisson_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_poisson_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action power

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_power_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPowerRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_power(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPowerRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_power(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_power_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/power")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_power_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action ppmt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_ppmt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPpmtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_ppmt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPpmtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_ppmt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_ppmt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/ppmt")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_ppmt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action price

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_price_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPriceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_price(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPriceRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_price(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_price_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/price")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_price_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action priceDisc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_price_disc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPriceDiscRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_price_disc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPriceDiscRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_price_disc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_price_disc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/priceDisc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_price_disc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action priceMat

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_price_mat_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPriceMatRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_price_mat(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPriceMatRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_price_mat(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_price_mat_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/priceMat")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_price_mat_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action product

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_product(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_product(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/product")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action proper

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_proper(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_proper(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/proper")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action pv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_pv_request` (DrivesDriveItemsDriveItemWorkbookFunctionsPvRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_pv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsPvRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_pv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_pv_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/pv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_pv_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action quartile_Exc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_quartile_exc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsQuartileExcRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_quartile_exc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsQuartileExcRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_quartile_exc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_quartile_exc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/quartile_Exc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_quartile_exc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action quartile_Inc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_quartile_exc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsQuartileExcRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_quartile_inc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsQuartileExcRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_quartile_inc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_quartile_exc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/quartile_Inc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_quartile_exc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action quotient

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_quotient_request` (DrivesDriveItemsDriveItemWorkbookFunctionsQuotientRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_quotient(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsQuotientRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_quotient(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_quotient_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/quotient")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_quotient_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action radians

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_degrees_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDegreesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_radians(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDegreesRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_radians(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_degrees_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/radians")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_degrees_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action rand

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_rand(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_rand(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/rand")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action randBetween

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_rand_between_request` (DrivesDriveItemsDriveItemWorkbookFunctionsRandBetweenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_rand_between(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsRandBetweenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_rand_between(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_rand_between_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/randBetween")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_rand_between_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action rank_Avg

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_rank_avg_request` (DrivesDriveItemsDriveItemWorkbookFunctionsRankAvgRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_rank_avg(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsRankAvgRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_rank_avg(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_rank_avg_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/rank_Avg")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_rank_avg_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action rank_Eq

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_rank_avg_request` (DrivesDriveItemsDriveItemWorkbookFunctionsRankAvgRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_rank_eq(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsRankAvgRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_rank_eq(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_rank_avg_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/rank_Eq")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_rank_avg_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action rate

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_rate_request` (DrivesDriveItemsDriveItemWorkbookFunctionsRateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_rate(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsRateRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_rate(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_rate_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/rate")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_rate_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action received

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_received_request` (DrivesDriveItemsDriveItemWorkbookFunctionsReceivedRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_received(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsReceivedRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_received(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_received_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/received")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_received_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action replace

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_replace_request` (DrivesDriveItemsDriveItemWorkbookFunctionsReplaceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_replace(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsReplaceRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_replace(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_replace_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/replace")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_replace_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action replaceB

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_replace_b_request` (DrivesDriveItemsDriveItemWorkbookFunctionsReplaceBRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_replace_b(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsReplaceBRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_replace_b(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_replace_b_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/replaceB")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_replace_b_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action rept

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_rept_request` (DrivesDriveItemsDriveItemWorkbookFunctionsReptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_rept(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsReptRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_rept(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_rept_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/rept")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_rept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action right

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_left_request` (DrivesDriveItemsDriveItemWorkbookFunctionsLeftRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_right(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsLeftRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_right(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_left_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/right")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_left_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action rightb

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_leftb_request` (DrivesDriveItemsDriveItemWorkbookFunctionsLeftbRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_rightb(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsLeftbRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_rightb(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_leftb_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/rightb")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_leftb_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action roman

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_roman_request` (DrivesDriveItemsDriveItemWorkbookFunctionsRomanRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_roman(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsRomanRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_roman(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_roman_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/roman")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_roman_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action round

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_trunc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTruncRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_round(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTruncRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_round(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_trunc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/round")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_trunc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action roundDown

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_trunc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTruncRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_round_down(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTruncRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_round_down(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_trunc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/roundDown")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_trunc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action roundUp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_trunc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTruncRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_round_up(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTruncRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_round_up(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_trunc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/roundUp")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_trunc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action rows

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_rows_request` (DrivesDriveItemsDriveItemWorkbookFunctionsRowsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_rows(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsRowsRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_rows(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_rows_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/rows")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_rows_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action rri

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_rri_request` (DrivesDriveItemsDriveItemWorkbookFunctionsRriRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_rri(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsRriRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_rri(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_rri_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/rri")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_rri_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sec

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sec(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sec(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sec")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sech

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sech(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sech(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sech")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action second

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_month_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_second(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_second(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_month_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/second")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_month_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action seriesSum

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_series_sum_request` (DrivesDriveItemsDriveItemWorkbookFunctionsSeriesSumRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_series_sum(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsSeriesSumRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_series_sum(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_series_sum_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/seriesSum")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_series_sum_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sheet

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sheet(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sheet(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sheet")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sheets

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_formula_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsFormulaRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sheets(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsFormulaRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sheets(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_formula_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sheets")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_formula_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sign

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sign(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sign(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sign")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sin(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sin(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sin")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sinh

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sinh(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sinh(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sinh")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action skew

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_skew(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_skew(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/skew")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action skew_p

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_skew_p(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_skew_p(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/skew_p")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sln

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_sln_request` (DrivesDriveItemsDriveItemWorkbookFunctionsSlnRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sln(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsSlnRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sln(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_sln_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sln")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_sln_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action small

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_small_request` (DrivesDriveItemsDriveItemWorkbookFunctionsSmallRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_small(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsSmallRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_small(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_small_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/small")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_small_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sqrt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sqrt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sqrt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sqrt")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sqrtPi

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sqrt_pi(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sqrt_pi(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sqrtPi")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action stDevA

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_st_dev_a(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_st_dev_a(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/stDevA")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action stDev_P

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_st_dev_p(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_st_dev_p(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/stDev_P")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action stDevPA

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_st_dev_pa(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_st_dev_pa(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/stDevPA")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action stDev_S

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_st_dev_s(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_st_dev_s(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/stDev_S")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action standardize

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_standardize_request` (DrivesDriveItemsDriveItemWorkbookFunctionsStandardizeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_standardize(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsStandardizeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_standardize(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_standardize_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/standardize")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_standardize_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action substitute

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_substitute_request` (DrivesDriveItemsDriveItemWorkbookFunctionsSubstituteRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_substitute(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsSubstituteRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_substitute(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_substitute_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/substitute")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_substitute_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action subtotal

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_subtotal_request` (DrivesDriveItemsDriveItemWorkbookFunctionsSubtotalRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_subtotal(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsSubtotalRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_subtotal(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_subtotal_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/subtotal")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_subtotal_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sum

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sum(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sum(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sum")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sumIf

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_sum_if_request` (DrivesDriveItemsDriveItemWorkbookFunctionsSumIfRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sum_if(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsSumIfRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sum_if(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_sum_if_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sumIf")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_sum_if_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sumIfs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_sum_ifs_request` (DrivesDriveItemsDriveItemWorkbookFunctionsSumIfsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sum_ifs(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsSumIfsRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sum_ifs(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_sum_ifs_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sumIfs")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_sum_ifs_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sumSq

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_sum_sq(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_sum_sq(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/sumSq")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action syd

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_syd_request` (DrivesDriveItemsDriveItemWorkbookFunctionsSydRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_syd(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsSydRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_syd(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_syd_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/syd")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_syd_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action t

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_t(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_t(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/t")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action t_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_t_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_t_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_t_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_t_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/t_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_t_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action t_Dist_2T

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_chi_sq_dist_rt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsChiSqDistRtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_t_dist2_t(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsChiSqDistRtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_t_dist2_t(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_chi_sq_dist_rt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/t_Dist_2T")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_chi_sq_dist_rt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action t_Dist_RT

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_chi_sq_dist_rt_request` (DrivesDriveItemsDriveItemWorkbookFunctionsChiSqDistRtRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_t_dist_rt(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsChiSqDistRtRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_t_dist_rt(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_chi_sq_dist_rt_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/t_Dist_RT")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_chi_sq_dist_rt_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action t_Inv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_t_inv2_t_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTInv2TRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_t_inv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTInv2TRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_t_inv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_t_inv2_t_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/t_Inv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_t_inv2_t_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action t_Inv_2T

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_t_inv2_t_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTInv2TRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_t_inv2_t(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTInv2TRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_t_inv2_t(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_t_inv2_t_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/t_Inv_2T")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_t_inv2_t_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tan

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_tan(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_tan(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/tan")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tanh

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_tanh(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_tanh(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/tanh")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tbillEq

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_tbill_price_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTbillPriceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_tbill_eq(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTbillPriceRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_tbill_eq(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_tbill_price_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/tbillEq")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_tbill_price_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tbillPrice

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_tbill_price_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTbillPriceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_tbill_price(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTbillPriceRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_tbill_price(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_tbill_price_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/tbillPrice")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_tbill_price_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tbillYield

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_tbill_yield_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTbillYieldRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_tbill_yield(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTbillYieldRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_tbill_yield(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_tbill_yield_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/tbillYield")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_tbill_yield_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action text

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_text(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_text(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/text")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action time

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_time_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTimeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_time(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTimeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_time(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_time_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/time")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_time_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action timevalue

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_timevalue_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTimevalueRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_timevalue(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTimevalueRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_timevalue(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_timevalue_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/timevalue")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_timevalue_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action today

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_today(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_today(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/today")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action trim

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_trim(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_trim(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/trim")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action trimMean

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_trim_mean_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTrimMeanRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_trim_mean(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTrimMeanRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_trim_mean(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_trim_mean_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/trimMean")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_trim_mean_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action true

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_true(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_true(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/true")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action trunc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_trunc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsTruncRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_trunc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsTruncRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_trunc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_trunc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/trunc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_trunc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action type

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_is_non_text_request` (DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_type(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsIsNonTextRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_type(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_is_non_text_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/type")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_is_non_text_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unichar

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_even_request` (DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_unichar(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsEvenRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_unichar(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_even_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/unichar")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_even_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unicode

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_unicode(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_unicode(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/unicode")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action upper

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_upper(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_upper(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/upper")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action usdollar

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_dollar_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDollarRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_usdollar(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDollarRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_usdollar(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_dollar_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/usdollar")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_dollar_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_unicode_request` (DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_value(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsUnicodeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_value(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_unicode_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/value")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_unicode_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action varA

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_var_a(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_var_a(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/varA")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action var_P

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_var_p(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_var_p(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/var_P")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action varPA

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_var_pa(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_var_pa(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/varPA")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action var_S

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_var_s(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_var_s(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/var_S")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action vdb

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_vdb_request` (DrivesDriveItemsDriveItemWorkbookFunctionsVdbRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_vdb(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsVdbRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_vdb(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_vdb_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/vdb")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_vdb_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action vlookup

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_vlookup_request` (DrivesDriveItemsDriveItemWorkbookFunctionsVlookupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_vlookup(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsVlookupRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_vlookup(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_vlookup_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/vlookup")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_vlookup_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action weekNum

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_weekday_request` (DrivesDriveItemsDriveItemWorkbookFunctionsWeekdayRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_week_num(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsWeekdayRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_week_num(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_weekday_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/weekNum")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_weekday_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action weekday

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_weekday_request` (DrivesDriveItemsDriveItemWorkbookFunctionsWeekdayRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_weekday(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsWeekdayRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_weekday(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_weekday_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/weekday")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_weekday_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action weibull_Dist

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_gamma_dist_request` (DrivesDriveItemsDriveItemWorkbookFunctionsGammaDistRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_weibull_dist(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsGammaDistRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_weibull_dist(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_gamma_dist_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/weibull_Dist")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_gamma_dist_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action workDay

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_work_day_request` (DrivesDriveItemsDriveItemWorkbookFunctionsWorkDayRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_work_day(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsWorkDayRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_work_day(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_work_day_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/workDay")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_work_day_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action workDay_Intl

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_work_day_intl_request` (DrivesDriveItemsDriveItemWorkbookFunctionsWorkDayIntlRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_work_day_intl(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsWorkDayIntlRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_work_day_intl(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_work_day_intl_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/workDay_Intl")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_work_day_intl_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action xirr

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_xirr_request` (DrivesDriveItemsDriveItemWorkbookFunctionsXirrRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_xirr(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsXirrRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_xirr(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_xirr_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/xirr")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_xirr_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action xnpv

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_xnpv_request` (DrivesDriveItemsDriveItemWorkbookFunctionsXnpvRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_xnpv(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsXnpvRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_xnpv(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_xnpv_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/xnpv")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_xnpv_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action xor

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_xor(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_xor(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/xor")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action year

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_month_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_year(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMonthRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_year(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_month_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/year")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_month_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action yearFrac

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_year_frac_request` (DrivesDriveItemsDriveItemWorkbookFunctionsYearFracRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_year_frac(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsYearFracRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_year_frac(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_year_frac_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/yearFrac")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_year_frac_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action yield

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_yield_request` (DrivesDriveItemsDriveItemWorkbookFunctionsYieldRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_yield(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsYieldRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_yield(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_yield_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/yield")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_yield_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action yieldDisc

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_disc_request` (DrivesDriveItemsDriveItemWorkbookFunctionsDiscRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_yield_disc(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsDiscRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_yield_disc(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_disc_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/yieldDisc")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_disc_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action yieldMat

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_yield_mat_request` (DrivesDriveItemsDriveItemWorkbookFunctionsYieldMatRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_yield_mat(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsYieldMatRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_yield_mat(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_yield_mat_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/yieldMat")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_yield_mat_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action z_Test

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_functions_z_test_request` (DrivesDriveItemsDriveItemWorkbookFunctionsZTestRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_functions_z_test(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsZTestRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_functions_z_test(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_functions_z_test_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions/z_Test")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_z_test_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsImSech2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Adds a new name to the collection of the given scope using the user's locale for the formula. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_names_add_request` (DrivesDriveItemsDriveItemWorkbookNamesAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_names_add(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_names_add(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_names_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/names/add")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_names_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addFormulaLocal
  Adds a new name to the collection of the given scope using the user's locale for the formula. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_names_add_formula_local_request` (DrivesDriveItemsDriveItemWorkbookNamesAddFormulaLocalRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_names_add_formula_local(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAddFormulaLocalRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_names_add_formula_local(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_names_add_formula_local_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/names/addFormulaLocal")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_names_add_formula_local_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action refreshSession
  Use this API to refresh an existing workbook session. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_refresh_session(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_refresh_session(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/refreshSession")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Create a new table. The range source address determines the worksheet under which the table will be added. If the table can't be added (for example, because the address is invalid, or the table would overlap with another table), an error is generated. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_tables_add_request` (DrivesDriveItemsDriveItemWorkbookTablesAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_add(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_add(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_tables_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/add")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clearFilters
  Clears all the filters currently applied on the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_clear_filters(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_clear_filters(connection, drive_id, drive_item_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/clearFilters")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Adds a new column to the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_add_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_add(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_add(connection, drive_id, drive_item_id, workbook_table_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/add")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action apply
  Apply the given filter criteria on the given column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/apply")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyBottomItemsFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_items_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_items_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyBottomItemsFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyBottomPercentFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request` (DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyBottomPercentFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyCellColorFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_cell_color_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_cell_color_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyCellColorFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyCustomFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_custom_filter_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_custom_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_custom_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_custom_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyCustomFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_custom_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyDynamicFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_dynamic_filter_request` (DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_dynamic_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_dynamic_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_dynamic_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyDynamicFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_dynamic_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyFontColorFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_font_color_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_font_color_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyFontColorFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyIconFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_icon_filter_request` (DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_icon_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_icon_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_icon_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyIconFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_icon_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyTopItemsFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyTopItemsFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyTopPercentFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request` (DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_top_percent_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_top_percent_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyTopPercentFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyValuesFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_values_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_values_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyValuesFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the filter on the given column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_clear(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action convertToRange
  Converts the table into a normal range of cells. All data is preserved. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_convert_to_range(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_convert_to_range(connection, drive_id, drive_item_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/convertToRange")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reapplyFilters
  Reapplies all the filters currently on the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_reapply_filters(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_reapply_filters(connection, drive_id, drive_item_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/reapplyFilters")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Adds rows to the end of the table. Note that the API can accept multiple rows data using this API. Adding one row at a time could lead to performance degradation. The recommended approach would be to batch the rows together in a single call rather than doing single row insertion. For best results, collect the rows to be inserted on the application side and perform single rows add operation. Experiment with the number of rows to determine the ideal number of rows to use in single API call.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_add_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_rows_add(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_rows_add(connection, drive_id, drive_item_id, workbook_table_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/rows/add")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action apply
  Perform a sort operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `drives_drive_items_drive_item_workbook_tables_workbook_table_sort_apply_request` (DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableSortApplyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_sort_apply(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableSortApplyRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_sort_apply(connection, drive_id, drive_item_id, workbook_table_id, drives_drive_items_drive_item_workbook_tables_workbook_table_sort_apply_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/sort/apply")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_workbook_table_sort_apply_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clears the sorting that is currently on the table. While this doesn't modify the table's ordering, it clears the state of the header buttons. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_sort_clear(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_sort_clear(connection, drive_id, drive_item_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/sort/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reapply
  Reapplies the current sorting parameters to the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_sort_reapply(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_sort_reapply(connection, drive_id, drive_item_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/sort/reapply")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Adds a new worksheet to the workbook. The worksheet is added at the end of existing worksheets. If you wish to activate the newly added worksheet, call .activate() on it. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drives_drive_items_drive_item_workbook_worksheets_add_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_add(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsAdd2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_add(connection, drive_id, drive_item_id, drives_drive_items_drive_item_workbook_worksheets_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/add")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Creates a new chart. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_add_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_add(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_add(connection, drive_id, drive_item_id, workbook_worksheet_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/add")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the line format of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_category_axis_format_line_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_category_axis_format_line_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/format/line/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the line format of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_category_axis_major_gridlines_format_line_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_category_axis_major_gridlines_format_line_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/majorGridlines/format/line/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the line format of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_category_axis_minor_gridlines_format_line_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_category_axis_minor_gridlines_format_line_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/minorGridlines/format/line/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the line format of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_series_axis_format_line_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_series_axis_format_line_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/format/line/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the line format of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_series_axis_major_gridlines_format_line_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_series_axis_major_gridlines_format_line_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/majorGridlines/format/line/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the line format of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_series_axis_minor_gridlines_format_line_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_series_axis_minor_gridlines_format_line_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/minorGridlines/format/line/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the line format of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_value_axis_format_line_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_value_axis_format_line_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/format/line/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the line format of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_value_axis_major_gridlines_format_line_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_value_axis_major_gridlines_format_line_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/majorGridlines/format/line/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the line format of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_value_axis_minor_gridlines_format_line_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_axes_value_axis_minor_gridlines_format_line_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/minorGridlines/format/line/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the fill color of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_data_labels_format_fill_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_data_labels_format_fill_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels/format/fill/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setSolidColor
  Sets the fill formatting of a chart element to a uniform color. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_data_labels_format_fill_set_solid_color(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_data_labels_format_fill_set_solid_color(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels/format/fill/setSolidColor")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the fill color of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_format_fill_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_format_fill_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/format/fill/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setSolidColor
  Sets the fill formatting of a chart element to a uniform color. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_format_fill_set_solid_color(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_format_fill_set_solid_color(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/format/fill/setSolidColor")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the fill color of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_legend_format_fill_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_legend_format_fill_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend/format/fill/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setSolidColor
  Sets the fill formatting of a chart element to a uniform color. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_legend_format_fill_set_solid_color(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_legend_format_fill_set_solid_color(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend/format/fill/setSolidColor")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the fill color of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_format_fill_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_format_fill_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format/fill/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setSolidColor
  Sets the fill formatting of a chart element to a uniform color. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_format_fill_set_solid_color(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_format_fill_set_solid_color(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format/fill/setSolidColor")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the line format of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_format_line_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_format_line_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format/line/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the fill color of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `workbook_chart_point_id` (String.t): The unique identifier of workbookChartPoint
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_points_workbook_chart_point_format_fill_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_points_workbook_chart_point_format_fill_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, workbook_chart_point_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/#{workbook_chart_point_id}/format/fill/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setSolidColor
  Sets the fill formatting of a chart element to a uniform color. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `workbook_chart_point_id` (String.t): The unique identifier of workbookChartPoint
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_points_workbook_chart_point_format_fill_set_solid_color(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_points_workbook_chart_point_format_fill_set_solid_color(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, workbook_chart_point_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/#{workbook_chart_point_id}/format/fill/setSolidColor")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setData
  Resets the source data for the chart. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_set_data_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_set_data(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetDataRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_set_data(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_set_data_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/setData")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_set_data_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setPosition
  Positions the chart relative to cells on the worksheet. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_set_position_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_set_position(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSetPositionRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_set_position(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_set_position_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/setPosition")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_set_position_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the fill color of a chart element. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title/format/fill/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setSolidColor
  Sets the fill formatting of a chart element to a uniform color. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title/format/fill/setSolidColor")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Adds a new name to the collection of the given scope using the user's locale for the formula. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `drives_drive_items_drive_item_workbook_names_add_request` (DrivesDriveItemsDriveItemWorkbookNamesAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_names_add(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_names_add(connection, drive_id, drive_item_id, workbook_worksheet_id, drives_drive_items_drive_item_workbook_names_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/names/add")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_names_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addFormulaLocal
  Adds a new name to the collection of the given scope using the user's locale for the formula. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `drives_drive_items_drive_item_workbook_names_add_formula_local_request` (DrivesDriveItemsDriveItemWorkbookNamesAddFormulaLocalRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_names_add_formula_local(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAddFormulaLocalRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_names_add_formula_local(connection, drive_id, drive_item_id, workbook_worksheet_id, drives_drive_items_drive_item_workbook_names_add_formula_local_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/names/addFormulaLocal")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_names_add_formula_local_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookNamesAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action refreshAll
  Refreshes the PivotTable within a given worksheet. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_pivot_tables_refresh_all(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_pivot_tables_refresh_all(connection, drive_id, drive_item_id, workbook_worksheet_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/pivotTables/refreshAll")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action refresh
  Refreshes the PivotTable. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_pivot_table_id` (String.t): The unique identifier of workbookPivotTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_pivot_tables_workbook_pivot_table_refresh(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_pivot_tables_workbook_pivot_table_refresh(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_pivot_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/pivotTables/#{workbook_pivot_table_id}/refresh")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action protect
  Protect a worksheet. It throws if the worksheet has been protected. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_protection_protect_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_protection_protect(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetProtectionProtectRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_protection_protect(connection, drive_id, drive_item_id, workbook_worksheet_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_protection_protect_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/protection/protect")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_protection_protect_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unprotect
  Unprotect a worksheet This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_protection_unprotect(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_protection_unprotect(connection, drive_id, drive_item_id, workbook_worksheet_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/protection/unprotect")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Create a new table. The range source address determines the worksheet under which the table will be added. If the table can't be added (for example, because the address is invalid, or the table would overlap with another table), an error is generated. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `drives_drive_items_drive_item_workbook_tables_add_request` (DrivesDriveItemsDriveItemWorkbookTablesAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_add(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_add(connection, drive_id, drive_item_id, workbook_worksheet_id, drives_drive_items_drive_item_workbook_tables_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/add")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clearFilters
  Clears all the filters currently applied on the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_clear_filters(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_clear_filters(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/clearFilters")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Adds a new column to the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_add_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_add(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_add(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/add")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action apply
  Apply the given filter criteria on the given column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/apply")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyBottomItemsFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_items_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_items_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyBottomItemsFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyBottomPercentFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request` (DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyBottomPercentFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyCellColorFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_cell_color_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_cell_color_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyCellColorFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyCustomFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_custom_filter_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_custom_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyCustomFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_custom_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_custom_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyCustomFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_custom_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyDynamicFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_dynamic_filter_request` (DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_dynamic_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyDynamicFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_dynamic_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_dynamic_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyDynamicFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_dynamic_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyFontColorFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_font_color_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartTitleFormatFillSetSolidColorRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_font_color_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyFontColorFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_title_format_fill_set_solid_color_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyIconFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_icon_filter_request` (DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_icon_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyIconFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_icon_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_icon_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyIconFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_icon_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyTopItemsFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyTopItemsFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyTopItemsFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_items_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyTopPercentFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request` (DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_percent_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnFilterApplyBottomPercentFilterRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_top_percent_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyTopPercentFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_filter_apply_bottom_percent_filter_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyValuesFilter

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `drives_drive_items_drive_item_workbook_functions_min_a_request` (DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_values_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookFunctionsMinARequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_apply_values_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, drives_drive_items_drive_item_workbook_functions_min_a_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/applyValuesFilter")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_functions_min_a_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clear the filter on the given column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_filter_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action convertToRange
  Converts the table into a normal range of cells. All data is preserved. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_convert_to_range(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_convert_to_range(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/convertToRange")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reapplyFilters
  Reapplies all the filters currently on the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_reapply_filters(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_reapply_filters(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/reapplyFilters")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Adds rows to the end of the table. Note that the API can accept multiple rows data using this API. Adding one row at a time could lead to performance degradation. The recommended approach would be to batch the rows together in a single call rather than doing single row insertion. For best results, collect the rows to be inserted on the application side and perform single rows add operation. Experiment with the number of rows to determine the ideal number of rows to use in single API call.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_add_request` (DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_add(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_add(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/rows/add")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action apply
  Perform a sort operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `drives_drive_items_drive_item_workbook_tables_workbook_table_sort_apply_request` (DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableSortApplyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_sort_apply(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesWorkbookTableSortApplyRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_sort_apply(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, drives_drive_items_drive_item_workbook_tables_workbook_table_sort_apply_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/sort/apply")
      |> add_param(:body, :body, drives_drive_items_drive_item_workbook_tables_workbook_table_sort_apply_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clear
  Clears the sorting that is currently on the table. While this doesn't modify the table's ordering, it clears the state of the header buttons. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_sort_clear(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_sort_clear(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/sort/clear")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reapply
  Reapplies the current sorting parameters to the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_sort_reapply(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_sort_reapply(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/sort/reapply")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addCopy
  Add a copy of a content type][contentType] from a [site][site] to a [list][list]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `sites_site_content_types_add_copy_request` (SitesSiteContentTypesAddCopyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_content_types_add_copy(Tesla.Env.client, String.t, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_list_content_types_add_copy(connection, drive_id, sites_site_content_types_add_copy_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/list/contentTypes/addCopy")
      |> add_param(:body, :body, sites_site_content_types_add_copy_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addCopyFromContentTypeHub
  Add or sync a copy of a published content type from the content type hub to a target site or a list. This method is part of the content type publishing changes to optimize the syncing of published content types to sites and lists, effectively switching from a 'push everywhere' to 'pull as needed' approach. The method allows users to pull content types directly from the content type hub to a site or list. For more information, see contentType: getCompatibleHubContentTypes and the blog post Syntex Product Updates – August 2021. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `sites_site_content_types_add_copy_from_content_type_hub_request` (SitesSiteContentTypesAddCopyFromContentTypeHubRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_content_types_add_copy_from_content_type_hub(Tesla.Env.client, String.t, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHubRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_list_content_types_add_copy_from_content_type_hub(connection, drive_id, sites_site_content_types_add_copy_from_content_type_hub_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/list/contentTypes/addCopyFromContentTypeHub")
      |> add_param(:body, :body, sites_site_content_types_add_copy_from_content_type_hub_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action associateWithHubSites
  Associate a published content type][contentType] present in a content type hub with a list of hub sites. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `content_type_id` (String.t): The unique identifier of contentType
  - `sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request` (SitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_content_types_content_type_associate_with_hub_sites(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.SitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_list_content_types_content_type_associate_with_hub_sites(connection, drive_id, content_type_id, sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/list/contentTypes/#{content_type_id}/associateWithHubSites")
      |> add_param(:body, :body, sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToDefaultContentLocation
  Copy a file to a default content location in a content type][contentType]. The file can then be added as a default file or template via a POST operation. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `content_type_id` (String.t): The unique identifier of contentType
  - `groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request` (GroupsGroupSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_content_types_content_type_copy_to_default_content_location(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.GroupsGroupSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_list_content_types_content_type_copy_to_default_content_location(connection, drive_id, content_type_id, groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/list/contentTypes/#{content_type_id}/copyToDefaultContentLocation")
      |> add_param(:body, :body, groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action publish
  Publishes a contentType][] present in the content type hub site. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_content_types_content_type_publish(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_list_content_types_content_type_publish(connection, drive_id, content_type_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/list/contentTypes/#{content_type_id}/publish")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unpublish
  Unpublish a contentType][] from a content type hub site. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_content_types_content_type_unpublish(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_list_content_types_content_type_unpublish(connection, drive_id, content_type_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/list/contentTypes/#{content_type_id}/unpublish")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restore
  Restore a document set version. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_items_list_item_document_set_versions_document_set_version_restore(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_list_items_list_item_document_set_versions_document_set_version_restore(connection, drive_id, list_item_id, document_set_version_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/list/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}/restore")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restoreVersion
  Restore a previous version of a ListItem to be the current version. This will create a new version with the contents of the previous version, but preserves all existing versions of the item. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_items_list_item_versions_list_item_version_restore_version(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_list_items_list_item_versions_list_item_version_restore_version(connection, drive_id, list_item_id, list_item_version_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/list/items/#{list_item_id}/versions/#{list_item_version_id}/restoreVersion")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reauthorize
  Reauthorize a subscription when you receive a reauthorizationRequired challenge. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `subscription_id` (String.t): The unique identifier of subscription
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_subscriptions_subscription_reauthorize(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_list_subscriptions_subscription_reauthorize(connection, drive_id, subscription_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/list/subscriptions/#{subscription_id}/reauthorize")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
