# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.TenantRelationshipsDelegatedAdminRelationship do
  @moduledoc """
  API calls for all endpoints tagged `TenantRelationshipsDelegatedAdminRelationship`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create delegatedAdminRelationship
  Create a new delegatedAdminRelationship object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_delegated_admin_relationship` (MicrosoftGraphDelegatedAdminRelationship): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationship.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_create_delegated_admin_relationships(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationship.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationship.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_create_delegated_admin_relationships(
        connection,
        microsoft_graph_delegated_admin_relationship,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/tenantRelationships/delegatedAdminRelationships")
      |> add_param(:body, :body, microsoft_graph_delegated_admin_relationship)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationship},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_access_assignments_get_count8cbf(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_access_assignments_get_count8cbf(
        connection,
        delegated_admin_relationship_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/accessAssignments/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create accessAssignments
  Create a new delegatedAdminAccessAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `microsoft_graph_delegated_admin_access_assignment` (MicrosoftGraphDelegatedAdminAccessAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_create_access_assignments(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_create_access_assignments(
        connection,
        delegated_admin_relationship_id,
        microsoft_graph_delegated_admin_access_assignment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/accessAssignments"
      )
      |> add_param(:body, :body, microsoft_graph_delegated_admin_access_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to operations for tenantRelationships

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `microsoft_graph_delegated_admin_relationship_operation` (MicrosoftGraphDelegatedAdminRelationshipOperation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_create_operations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_create_operations(
        connection,
        delegated_admin_relationship_id,
        microsoft_graph_delegated_admin_relationship_operation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/operations"
      )
      |> add_param(:body, :body, microsoft_graph_delegated_admin_relationship_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create requests
  Create a new delegatedAdminRelationshipRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `microsoft_graph_delegated_admin_relationship_request` (MicrosoftGraphDelegatedAdminRelationshipRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_create_requests(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_create_requests(
        connection,
        delegated_admin_relationship_id,
        microsoft_graph_delegated_admin_relationship_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/requests"
      )
      |> add_param(:body, :body, microsoft_graph_delegated_admin_relationship_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete delegatedAdminAccessAssignment
  Delete a delegatedAdminAccessAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `delegated_admin_access_assignment_id` (String.t): The unique identifier of delegatedAdminAccessAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_delete_access_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_delete_access_assignments(
        connection,
        delegated_admin_relationship_id,
        delegated_admin_access_assignment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/accessAssignments/#{delegated_admin_access_assignment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property operations for tenantRelationships

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `delegated_admin_relationship_operation_id` (String.t): The unique identifier of delegatedAdminRelationshipOperation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_delete_operations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_delete_operations(
        connection,
        delegated_admin_relationship_id,
        delegated_admin_relationship_operation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/operations/#{delegated_admin_relationship_operation_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property requests for tenantRelationships

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `delegated_admin_relationship_request_id` (String.t): The unique identifier of delegatedAdminRelationshipRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_delete_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_delete_requests(
        connection,
        delegated_admin_relationship_id,
        delegated_admin_relationship_request_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/requests/#{delegated_admin_relationship_request_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get delegatedAdminAccessAssignment
  Read the properties of a delegatedAdminAccessAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `delegated_admin_access_assignment_id` (String.t): The unique identifier of delegatedAdminAccessAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_get_access_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_get_access_assignments(
        connection,
        delegated_admin_relationship_id,
        delegated_admin_access_assignment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/accessAssignments/#{delegated_admin_access_assignment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_get_count9d12(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_get_count9d12(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/tenantRelationships/delegatedAdminRelationships/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get delegatedAdminRelationshipOperation
  Read the properties of a delegatedAdminRelationshipOperation object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `delegated_admin_relationship_operation_id` (String.t): The unique identifier of delegatedAdminRelationshipOperation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_get_operations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_get_operations(
        connection,
        delegated_admin_relationship_id,
        delegated_admin_relationship_operation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/operations/#{delegated_admin_relationship_operation_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get delegatedAdminRelationshipRequest
  Read the properties and relationships of a delegatedAdminRelationshipRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `delegated_admin_relationship_request_id` (String.t): The unique identifier of delegatedAdminRelationshipRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_get_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_get_requests(
        connection,
        delegated_admin_relationship_id,
        delegated_admin_relationship_request_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/requests/#{delegated_admin_relationship_request_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List accessAssignments
  Get a list of the delegatedAdminAccessAssignment objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_list_access_assignments(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignmentCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_list_access_assignments(
        connection,
        delegated_admin_relationship_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/accessAssignments"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List operations
  Get a list of the delegatedAdminRelationshipOperation objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_list_operations(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperationCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_list_operations(
        connection,
        delegated_admin_relationship_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/operations"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List requests
  Get a list of the delegatedAdminRelationshipRequest objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_list_requests(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequestCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_list_requests(
        connection,
        delegated_admin_relationship_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/requests"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_operations_get_count3beb(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_operations_get_count3beb(
        connection,
        delegated_admin_relationship_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/operations/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_requests_get_count_f3a6(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_requests_get_count_f3a6(
        connection,
        delegated_admin_relationship_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/requests/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update delegatedAdminAccessAssignment
  Update the properties of a delegatedAdminAccessAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `delegated_admin_access_assignment_id` (String.t): The unique identifier of delegatedAdminAccessAssignment
  - `microsoft_graph_delegated_admin_access_assignment` (MicrosoftGraphDelegatedAdminAccessAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_update_access_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_update_access_assignments(
        connection,
        delegated_admin_relationship_id,
        delegated_admin_access_assignment_id,
        microsoft_graph_delegated_admin_access_assignment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/accessAssignments/#{delegated_admin_access_assignment_id}"
      )
      |> add_param(:body, :body, microsoft_graph_delegated_admin_access_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminAccessAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property operations in tenantRelationships

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `delegated_admin_relationship_operation_id` (String.t): The unique identifier of delegatedAdminRelationshipOperation
  - `microsoft_graph_delegated_admin_relationship_operation` (MicrosoftGraphDelegatedAdminRelationshipOperation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_update_operations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_update_operations(
        connection,
        delegated_admin_relationship_id,
        delegated_admin_relationship_operation_id,
        microsoft_graph_delegated_admin_relationship_operation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/operations/#{delegated_admin_relationship_operation_id}"
      )
      |> add_param(:body, :body, microsoft_graph_delegated_admin_relationship_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property requests in tenantRelationships

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `delegated_admin_relationship_request_id` (String.t): The unique identifier of delegatedAdminRelationshipRequest
  - `microsoft_graph_delegated_admin_relationship_request` (MicrosoftGraphDelegatedAdminRelationshipRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_relationships_update_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_relationships_update_requests(
        connection,
        delegated_admin_relationship_id,
        delegated_admin_relationship_request_id,
        microsoft_graph_delegated_admin_relationship_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}/requests/#{delegated_admin_relationship_request_id}"
      )
      |> add_param(:body, :body, microsoft_graph_delegated_admin_relationship_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete delegatedAdminRelationship
  Delete a delegatedAdminRelationship object. A relationship can only be deleted if it's in the 'created' status.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delete_delegated_admin_relationships(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delete_delegated_admin_relationships(
        connection,
        delegated_admin_relationship_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get delegatedAdminRelationship
  Read the properties of a delegatedAdminRelationship object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationship.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_get_delegated_admin_relationships(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationship.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_get_delegated_admin_relationships(
        connection,
        delegated_admin_relationship_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationship},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List delegatedAdminRelationships
  Get a list of the delegatedAdminRelationship objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_list_delegated_admin_relationships(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_list_delegated_admin_relationships(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/tenantRelationships/delegatedAdminRelationships")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationshipCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update delegatedAdminRelationship
  Update the properties of a delegatedAdminRelationship object. You can only update a relationship when it's in the created status. However, you can update the autoExtendDuration property when the relationship is in either the created or active status. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_relationship_id` (String.t): The unique identifier of delegatedAdminRelationship
  - `microsoft_graph_delegated_admin_relationship` (MicrosoftGraphDelegatedAdminRelationship): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationship.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_update_delegated_admin_relationships(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationship.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationship.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_update_delegated_admin_relationships(
        connection,
        delegated_admin_relationship_id,
        microsoft_graph_delegated_admin_relationship,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/tenantRelationships/delegatedAdminRelationships/#{delegated_admin_relationship_id}"
      )
      |> add_param(:body, :body, microsoft_graph_delegated_admin_relationship)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminRelationship},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
