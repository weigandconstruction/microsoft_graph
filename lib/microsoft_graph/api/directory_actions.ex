# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DirectoryActions do
  @moduledoc """
  API calls for all endpoints tagged `DirectoryActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action checkMemberGroups
  Check for membership in a specified list of group IDs, and return from that list those groups (identified by IDs) of which the specified user, group, service principal, organizational contact, device, or directory object is a member. This function is transitive. You can check up to a maximum of 20 groups per request. This function supports all groups provisioned in Microsoft Entra ID. Because Microsoft 365 groups cannot contain other groups, membership in a Microsoft 365 group is always direct. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `contracts_contract_check_member_groups_request` (ContractsContractCheckMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_deleted_items_directory_object_check_member_groups(Tesla.Env.client, String.t, MicrosoftGraph.Model.ContractsContractCheckMemberGroupsRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def directory_deleted_items_directory_object_check_member_groups(connection, directory_object_id, contracts_contract_check_member_groups_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/deletedItems/#{directory_object_id}/checkMemberGroups")
      |> add_param(:body, :body, contracts_contract_check_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action checkMemberObjects

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `directory_role_templates_directory_role_template_check_member_objects_request` (DirectoryRoleTemplatesDirectoryRoleTemplateCheckMemberObjectsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_deleted_items_directory_object_check_member_objects(Tesla.Env.client, String.t, MicrosoftGraph.Model.DirectoryRoleTemplatesDirectoryRoleTemplateCheckMemberObjectsRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def directory_deleted_items_directory_object_check_member_objects(connection, directory_object_id, directory_role_templates_directory_role_template_check_member_objects_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/deletedItems/#{directory_object_id}/checkMemberObjects")
      |> add_param(:body, :body, directory_role_templates_directory_role_template_check_member_objects_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getMemberGroups
  Return all the group IDs for the groups that the specified user, group, service principal, organizational contact, device, or directory object is a member of. This function is transitive. This API returns up to 11,000 group IDs. If more than 11,000 results are available, it returns a 400 Bad Request error with the Directory_ResultSizeLimitExceeded error code. As a workaround, use the List group transitive memberOf API. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `contacts_org_contact_get_member_groups_request` (ContactsOrgContactGetMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_deleted_items_directory_object_get_member_groups(Tesla.Env.client, String.t, MicrosoftGraph.Model.ContactsOrgContactGetMemberGroupsRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def directory_deleted_items_directory_object_get_member_groups(connection, directory_object_id, contacts_org_contact_get_member_groups_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/deletedItems/#{directory_object_id}/getMemberGroups")
      |> add_param(:body, :body, contacts_org_contact_get_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getMemberObjects
  Return all IDs for the groups, administrative units, and directory roles that a user, group, service principal, organizational contact, device, or directory object is a member of. This function is transitive. Note: Only users and role-enabled groups can be members of directory roles. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `contacts_org_contact_get_member_groups_request` (ContactsOrgContactGetMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_deleted_items_directory_object_get_member_objects(Tesla.Env.client, String.t, MicrosoftGraph.Model.ContactsOrgContactGetMemberGroupsRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def directory_deleted_items_directory_object_get_member_objects(connection, directory_object_id, contacts_org_contact_get_member_groups_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/deletedItems/#{directory_object_id}/getMemberObjects")
      |> add_param(:body, :body, contacts_org_contact_get_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restore
  Restore a recently deleted application, group, servicePrincipal, administrative unit, or user object from deleted items. If an item was accidentally deleted, you can fully restore the item. However, security groups cannot be restored. A recently deleted item remains available for up to 30 days. After 30 days, the item is permanently deleted. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_deleted_items_directory_object_restore(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def directory_deleted_items_directory_object_restore(connection, directory_object_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/deletedItems/#{directory_object_id}/restore")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getAvailableExtensionProperties
  Return all directory extension definitions that have been registered in a directory, including through multi-tenant apps. The following entities support extension properties: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `directory_deleted_items_get_available_extension_properties_request` (DirectoryDeletedItemsGetAvailableExtensionPropertiesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfExtensionProperty.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_deleted_items_get_available_extension_properties(Tesla.Env.client, MicrosoftGraph.Model.DirectoryDeletedItemsGetAvailableExtensionPropertiesRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfExtensionProperty.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def directory_deleted_items_get_available_extension_properties(connection, directory_deleted_items_get_available_extension_properties_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/deletedItems/getAvailableExtensionProperties")
      |> add_param(:body, :body, directory_deleted_items_get_available_extension_properties_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfExtensionProperty},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getByIds
  Return the directory objects specified in a list of IDs. Only a subset of user properties are returned by default in v1.0. Some common uses for this function are to: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contacts_get_by_ids_request` (ContactsGetByIdsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_deleted_items_get_by_ids(Tesla.Env.client, MicrosoftGraph.Model.ContactsGetByIdsRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CollectionOfDirectoryObject.t} | {:error, Tesla.Env.t}
  def directory_deleted_items_get_by_ids(connection, contacts_get_by_ids_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/deletedItems/getByIds")
      |> add_param(:body, :body, contacts_get_by_ids_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action validateProperties
  Validate that a Microsoft 365 group's display name or mail nickname complies with naming policies.  Clients can use this API to determine whether a display name or mail nickname is valid before trying to create a Microsoft 365 group. To validate the properties of an existing group, use the group: validateProperties function. The following policy validations are performed for the display name and mail nickname properties: 1. Validate the prefix and suffix naming policy 2. Validate the custom banned words policy 3. Validate that the mail nickname is unique This API only returns the first validation failure that is encountered. If the properties fail multiple validations, only the first validation failure is returned. However, you can validate both the mail nickname and the display name and receive a collection of validation errors if you are only validating the prefix and suffix naming policy. To learn more about configuring naming policies, see Configure naming policy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contacts_validate_properties_request` (ContactsValidatePropertiesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_deleted_items_validate_properties(Tesla.Env.client, MicrosoftGraph.Model.ContactsValidatePropertiesRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def directory_deleted_items_validate_properties(connection, contacts_validate_properties_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/deletedItems/validateProperties")
      |> add_param(:body, :body, contacts_validate_properties_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
