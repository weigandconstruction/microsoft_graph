# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.ChatsActions do
  @moduledoc """
  API calls for all endpoints tagged `ChatsActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action hideForUser
  Hide a chat for a user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chats_chat_unhide_for_user_request` (ChatsChatUnhideForUserRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_hide_for_user(Tesla.Env.client, String.t, MicrosoftGraph.Model.ChatsChatUnhideForUserRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_hide_for_user(connection, chat_id, chats_chat_unhide_for_user_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/hideForUser")
      |> add_param(:body, :body, chats_chat_unhide_for_user_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action upgrade
  Upgrade an app installation within a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request` (UsersUserChatsChatInstalledAppsTeamsAppInstallationUpgradeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_installed_apps_teams_app_installation_upgrade(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.UsersUserChatsChatInstalledAppsTeamsAppInstallationUpgradeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_installed_apps_teams_app_installation_upgrade(connection, chat_id, teams_app_installation_id, users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/installedApps/#{teams_app_installation_id}/upgrade")
      |> add_param(:body, :body, users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action markChatReadForUser
  Mark a chat as read for a user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chats_chat_unhide_for_user_request` (ChatsChatUnhideForUserRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_mark_chat_read_for_user(Tesla.Env.client, String.t, MicrosoftGraph.Model.ChatsChatUnhideForUserRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_mark_chat_read_for_user(connection, chat_id, chats_chat_unhide_for_user_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/markChatReadForUser")
      |> add_param(:body, :body, chats_chat_unhide_for_user_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action markChatUnreadForUser
  Mark a chat as unread for a user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `users_user_chats_chat_mark_chat_unread_for_user_request` (UsersUserChatsChatMarkChatUnreadForUserRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_mark_chat_unread_for_user(Tesla.Env.client, String.t, MicrosoftGraph.Model.UsersUserChatsChatMarkChatUnreadForUserRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_mark_chat_unread_for_user(connection, chat_id, users_user_chats_chat_mark_chat_unread_for_user_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/markChatUnreadForUser")
      |> add_param(:body, :body, users_user_chats_chat_mark_chat_unread_for_user_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Add multiple members in a single request to a team. The response provides details about which memberships could and couldn't be created. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `me_joined_teams_team_members_add_request` (MeJoinedTeamsTeamMembersAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_members_add(Tesla.Env.client, String.t, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAddRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_members_add(connection, chat_id, me_joined_teams_team_members_add_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/members/add")
      |> add_param(:body, :body, me_joined_teams_team_members_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_messages_chat_message_replies_chat_message_set_reaction(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_messages_chat_message_replies_chat_message_set_reaction(connection, chat_id, chat_message_id, chat_message_id1, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/setReaction")
      |> add_param(:body, :body, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_messages_chat_message_replies_chat_message_soft_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_messages_chat_message_replies_chat_message_soft_delete(connection, chat_id, chat_message_id, chat_message_id1, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/softDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_messages_chat_message_replies_chat_message_undo_soft_delete(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_messages_chat_message_replies_chat_message_undo_soft_delete(connection, chat_id, chat_message_id, chat_message_id1, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/undoSoftDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_messages_chat_message_replies_chat_message_unset_reaction(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_messages_chat_message_replies_chat_message_unset_reaction(connection, chat_id, chat_message_id, chat_message_id1, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/unsetReaction")
      |> add_param(:body, :body, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_messages_chat_message_set_reaction(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_messages_chat_message_set_reaction(connection, chat_id, chat_message_id, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/messages/#{chat_message_id}/setReaction")
      |> add_param(:body, :body, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_messages_chat_message_soft_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_messages_chat_message_soft_delete(connection, chat_id, chat_message_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/messages/#{chat_message_id}/softDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_messages_chat_message_undo_soft_delete(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_messages_chat_message_undo_soft_delete(connection, chat_id, chat_message_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/messages/#{chat_message_id}/undoSoftDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_messages_chat_message_unset_reaction(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_messages_chat_message_unset_reaction(connection, chat_id, chat_message_id, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/messages/#{chat_message_id}/unsetReaction")
      |> add_param(:body, :body, groups_group_team_channels_channel_messages_chat_message_unset_reaction_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sendActivityNotification
  Send an activity feed notification in scope of a chat. For more details about sending notifications and the requirements for doing so, see sending Teams activity notifications. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `me_joined_teams_team_send_activity_notification_request` (MeJoinedTeamsTeamSendActivityNotificationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_send_activity_notification(Tesla.Env.client, String.t, MicrosoftGraph.Model.MeJoinedTeamsTeamSendActivityNotificationRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_send_activity_notification(connection, chat_id, me_joined_teams_team_send_activity_notification_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/sendActivityNotification")
      |> add_param(:body, :body, me_joined_teams_team_send_activity_notification_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unhideForUser
  Unhide a chat for a user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chats_chat_unhide_for_user_request` (ChatsChatUnhideForUserRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec chats_chat_unhide_for_user(Tesla.Env.client, String.t, MicrosoftGraph.Model.ChatsChatUnhideForUserRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def chats_chat_unhide_for_user(connection, chat_id, chats_chat_unhide_for_user_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/chats/#{chat_id}/unhideForUser")
      |> add_param(:body, :body, chats_chat_unhide_for_user_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
