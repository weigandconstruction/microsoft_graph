# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.EmployeeExperienceLearningProvider do
  @moduledoc """
  API calls for all endpoints tagged `EmployeeExperienceLearningProvider`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create learningProvider
  Create a new learningProvider object and register it with Viva Learning using the specified display name and logos for different themes. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_learning_provider` (MicrosoftGraphLearningProvider): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningProvider.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_create_learning_providers(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphLearningProvider.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningProvider.t} | {:error, Tesla.Env.t}
  def employee_experience_create_learning_providers(connection, microsoft_graph_learning_provider, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/employeeExperience/learningProviders")
      |> add_param(:body, :body, microsoft_graph_learning_provider)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningProvider},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete learningProvider
  Delete a learningProvider resource and remove its registration in Viva Learning for a tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_delete_learning_providers(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_delete_learning_providers(connection, learning_provider_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get learningProvider
  Read the properties and relationships of a learningProvider object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningProvider.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_get_learning_providers(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningProvider.t} | {:error, Tesla.Env.t}
  def employee_experience_get_learning_providers(connection, learning_provider_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningProvider},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to learningContents for employeeExperience

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `microsoft_graph_learning_content` (MicrosoftGraphLearningContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_create_learning_contents(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphLearningContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_create_learning_contents(connection, learning_provider_id, microsoft_graph_learning_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningContents")
      |> add_param(:body, :body, microsoft_graph_learning_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create learningCourseActivity
  Create a new learningCourseActivity object. A learning course activity can be one of two types:  - Assignment - Self-initiated Use this method to create either type of activity. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `microsoft_graph_learning_course_activity` (MicrosoftGraphLearningCourseActivity): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_create_learning_course_activities(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivity.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivity.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_create_learning_course_activities(connection, learning_provider_id, microsoft_graph_learning_course_activity, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningCourseActivities")
      |> add_param(:body, :body, microsoft_graph_learning_course_activity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete learningContent
  Delete the specified learningContent resource that represents the metadata of the specified provider's ingested content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `learning_content_id` (String.t): The unique identifier of learningContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_delete_learning_contents(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_delete_learning_contents(connection, learning_provider_id, learning_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningContents/#{learning_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete learningCourseActivity
  Delete a learningCourseActivity object by using the course activity ID of either an assignment or a self-initiated activity. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `learning_course_activity_id` (String.t): The unique identifier of learningCourseActivity
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_delete_learning_course_activities(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_delete_learning_course_activities(connection, learning_provider_id, learning_course_activity_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningCourseActivities/#{learning_course_activity_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_get_count4d87(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_get_count4d87(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/employeeExperience/learningProviders/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get learningContent
  Get the specified learningContent resource which represents the metadata of the specified provider's ingested content. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `learning_content_id` (String.t): The unique identifier of learningContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_get_learning_contents(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_get_learning_contents(connection, learning_provider_id, learning_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningContents/#{learning_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get learningCourseActivities from employeeExperience

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `learning_course_activity_id` (String.t): The unique identifier of learningCourseActivity
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_get_learning_course_activities(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivity.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_get_learning_course_activities(connection, learning_provider_id, learning_course_activity_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningCourseActivities/#{learning_course_activity_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_learning_contents_get_count2b22(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_learning_contents_get_count2b22(connection, learning_provider_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningContents/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_learning_course_activities_get_count_abe5(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_learning_course_activities_get_count_abe5(connection, learning_provider_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningCourseActivities/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List learningContents
  Get a list of the learningContent resources and their properties. This list represents the metadata of the specified provider's content in Viva Learning. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_list_learning_contents(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_list_learning_contents(connection, learning_provider_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningContents")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get learningCourseActivities from employeeExperience

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivityCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_list_learning_course_activities(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivityCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_list_learning_course_activities(connection, learning_provider_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningCourseActivities")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivityCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property learningContents in employeeExperience

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `learning_content_id` (String.t): The unique identifier of learningContent
  - `microsoft_graph_learning_content` (MicrosoftGraphLearningContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_update_learning_contents(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphLearningContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_update_learning_contents(connection, learning_provider_id, learning_content_id, microsoft_graph_learning_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningContents/#{learning_content_id}")
      |> add_param(:body, :body, microsoft_graph_learning_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update learningCourseActivity
  Update the properties of a learningCourseActivity object.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `learning_course_activity_id` (String.t): The unique identifier of learningCourseActivity
  - `microsoft_graph_learning_course_activity` (MicrosoftGraphLearningCourseActivity): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_learning_providers_update_learning_course_activities(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivity.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivity.t} | {:error, Tesla.Env.t}
  def employee_experience_learning_providers_update_learning_course_activities(connection, learning_provider_id, learning_course_activity_id, microsoft_graph_learning_course_activity, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}/learningCourseActivities/#{learning_course_activity_id}")
      |> add_param(:body, :body, microsoft_graph_learning_course_activity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningCourseActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List learningProviders
  Get a list of the learningProvider resources registered in Viva Learning for a tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningProviderCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_list_learning_providers(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningProviderCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def employee_experience_list_learning_providers(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/employeeExperience/learningProviders")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningProviderCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update learningProvider
  Update the properties of a learningProvider object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `learning_provider_id` (String.t): The unique identifier of learningProvider
  - `microsoft_graph_learning_provider` (MicrosoftGraphLearningProvider): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLearningProvider.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec employee_experience_update_learning_providers(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphLearningProvider.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphLearningProvider.t} | {:error, Tesla.Env.t}
  def employee_experience_update_learning_providers(connection, learning_provider_id, microsoft_graph_learning_provider, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/employeeExperience/learningProviders/#{learning_provider_id}")
      |> add_param(:body, :body, microsoft_graph_learning_provider)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLearningProvider},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
