# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceAppManagementDefaultManagedAppProtection do
  @moduledoc """
  API calls for all endpoints tagged `DeviceAppManagementDefaultManagedAppProtection`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create defaultManagedAppProtection
  Create a new defaultManagedAppProtection object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_default_managed_app_protection` (MicrosoftGraphDefaultManagedAppProtection): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_create_default_managed_app_protections(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtection.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtection.t} | {:error, Tesla.Env.t}
  def device_app_management_create_default_managed_app_protections(connection, microsoft_graph_default_managed_app_protection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/defaultManagedAppProtections")
      |> add_param(:body, :body, microsoft_graph_default_managed_app_protection)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_default_managed_app_protections_apps_get_count9a28(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_default_managed_app_protections_apps_get_count9a28(connection, default_managed_app_protection_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}/apps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to apps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `microsoft_graph_managed_mobile_app` (MicrosoftGraphManagedMobileApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_default_managed_app_protections_create_apps(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_default_managed_app_protections_create_apps(connection, default_managed_app_protection_id, microsoft_graph_managed_mobile_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}/apps")
      |> add_param(:body, :body, microsoft_graph_managed_mobile_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property apps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `managed_mobile_app_id` (String.t): The unique identifier of managedMobileApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_default_managed_app_protections_delete_apps(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_default_managed_app_protections_delete_apps(connection, default_managed_app_protection_id, managed_mobile_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}/apps/#{managed_mobile_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property deploymentSummary for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_default_managed_app_protections_delete_deployment_summary(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_default_managed_app_protections_delete_deployment_summary(connection, default_managed_app_protection_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}/deploymentSummary")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get apps from deviceAppManagement
  List of apps to which the policy is deployed.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `managed_mobile_app_id` (String.t): The unique identifier of managedMobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_default_managed_app_protections_get_apps(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_default_managed_app_protections_get_apps(connection, default_managed_app_protection_id, managed_mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}/apps/#{managed_mobile_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_default_managed_app_protections_get_count9b85(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_default_managed_app_protections_get_count9b85(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/defaultManagedAppProtections/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deploymentSummary from deviceAppManagement
  Navigation property to deployment summary of the configuration.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_default_managed_app_protections_get_deployment_summary(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_default_managed_app_protections_get_deployment_summary(connection, default_managed_app_protection_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}/deploymentSummary")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get apps from deviceAppManagement
  List of apps to which the policy is deployed.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_default_managed_app_protections_list_apps(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_default_managed_app_protections_list_apps(connection, default_managed_app_protection_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}/apps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedMobileAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property apps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `managed_mobile_app_id` (String.t): The unique identifier of managedMobileApp
  - `microsoft_graph_managed_mobile_app` (MicrosoftGraphManagedMobileApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_default_managed_app_protections_update_apps(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_default_managed_app_protections_update_apps(connection, default_managed_app_protection_id, managed_mobile_app_id, microsoft_graph_managed_mobile_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}/apps/#{managed_mobile_app_id}")
      |> add_param(:body, :body, microsoft_graph_managed_mobile_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedMobileApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property deploymentSummary in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `microsoft_graph_managed_app_policy_deployment_summary` (MicrosoftGraphManagedAppPolicyDeploymentSummary): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_default_managed_app_protections_update_deployment_summary(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_default_managed_app_protections_update_deployment_summary(connection, default_managed_app_protection_id, microsoft_graph_managed_app_policy_deployment_summary, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}/deploymentSummary")
      |> add_param(:body, :body, microsoft_graph_managed_app_policy_deployment_summary)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedAppPolicyDeploymentSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete defaultManagedAppProtection
  Deletes a defaultManagedAppProtection.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_delete_default_managed_app_protections(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_delete_default_managed_app_protections(connection, default_managed_app_protection_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get defaultManagedAppProtection
  Read properties and relationships of the defaultManagedAppProtection object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_default_managed_app_protections(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtection.t} | {:error, Tesla.Env.t}
  def device_app_management_get_default_managed_app_protections(connection, default_managed_app_protection_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List defaultManagedAppProtections
  List properties and relationships of the defaultManagedAppProtection objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtectionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_default_managed_app_protections(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtectionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_default_managed_app_protections(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/defaultManagedAppProtections")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtectionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update defaultManagedAppProtection
  Update the properties of a defaultManagedAppProtection object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `default_managed_app_protection_id` (String.t): The unique identifier of defaultManagedAppProtection
  - `microsoft_graph_default_managed_app_protection` (MicrosoftGraphDefaultManagedAppProtection): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_update_default_managed_app_protections(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtection.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtection.t} | {:error, Tesla.Env.t}
  def device_app_management_update_default_managed_app_protections(connection, default_managed_app_protection_id, microsoft_graph_default_managed_app_protection, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/defaultManagedAppProtections/#{default_managed_app_protection_id}")
      |> add_param(:body, :body, microsoft_graph_default_managed_app_protection)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDefaultManagedAppProtection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
