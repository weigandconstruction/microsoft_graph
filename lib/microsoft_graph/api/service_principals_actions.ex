# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.ServicePrincipalsActions do
  @moduledoc """
  API calls for all endpoints tagged `ServicePrincipalsActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action getAvailableExtensionProperties
  Return all directory extension definitions that have been registered in a directory, including through multi-tenant apps. The following entities support extension properties: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `directory_deleted_items_get_available_extension_properties_request` (DirectoryDeletedItemsGetAvailableExtensionPropertiesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfExtensionProperty.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_get_available_extension_properties(
          Tesla.Env.client(),
          MicrosoftGraph.Model.DirectoryDeletedItemsGetAvailableExtensionPropertiesRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfExtensionProperty.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_get_available_extension_properties(
        connection,
        directory_deleted_items_get_available_extension_properties_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/getAvailableExtensionProperties")
      |> add_param(
        :body,
        :body,
        directory_deleted_items_get_available_extension_properties_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfExtensionProperty},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getByIds
  Return the directory objects specified in a list of IDs. Only a subset of user properties are returned by default in v1.0. Some common uses for this function are to: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contacts_get_by_ids_request` (ContactsGetByIdsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_get_by_ids(
          Tesla.Env.client(),
          MicrosoftGraph.Model.ContactsGetByIdsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.CollectionOfDirectoryObject.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_get_by_ids(connection, contacts_get_by_ids_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/getByIds")
      |> add_param(:body, :body, contacts_get_by_ids_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addKey
  Adds a key credential to a servicePrincipal. This method along with removeKey can be used by a servicePrincipal to automate rolling its expiring keys. As part of the request validation for this method, a proof of possession of an existing key is verified before the action can be performed.  ServicePrincipals that don’t have any existing valid certificates (i.e.: no certificates have been added yet, or all certificates have expired), won’t be able to use this service action. Update servicePrincipal can be used to perform an update instead. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `applications_application_add_key_request` (ApplicationsApplicationAddKeyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphKeyCredential.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_add_key(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ApplicationsApplicationAddKeyRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphKeyCredential.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_add_key(
        connection,
        service_principal_id,
        applications_application_add_key_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/addKey")
      |> add_param(:body, :body, applications_application_add_key_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphKeyCredential},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addPassword
  Add a strong password or secret to a servicePrincipal object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `service_principals_service_principal_add_password_request` (ServicePrincipalsServicePrincipalAddPasswordRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPasswordCredential.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_add_password(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ServicePrincipalsServicePrincipalAddPasswordRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphPasswordCredential.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_add_password(
        connection,
        service_principal_id,
        service_principals_service_principal_add_password_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/addPassword")
      |> add_param(:body, :body, service_principals_service_principal_add_password_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPasswordCredential},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addTokenSigningCertificate
  Create a self-signed signing certificate and return a selfSignedCertificate object, which is the public part of the generated certificate.  The self-signed signing certificate is composed of the following objects, which are added to the servicePrincipal:  + The keyCredentials object with the following objects:     + A private key object with usage set to Sign.     + A public key object with usage set to Verify. + The passwordCredentials object.  All the objects have the same value of customKeyIdentifier. The passwordCredential is used to open the PFX file (private key). It and the associated private key object have the same value of keyId. When set during creation through the displayName property, the subject of the certificate cannot be updated. The startDateTime is set to the same time the certificate is created using the action. The endDateTime can be up to three years after the certificate is created. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `service_principals_service_principal_add_token_signing_certificate_request` (ServicePrincipalsServicePrincipalAddTokenSigningCertificateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSelfSignedCertificate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_add_token_signing_certificate(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ServicePrincipalsServicePrincipalAddTokenSigningCertificateRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSelfSignedCertificate.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_add_token_signing_certificate(
        connection,
        service_principal_id,
        service_principals_service_principal_add_token_signing_certificate_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/addTokenSigningCertificate")
      |> add_param(
        :body,
        :body,
        service_principals_service_principal_add_token_signing_certificate_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSelfSignedCertificate},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action checkMemberGroups
  Check for membership in a specified list of group IDs, and return from that list those groups (identified by IDs) of which the specified user, group, service principal, organizational contact, device, or directory object is a member. This function is transitive. You can check up to a maximum of 20 groups per request. This function supports all groups provisioned in Microsoft Entra ID. Because Microsoft 365 groups cannot contain other groups, membership in a Microsoft 365 group is always direct. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `contracts_contract_check_member_groups_request` (ContractsContractCheckMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_check_member_groups(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ContractsContractCheckMemberGroupsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_check_member_groups(
        connection,
        service_principal_id,
        contracts_contract_check_member_groups_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/checkMemberGroups")
      |> add_param(:body, :body, contracts_contract_check_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action checkMemberObjects

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `directory_role_templates_directory_role_template_check_member_objects_request` (DirectoryRoleTemplatesDirectoryRoleTemplateCheckMemberObjectsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_check_member_objects(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.DirectoryRoleTemplatesDirectoryRoleTemplateCheckMemberObjectsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_check_member_objects(
        connection,
        service_principal_id,
        directory_role_templates_directory_role_template_check_member_objects_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/checkMemberObjects")
      |> add_param(
        :body,
        :body,
        directory_role_templates_directory_role_template_check_member_objects_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getMemberGroups
  Return all the group IDs for the groups that the specified user, group, service principal, organizational contact, device, or directory object is a member of. This function is transitive. This API returns up to 11,000 group IDs. If more than 11,000 results are available, it returns a 400 Bad Request error with the Directory_ResultSizeLimitExceeded error code. As a workaround, use the List group transitive memberOf API. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `contacts_org_contact_get_member_groups_request` (ContactsOrgContactGetMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_get_member_groups(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ContactsOrgContactGetMemberGroupsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_get_member_groups(
        connection,
        service_principal_id,
        contacts_org_contact_get_member_groups_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/getMemberGroups")
      |> add_param(:body, :body, contacts_org_contact_get_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getMemberObjects
  Return all IDs for the groups, administrative units, and directory roles that a user, group, service principal, organizational contact, device, or directory object is a member of. This function is transitive. Note: Only users and role-enabled groups can be members of directory roles. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `contacts_org_contact_get_member_groups_request` (ContactsOrgContactGetMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_get_member_objects(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ContactsOrgContactGetMemberGroupsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_get_member_objects(
        connection,
        service_principal_id,
        contacts_org_contact_get_member_groups_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/getMemberObjects")
      |> add_param(:body, :body, contacts_org_contact_get_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action removeKey
  Remove a key credential from a servicePrincipal. This method along with addKey can be used by a servicePrincipal to automate rolling its expiring keys. As part of the request validation for this method, a proof of possession of an existing key is verified before the action can be performed. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `service_principals_service_principal_remove_key_request` (ServicePrincipalsServicePrincipalRemoveKeyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_remove_key(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ServicePrincipalsServicePrincipalRemoveKeyRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_remove_key(
        connection,
        service_principal_id,
        service_principals_service_principal_remove_key_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/removeKey")
      |> add_param(:body, :body, service_principals_service_principal_remove_key_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action removePassword
  Remove a password from a servicePrincipal object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `applications_application_remove_password_request` (ApplicationsApplicationRemovePasswordRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_remove_password(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ApplicationsApplicationRemovePasswordRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_remove_password(
        connection,
        service_principal_id,
        applications_application_remove_password_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/removePassword")
      |> add_param(:body, :body, applications_application_remove_password_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restore
  Restore a recently deleted application, group, servicePrincipal, administrative unit, or user object from deleted items. If an item was accidentally deleted, you can fully restore the item. However, security groups cannot be restored. A recently deleted item remains available for up to 30 days. After 30 days, the item is permanently deleted. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_restore(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_restore(connection, service_principal_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/restore")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action acquireAccessToken
  Acquire an OAuth access token to authorize the Microsoft Entra provisioning service to provision users into an application. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `applications_application_synchronization_acquire_access_token_request` (ApplicationsApplicationSynchronizationAcquireAccessTokenRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_synchronization_acquire_access_token(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ApplicationsApplicationSynchronizationAcquireAccessTokenRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_synchronization_acquire_access_token(
        connection,
        service_principal_id,
        applications_application_synchronization_acquire_access_token_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/acquireAccessToken")
      |> add_param(
        :body,
        :body,
        applications_application_synchronization_acquire_access_token_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action pause
  Temporarily stop a running synchronization job. All the progress, including job state, is persisted, and the job will continue from where it left off when a start call is made. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_synchronization_jobs_synchronization_job_pause(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_synchronization_jobs_synchronization_job_pause(
        connection,
        service_principal_id,
        synchronization_job_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/pause"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action provisionOnDemand
  Select a user and provision the account on-demand. The rate limit for this API is 5 requests per 10 seconds.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `applications_application_synchronization_jobs_synchronization_job_provision_on_demand_request` (ApplicationsApplicationSynchronizationJobsSynchronizationJobProvisionOnDemandRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphStringKeyStringValuePair.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_synchronization_jobs_synchronization_job_provision_on_demand(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.ApplicationsApplicationSynchronizationJobsSynchronizationJobProvisionOnDemandRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphStringKeyStringValuePair.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_synchronization_jobs_synchronization_job_provision_on_demand(
        connection,
        service_principal_id,
        synchronization_job_id,
        applications_application_synchronization_jobs_synchronization_job_provision_on_demand_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/provisionOnDemand"
      )
      |> add_param(
        :body,
        :body,
        applications_application_synchronization_jobs_synchronization_job_provision_on_demand_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphStringKeyStringValuePair},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restart
  Restart a stopped synchronization job, forcing it to reprocess all the objects in the directory. Optionally clears existing the synchronization state and previous errors. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `service_principals_service_principal_synchronization_jobs_synchronization_job_restart_request` (ServicePrincipalsServicePrincipalSynchronizationJobsSynchronizationJobRestartRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_synchronization_jobs_synchronization_job_restart(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.ServicePrincipalsServicePrincipalSynchronizationJobsSynchronizationJobRestartRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_synchronization_jobs_synchronization_job_restart(
        connection,
        service_principal_id,
        synchronization_job_id,
        service_principals_service_principal_synchronization_jobs_synchronization_job_restart_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/restart"
      )
      |> add_param(
        :body,
        :body,
        service_principals_service_principal_synchronization_jobs_synchronization_job_restart_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action discover
  Discover the latest schema definition for provisioning to an application.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `directory_definition_id` (String.t): The unique identifier of directoryDefinition
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ApplicationsApplicationSynchronizationTemplatesSynchronizationTemplateSchemaDirectoriesDirectoryDefinitionDiscover2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_synchronization_jobs_synchronization_job_schema_directories_directory_definition_discover(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.ApplicationsApplicationSynchronizationTemplatesSynchronizationTemplateSchemaDirectoriesDirectoryDefinitionDiscover2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_synchronization_jobs_synchronization_job_schema_directories_directory_definition_discover(
        connection,
        service_principal_id,
        synchronization_job_id,
        directory_definition_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/schema/directories/#{directory_definition_id}/discover"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.ApplicationsApplicationSynchronizationTemplatesSynchronizationTemplateSchemaDirectoriesDirectoryDefinitionDiscover2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action parseExpression
  Parse a given string expression into an attributeMappingSource object. For more information about expressions, see Writing Expressions for Attribute Mappings in Microsoft Entra ID. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `applications_application_synchronization_jobs_synchronization_job_schema_parse_expression_request` (ApplicationsApplicationSynchronizationJobsSynchronizationJobSchemaParseExpressionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ApplicationsApplicationSynchronizationJobsSynchronizationJobSchemaParseExpression2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_synchronization_jobs_synchronization_job_schema_parse_expression(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.ApplicationsApplicationSynchronizationJobsSynchronizationJobSchemaParseExpressionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.ApplicationsApplicationSynchronizationJobsSynchronizationJobSchemaParseExpression2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_synchronization_jobs_synchronization_job_schema_parse_expression(
        connection,
        service_principal_id,
        synchronization_job_id,
        applications_application_synchronization_jobs_synchronization_job_schema_parse_expression_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/schema/parseExpression"
      )
      |> add_param(
        :body,
        :body,
        applications_application_synchronization_jobs_synchronization_job_schema_parse_expression_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.ApplicationsApplicationSynchronizationJobsSynchronizationJobSchemaParseExpression2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action start
  Start an existing synchronization job. If the job is in a paused state, it continues processing changes from the point where it was paused. If the job is in quarantine, the quarantine status is cleared. Don't create scripts to call the start job continuously while it's running because that can cause the service to stop running. Use the start job only when the job is currently paused or in quarantine.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_synchronization_jobs_synchronization_job_start(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_synchronization_jobs_synchronization_job_start(
        connection,
        service_principal_id,
        synchronization_job_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/start"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action validateCredentials
  Validate that the credentials are valid in the tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `applications_application_synchronization_jobs_synchronization_job_validate_credentials_request` (ApplicationsApplicationSynchronizationJobsSynchronizationJobValidateCredentialsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_synchronization_jobs_synchronization_job_validate_credentials(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.ApplicationsApplicationSynchronizationJobsSynchronizationJobValidateCredentialsRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_synchronization_jobs_synchronization_job_validate_credentials(
        connection,
        service_principal_id,
        synchronization_job_id,
        applications_application_synchronization_jobs_synchronization_job_validate_credentials_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/validateCredentials"
      )
      |> add_param(
        :body,
        :body,
        applications_application_synchronization_jobs_synchronization_job_validate_credentials_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action validateCredentials

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `applications_application_synchronization_jobs_synchronization_job_validate_credentials_request` (ApplicationsApplicationSynchronizationJobsSynchronizationJobValidateCredentialsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_synchronization_jobs_validate_credentials(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ApplicationsApplicationSynchronizationJobsSynchronizationJobValidateCredentialsRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_synchronization_jobs_validate_credentials(
        connection,
        service_principal_id,
        applications_application_synchronization_jobs_synchronization_job_validate_credentials_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/servicePrincipals/#{service_principal_id}/synchronization/jobs/validateCredentials"
      )
      |> add_param(
        :body,
        :body,
        applications_application_synchronization_jobs_synchronization_job_validate_credentials_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action discover
  Discover the latest schema definition for provisioning to an application.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `directory_definition_id` (String.t): The unique identifier of directoryDefinition
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ApplicationsApplicationSynchronizationTemplatesSynchronizationTemplateSchemaDirectoriesDirectoryDefinitionDiscover2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_synchronization_templates_synchronization_template_schema_directories_directory_definition_discover(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.ApplicationsApplicationSynchronizationTemplatesSynchronizationTemplateSchemaDirectoriesDirectoryDefinitionDiscover2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_synchronization_templates_synchronization_template_schema_directories_directory_definition_discover(
        connection,
        service_principal_id,
        synchronization_template_id,
        directory_definition_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}/schema/directories/#{directory_definition_id}/discover"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.ApplicationsApplicationSynchronizationTemplatesSynchronizationTemplateSchemaDirectoriesDirectoryDefinitionDiscover2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action parseExpression
  Parse a given string expression into an attributeMappingSource object. For more information about expressions, see Writing Expressions for Attribute Mappings in Microsoft Entra ID. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `applications_application_synchronization_jobs_synchronization_job_schema_parse_expression_request` (ApplicationsApplicationSynchronizationJobsSynchronizationJobSchemaParseExpressionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ApplicationsApplicationSynchronizationJobsSynchronizationJobSchemaParseExpression2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_service_principal_synchronization_templates_synchronization_template_schema_parse_expression(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.ApplicationsApplicationSynchronizationJobsSynchronizationJobSchemaParseExpressionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.ApplicationsApplicationSynchronizationJobsSynchronizationJobSchemaParseExpression2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_service_principal_synchronization_templates_synchronization_template_schema_parse_expression(
        connection,
        service_principal_id,
        synchronization_template_id,
        applications_application_synchronization_jobs_synchronization_job_schema_parse_expression_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}/schema/parseExpression"
      )
      |> add_param(
        :body,
        :body,
        applications_application_synchronization_jobs_synchronization_job_schema_parse_expression_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.ApplicationsApplicationSynchronizationJobsSynchronizationJobSchemaParseExpression2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action validateProperties
  Validate that a Microsoft 365 group's display name or mail nickname complies with naming policies.  Clients can use this API to determine whether a display name or mail nickname is valid before trying to create a Microsoft 365 group. To validate the properties of an existing group, use the group: validateProperties function. The following policy validations are performed for the display name and mail nickname properties: 1. Validate the prefix and suffix naming policy 2. Validate the custom banned words policy 3. Validate that the mail nickname is unique This API only returns the first validation failure that is encountered. If the properties fail multiple validations, only the first validation failure is returned. However, you can validate both the mail nickname and the display name and receive a collection of validation errors if you are only validating the prefix and suffix naming policy. To learn more about configuring naming policies, see Configure naming policy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contacts_validate_properties_request` (ContactsValidatePropertiesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_validate_properties(
          Tesla.Env.client(),
          MicrosoftGraph.Model.ContactsValidatePropertiesRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def service_principals_validate_properties(
        connection,
        contacts_validate_properties_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/validateProperties")
      |> add_param(:body, :body, contacts_validate_properties_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
