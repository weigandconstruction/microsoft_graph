# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceManagementManagedDevice do
  @moduledoc """
  API calls for all endpoints tagged `DeviceManagementManagedDevice`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create managedDevice
  Create a new managedDevice object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_managed_device` (MicrosoftGraphManagedDevice): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedDevice.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_create_managed_devices(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphManagedDevice.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedDevice.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_create_managed_devices(connection, microsoft_graph_managed_device, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices")
      |> add_param(:body, :body, microsoft_graph_managed_device)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedDevice},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete managedDevice
  Deletes a managedDevice.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_delete_managed_devices(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_delete_managed_devices(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get managedDevice
  Read properties and relationships of the managedDevice object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedDevice.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_get_managed_devices(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedDevice.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_get_managed_devices(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedDevice},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List managedDevices
  List properties and relationships of the managedDevice objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedDeviceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_list_managed_devices(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedDeviceCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_management_list_managed_devices(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedDeviceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to deviceCompliancePolicyStates for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `microsoft_graph_device_compliance_policy_state` (MicrosoftGraphDeviceCompliancePolicyState): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_create_device_compliance_policy_states(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyState.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyState.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_create_device_compliance_policy_states(connection, managed_device_id, microsoft_graph_device_compliance_policy_state, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceCompliancePolicyStates")
      |> add_param(:body, :body, microsoft_graph_device_compliance_policy_state)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to deviceConfigurationStates for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `microsoft_graph_device_configuration_state` (MicrosoftGraphDeviceConfigurationState): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_create_device_configuration_states(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationState.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationState.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_create_device_configuration_states(connection, managed_device_id, microsoft_graph_device_configuration_state, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceConfigurationStates")
      |> add_param(:body, :body, microsoft_graph_device_configuration_state)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to logCollectionRequests for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `microsoft_graph_device_log_collection_response` (MicrosoftGraphDeviceLogCollectionResponse): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_create_log_collection_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponse.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_create_log_collection_requests(connection, managed_device_id, microsoft_graph_device_log_collection_response, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/logCollectionRequests")
      |> add_param(:body, :body, microsoft_graph_device_log_collection_response)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property deviceCategory for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_delete_device_category(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_delete_device_category(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceCategory")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property deviceCompliancePolicyStates for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_compliance_policy_state_id` (String.t): The unique identifier of deviceCompliancePolicyState
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_delete_device_compliance_policy_states(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_delete_device_compliance_policy_states(connection, managed_device_id, device_compliance_policy_state_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceCompliancePolicyStates/#{device_compliance_policy_state_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property deviceConfigurationStates for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_configuration_state_id` (String.t): The unique identifier of deviceConfigurationState
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_delete_device_configuration_states(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_delete_device_configuration_states(connection, managed_device_id, device_configuration_state_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceConfigurationStates/#{device_configuration_state_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property logCollectionRequests for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_log_collection_response_id` (String.t): The unique identifier of deviceLogCollectionResponse
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_delete_log_collection_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_delete_log_collection_requests(connection, managed_device_id, device_log_collection_response_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/logCollectionRequests/#{device_log_collection_response_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property windowsProtectionState for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_delete_windows_protection_state(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_delete_windows_protection_state(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/windowsProtectionState")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_device_compliance_policy_states_get_count_dafa(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_device_compliance_policy_states_get_count_dafa(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceCompliancePolicyStates/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_device_configuration_states_get_count_a01e(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_device_configuration_states_get_count_a01e(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceConfigurationStates/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_get_count8108(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_get_count8108(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceCategory
  Read properties and relationships of the deviceCategory object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_get_device_category(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_get_device_category(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceCategory")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceCompliancePolicyStates from deviceManagement
  Device compliance policy states for this device.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_compliance_policy_state_id` (String.t): The unique identifier of deviceCompliancePolicyState
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_get_device_compliance_policy_states(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyState.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_get_device_compliance_policy_states(connection, managed_device_id, device_compliance_policy_state_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceCompliancePolicyStates/#{device_compliance_policy_state_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceConfigurationStates from deviceManagement
  Device configuration states for this device.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_configuration_state_id` (String.t): The unique identifier of deviceConfigurationState
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_get_device_configuration_states(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationState.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_get_device_configuration_states(connection, managed_device_id, device_configuration_state_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceConfigurationStates/#{device_configuration_state_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get logCollectionRequests from deviceManagement
  List of log collection requests

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_log_collection_response_id` (String.t): The unique identifier of deviceLogCollectionResponse
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_get_log_collection_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_get_log_collection_requests(connection, managed_device_id, device_log_collection_response_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/logCollectionRequests/#{device_log_collection_response_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get windowsProtectionState
  Read properties and relationships of the windowsProtectionState object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsProtectionState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_get_windows_protection_state(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsProtectionState.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_get_windows_protection_state(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/windowsProtectionState")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsProtectionState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceCompliancePolicyStates from deviceManagement
  Device compliance policy states for this device.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyStateCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_list_device_compliance_policy_states(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyStateCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_list_device_compliance_policy_states(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceCompliancePolicyStates")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyStateCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceConfigurationStates from deviceManagement
  Device configuration states for this device.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationStateCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_list_device_configuration_states(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationStateCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_list_device_configuration_states(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceConfigurationStates")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationStateCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get logCollectionRequests from deviceManagement
  List of log collection requests

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponseCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_list_log_collection_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponseCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_list_log_collection_requests(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/logCollectionRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponseCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List users
  List properties and relationships of the user objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_list_users(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUserCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_list_users(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/users")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_log_collection_requests_get_count78aa(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_log_collection_requests_get_count78aa(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/logCollectionRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceCategory
  Update the properties of a deviceCategory object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `microsoft_graph_device_category` (MicrosoftGraphDeviceCategory): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_update_device_category(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceCategory.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_update_device_category(connection, managed_device_id, microsoft_graph_device_category, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceCategory")
      |> add_param(:body, :body, microsoft_graph_device_category)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property deviceCompliancePolicyStates in deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_compliance_policy_state_id` (String.t): The unique identifier of deviceCompliancePolicyState
  - `microsoft_graph_device_compliance_policy_state` (MicrosoftGraphDeviceCompliancePolicyState): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_update_device_compliance_policy_states(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyState.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyState.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_update_device_compliance_policy_states(connection, managed_device_id, device_compliance_policy_state_id, microsoft_graph_device_compliance_policy_state, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceCompliancePolicyStates/#{device_compliance_policy_state_id}")
      |> add_param(:body, :body, microsoft_graph_device_compliance_policy_state)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property deviceConfigurationStates in deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_configuration_state_id` (String.t): The unique identifier of deviceConfigurationState
  - `microsoft_graph_device_configuration_state` (MicrosoftGraphDeviceConfigurationState): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_update_device_configuration_states(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationState.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationState.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_update_device_configuration_states(connection, managed_device_id, device_configuration_state_id, microsoft_graph_device_configuration_state, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deviceConfigurationStates/#{device_configuration_state_id}")
      |> add_param(:body, :body, microsoft_graph_device_configuration_state)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property logCollectionRequests in deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_log_collection_response_id` (String.t): The unique identifier of deviceLogCollectionResponse
  - `microsoft_graph_device_log_collection_response` (MicrosoftGraphDeviceLogCollectionResponse): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_update_log_collection_requests(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponse.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_update_log_collection_requests(connection, managed_device_id, device_log_collection_response_id, microsoft_graph_device_log_collection_response, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/logCollectionRequests/#{device_log_collection_response_id}")
      |> add_param(:body, :body, microsoft_graph_device_log_collection_response)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceLogCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update windowsProtectionState
  Update the properties of a windowsProtectionState object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `microsoft_graph_windows_protection_state` (MicrosoftGraphWindowsProtectionState): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsProtectionState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_update_windows_protection_state(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphWindowsProtectionState.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsProtectionState.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_update_windows_protection_state(connection, managed_device_id, microsoft_graph_windows_protection_state, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/windowsProtectionState")
      |> add_param(:body, :body, microsoft_graph_windows_protection_state)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsProtectionState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create windowsDeviceMalwareState
  Create a new windowsDeviceMalwareState object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `microsoft_graph_windows_device_malware_state` (MicrosoftGraphWindowsDeviceMalwareState): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_windows_protection_state_create_detected_malware_state(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareState.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareState.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_windows_protection_state_create_detected_malware_state(connection, managed_device_id, microsoft_graph_windows_device_malware_state, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/windowsProtectionState/detectedMalwareState")
      |> add_param(:body, :body, microsoft_graph_windows_device_malware_state)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete windowsDeviceMalwareState
  Deletes a windowsDeviceMalwareState.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `windows_device_malware_state_id` (String.t): The unique identifier of windowsDeviceMalwareState
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_windows_protection_state_delete_detected_malware_state(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_windows_protection_state_delete_detected_malware_state(connection, managed_device_id, windows_device_malware_state_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/windowsProtectionState/detectedMalwareState/#{windows_device_malware_state_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_windows_protection_state_detected_malware_state_get_count59c4(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_windows_protection_state_detected_malware_state_get_count59c4(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/windowsProtectionState/detectedMalwareState/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get windowsDeviceMalwareState
  Read properties and relationships of the windowsDeviceMalwareState object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `windows_device_malware_state_id` (String.t): The unique identifier of windowsDeviceMalwareState
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_windows_protection_state_get_detected_malware_state(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareState.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_windows_protection_state_get_detected_malware_state(connection, managed_device_id, windows_device_malware_state_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/windowsProtectionState/detectedMalwareState/#{windows_device_malware_state_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List windowsDeviceMalwareStates
  List properties and relationships of the windowsDeviceMalwareState objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareStateCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_windows_protection_state_list_detected_malware_state(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareStateCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_windows_protection_state_list_detected_malware_state(connection, managed_device_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/windowsProtectionState/detectedMalwareState")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareStateCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update windowsDeviceMalwareState
  Update the properties of a windowsDeviceMalwareState object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `windows_device_malware_state_id` (String.t): The unique identifier of windowsDeviceMalwareState
  - `microsoft_graph_windows_device_malware_state` (MicrosoftGraphWindowsDeviceMalwareState): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareState.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_windows_protection_state_update_detected_malware_state(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareState.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareState.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_windows_protection_state_update_detected_malware_state(connection, managed_device_id, windows_device_malware_state_id, microsoft_graph_windows_device_malware_state, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/windowsProtectionState/detectedMalwareState/#{windows_device_malware_state_id}")
      |> add_param(:body, :body, microsoft_graph_windows_device_malware_state)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsDeviceMalwareState},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update managedDevice
  Update the properties of a managedDevice object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `microsoft_graph_managed_device` (MicrosoftGraphManagedDevice): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedDevice.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_update_managed_devices(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphManagedDevice.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedDevice.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_update_managed_devices(connection, managed_device_id, microsoft_graph_managed_device, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}")
      |> add_param(:body, :body, microsoft_graph_managed_device)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedDevice},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
