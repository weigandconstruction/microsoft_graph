# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.SitesContentType do
  @moduledoc """
  API calls for all endpoints tagged `SitesContentType`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_base_types_get_count6b07(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_base_types_get_count6b07(connection, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/baseTypes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_column_links_get_count7bc1(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_column_links_get_count7bc1(connection, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_column_positions_get_count_dea9(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_column_positions_get_count_dea9(connection, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columnPositions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_columns_get_count896b(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_columns_get_count896b(connection, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columns/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sourceColumn from sites
  The source column for the content type column.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_columns_get_source_column(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_columns_get_source_column(connection, site_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}/sourceColumn")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to columnLinks for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_column_link` (MicrosoftGraphColumnLink): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_create_column_links(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def sites_content_types_create_column_links(connection, site_id, content_type_id, microsoft_graph_column_link, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks")
      |> add_param(:body, :body, microsoft_graph_column_link)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a columnDefinition in a content type
  Add a column to a content type][contentType] in a site, or a list with a request that specifies a [columnDefinition][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_create_columns(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_create_columns(connection, site_id, content_type_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columns")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property columnLinks for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_delete_column_links(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_delete_column_links(connection, site_id, content_type_id, column_link_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete columnDefinition
  Remove a column][columndefinition] from a [site][], a [list][], or a [content type][contentType]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_delete_columns(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_delete_columns(connection, site_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get base from sites
  Parent contentType from which this content type is derived.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_get_base(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_get_base(connection, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/base")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get baseTypes from sites
  The collection of content types that are ancestors of this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `content_type_id1` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_get_base_types(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_get_base_types(connection, site_id, content_type_id, content_type_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/baseTypes/#{content_type_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnLinks from sites
  The collection of columns that are required by this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_get_column_links(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def sites_content_types_get_column_links(connection, site_id, content_type_id, column_link_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnPositions from sites
  Column order information in a content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_get_column_positions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_get_column_positions(connection, site_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columnPositions/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnDefinition
  Retrieve the metadata for a site][], a [list][], or a [contentType][] [column][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_get_columns(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_get_columns(connection, site_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_get_count50aa(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_get_count50aa(connection, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get baseTypes from sites
  The collection of content types that are ancestors of this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_list_base_types(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_list_base_types(connection, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/baseTypes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnLinks from sites
  The collection of columns that are required by this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_list_column_links(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_list_column_links(connection, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnPositions from sites
  Column order information in a content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_list_column_positions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def sites_content_types_list_column_positions(connection, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columnPositions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List columnDefinitions in a content type
  Get the collection of columns represented as columnDefinition][columnDefinition] resources in a [content type][contentType]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_list_columns(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def sites_content_types_list_columns(connection, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columns")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property columnLinks in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `microsoft_graph_column_link` (MicrosoftGraphColumnLink): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_update_column_links(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def sites_content_types_update_column_links(connection, site_id, content_type_id, column_link_id, microsoft_graph_column_link, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_param(:body, :body, microsoft_graph_column_link)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update columnDefinition
  Update a site][], a [list][], or a [content type][contentType] [column][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_content_types_update_columns(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_content_types_update_columns(connection, site_id, content_type_id, column_definition_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a content type
  Create a new contentType][] in a [site][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_content_type` (MicrosoftGraphContentType): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_create_content_types(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphContentType.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_create_content_types(connection, site_id, microsoft_graph_content_type, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/contentTypes")
      |> add_param(:body, :body, microsoft_graph_content_type)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete contentType
  Remove a content type][contentType] from a [list][] or a [site][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_delete_content_types(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_delete_content_types(connection, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentType
  Retrieve the metadata for a content type][contentType] in a [site][] or a [list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_get_content_types(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_get_content_types(connection, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List contentTypes in a site
  Get the collection of contentType][contentType] resources in a [site][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_list_content_types(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_list_content_types(connection, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/contentTypes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update contentType
  Update a content type][contentType]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_content_type` (MicrosoftGraphContentType): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_update_content_types(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphContentType.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_update_content_types(connection, site_id, content_type_id, microsoft_graph_content_type, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/contentTypes/#{content_type_id}")
      |> add_param(:body, :body, microsoft_graph_content_type)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
