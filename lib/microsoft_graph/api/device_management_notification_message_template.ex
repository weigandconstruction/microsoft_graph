# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceManagementNotificationMessageTemplate do
  @moduledoc """
  API calls for all endpoints tagged `DeviceManagementNotificationMessageTemplate`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create notificationMessageTemplate
  Create a new notificationMessageTemplate object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_notification_message_template` (MicrosoftGraphNotificationMessageTemplate): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_create_notification_message_templates(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplate.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplate.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_create_notification_message_templates(
        connection,
        microsoft_graph_notification_message_template,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/notificationMessageTemplates")
      |> add_param(:body, :body, microsoft_graph_notification_message_template)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplate},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete notificationMessageTemplate
  Deletes a notificationMessageTemplate.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notification_message_template_id` (String.t): The unique identifier of notificationMessageTemplate
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_delete_notification_message_templates(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_delete_notification_message_templates(
        connection,
        notification_message_template_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/notificationMessageTemplates/#{notification_message_template_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get notificationMessageTemplate
  Read properties and relationships of the notificationMessageTemplate object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notification_message_template_id` (String.t): The unique identifier of notificationMessageTemplate
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_get_notification_message_templates(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplate.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_get_notification_message_templates(
        connection,
        notification_message_template_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/notificationMessageTemplates/#{notification_message_template_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplate},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List notificationMessageTemplates
  List properties and relationships of the notificationMessageTemplate objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplateCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_list_notification_message_templates(Tesla.Env.client(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplateCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_list_notification_message_templates(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/notificationMessageTemplates")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplateCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create localizedNotificationMessage
  Create a new localizedNotificationMessage object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notification_message_template_id` (String.t): The unique identifier of notificationMessageTemplate
  - `microsoft_graph_localized_notification_message` (MicrosoftGraphLocalizedNotificationMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_notification_message_templates_create_localized_notification_messages(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_notification_message_templates_create_localized_notification_messages(
        connection,
        notification_message_template_id,
        microsoft_graph_localized_notification_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/deviceManagement/notificationMessageTemplates/#{notification_message_template_id}/localizedNotificationMessages"
      )
      |> add_param(:body, :body, microsoft_graph_localized_notification_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete localizedNotificationMessage
  Deletes a localizedNotificationMessage.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notification_message_template_id` (String.t): The unique identifier of notificationMessageTemplate
  - `localized_notification_message_id` (String.t): The unique identifier of localizedNotificationMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_notification_message_templates_delete_localized_notification_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_notification_message_templates_delete_localized_notification_messages(
        connection,
        notification_message_template_id,
        localized_notification_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceManagement/notificationMessageTemplates/#{notification_message_template_id}/localizedNotificationMessages/#{localized_notification_message_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_notification_message_templates_get_count1654(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_notification_message_templates_get_count1654(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/notificationMessageTemplates/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get localizedNotificationMessage
  Read properties and relationships of the localizedNotificationMessage object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notification_message_template_id` (String.t): The unique identifier of notificationMessageTemplate
  - `localized_notification_message_id` (String.t): The unique identifier of localizedNotificationMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_notification_message_templates_get_localized_notification_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_notification_message_templates_get_localized_notification_messages(
        connection,
        notification_message_template_id,
        localized_notification_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/notificationMessageTemplates/#{notification_message_template_id}/localizedNotificationMessages/#{localized_notification_message_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List localizedNotificationMessages
  List properties and relationships of the localizedNotificationMessage objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notification_message_template_id` (String.t): The unique identifier of notificationMessageTemplate
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_notification_message_templates_list_localized_notification_messages(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessageCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def device_management_notification_message_templates_list_localized_notification_messages(
        connection,
        notification_message_template_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/notificationMessageTemplates/#{notification_message_template_id}/localizedNotificationMessages"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notification_message_template_id` (String.t): The unique identifier of notificationMessageTemplate
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_notification_message_templates_localized_notification_messages_get_count_dee6(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_notification_message_templates_localized_notification_messages_get_count_dee6(
        connection,
        notification_message_template_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/notificationMessageTemplates/#{notification_message_template_id}/localizedNotificationMessages/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update localizedNotificationMessage
  Update the properties of a localizedNotificationMessage object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notification_message_template_id` (String.t): The unique identifier of notificationMessageTemplate
  - `localized_notification_message_id` (String.t): The unique identifier of localizedNotificationMessage
  - `microsoft_graph_localized_notification_message` (MicrosoftGraphLocalizedNotificationMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_notification_message_templates_update_localized_notification_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_notification_message_templates_update_localized_notification_messages(
        connection,
        notification_message_template_id,
        localized_notification_message_id,
        microsoft_graph_localized_notification_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceManagement/notificationMessageTemplates/#{notification_message_template_id}/localizedNotificationMessages/#{localized_notification_message_id}"
      )
      |> add_param(:body, :body, microsoft_graph_localized_notification_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphLocalizedNotificationMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update notificationMessageTemplate
  Update the properties of a notificationMessageTemplate object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notification_message_template_id` (String.t): The unique identifier of notificationMessageTemplate
  - `microsoft_graph_notification_message_template` (MicrosoftGraphNotificationMessageTemplate): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_update_notification_message_templates(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplate.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplate.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_update_notification_message_templates(
        connection,
        notification_message_template_id,
        microsoft_graph_notification_message_template,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/notificationMessageTemplates/#{notification_message_template_id}")
      |> add_param(:body, :body, microsoft_graph_notification_message_template)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotificationMessageTemplate},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
