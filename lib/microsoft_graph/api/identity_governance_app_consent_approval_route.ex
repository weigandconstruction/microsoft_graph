# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.IdentityGovernanceAppConsentApprovalRoute do
  @moduledoc """
  API calls for all endpoints tagged `IdentityGovernanceAppConsentApprovalRoute`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create new navigation property to userConsentRequests for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `microsoft_graph_user_consent_request` (MicrosoftGraphUserConsentRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserConsentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_create_user_consent_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUserConsentRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserConsentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_create_user_consent_requests(connection, app_consent_request_id, microsoft_graph_user_consent_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests")
      |> add_param(:body, :body, microsoft_graph_user_consent_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserConsentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property userConsentRequests for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_delete_user_consent_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_delete_user_consent_requests(connection, app_consent_request_id, user_consent_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_get_count_d9b5(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_get_count_d9b5(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get userConsentRequest
  Read the properties and relationships of a userConsentRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserConsentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_get_user_consent_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserConsentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_get_user_consent_requests(connection, app_consent_request_id, user_consent_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserConsentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List userConsentRequests
  Retrieve a collection of userConsentRequest objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserConsentRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_list_user_consent_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserConsentRequestCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_list_user_consent_requests(connection, app_consent_request_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserConsentRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property userConsentRequests in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `microsoft_graph_user_consent_request` (MicrosoftGraphUserConsentRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserConsentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_update_user_consent_requests(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUserConsentRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserConsentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_update_user_consent_requests(connection, app_consent_request_id, user_consent_request_id, microsoft_graph_user_consent_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}")
      |> add_param(:body, :body, microsoft_graph_user_consent_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserConsentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to stages for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `microsoft_graph_approval_stage` (MicrosoftGraphApprovalStage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_create_stages(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_create_stages(connection, app_consent_request_id, user_consent_request_id, microsoft_graph_approval_stage, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}/approval/stages")
      |> add_param(:body, :body, microsoft_graph_approval_stage)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property stages for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `approval_stage_id` (String.t): The unique identifier of approvalStage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_delete_stages(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_delete_stages(connection, app_consent_request_id, user_consent_request_id, approval_stage_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}/approval/stages/#{approval_stage_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get approvalStage
  Retrieve the properties of an approvalStage object. An approval stage is contained within an approval object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `approval_stage_id` (String.t): The unique identifier of approvalStage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_get_stages(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_get_stages(connection, app_consent_request_id, user_consent_request_id, approval_stage_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}/approval/stages/#{approval_stage_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List approval stages
  List the approvalStage objects associated with an approval. This API request is made by an approver in the following scenarios: In Microsoft Entra entitlement management, providing the identifier of the access package assignment request. In PIM for groups, providing the identifier of the assignment schedule request. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_list_stages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStageCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_list_stages(connection, app_consent_request_id, user_consent_request_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}/approval/stages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_stages_get_count3a21(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_stages_get_count3a21(connection, app_consent_request_id, user_consent_request_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}/approval/stages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update approvalStage
  Approve or deny an approvalStage object in an approval. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `approval_stage_id` (String.t): The unique identifier of approvalStage
  - `microsoft_graph_approval_stage` (MicrosoftGraphApprovalStage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_update_stages(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_user_consent_requests_approval_update_stages(connection, app_consent_request_id, user_consent_request_id, approval_stage_id, microsoft_graph_approval_stage, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}/approval/stages/#{approval_stage_id}")
      |> add_param(:body, :body, microsoft_graph_approval_stage)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property approval for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_user_consent_requests_delete_approval(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_user_consent_requests_delete_approval(connection, app_consent_request_id, user_consent_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}/approval")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get approval from identityGovernance
  Approval decisions associated with a request.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_user_consent_requests_get_approval(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_user_consent_requests_get_approval(connection, app_consent_request_id, user_consent_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}/approval")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApproval},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_user_consent_requests_get_count_cf9d(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_user_consent_requests_get_count_cf9d(connection, app_consent_request_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property approval in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `user_consent_request_id` (String.t): The unique identifier of userConsentRequest
  - `microsoft_graph_approval` (MicrosoftGraphApproval): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_user_consent_requests_update_approval(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphApproval.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_user_consent_requests_update_approval(connection, app_consent_request_id, user_consent_request_id, microsoft_graph_approval, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/#{user_consent_request_id}/approval")
      |> add_param(:body, :body, microsoft_graph_approval)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApproval},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to appConsentRequests for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_app_consent_request` (MicrosoftGraphAppConsentRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_create_app_consent_requests(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAppConsentRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_create_app_consent_requests(connection, microsoft_graph_app_consent_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/appConsent/appConsentRequests")
      |> add_param(:body, :body, microsoft_graph_app_consent_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppConsentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property appConsentRequests for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_delete_app_consent_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_delete_app_consent_requests(connection, app_consent_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appConsentRequest
  Read the properties and relationships of an appConsentRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_get_app_consent_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_get_app_consent_requests(connection, app_consent_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppConsentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List appConsentRequests
  Retrieve appConsentRequest objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_list_app_consent_requests(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentRequestCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_list_app_consent_requests(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppConsentRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property appConsentRequests in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `microsoft_graph_app_consent_request` (MicrosoftGraphAppConsentRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_update_app_consent_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAppConsentRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_update_app_consent_requests(connection, app_consent_request_id, microsoft_graph_app_consent_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}")
      |> add_param(:body, :body, microsoft_graph_app_consent_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppConsentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property appConsent for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_delete_app_consent(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_delete_app_consent(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/appConsent")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appConsent from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentApprovalRoute.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_get_app_consent(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentApprovalRoute.t} | {:error, Tesla.Env.t}
  def identity_governance_get_app_consent(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppConsentApprovalRoute},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property appConsent in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_app_consent_approval_route` (MicrosoftGraphAppConsentApprovalRoute): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentApprovalRoute.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_update_app_consent(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAppConsentApprovalRoute.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAppConsentApprovalRoute.t} | {:error, Tesla.Env.t}
  def identity_governance_update_app_consent(connection, microsoft_graph_app_consent_approval_route, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/appConsent")
      |> add_param(:body, :body, microsoft_graph_app_consent_approval_route)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppConsentApprovalRoute},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
