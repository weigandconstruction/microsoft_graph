# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.TenantRelationshipsDelegatedAdminCustomer do
  @moduledoc """
  API calls for all endpoints tagged `TenantRelationshipsDelegatedAdminCustomer`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create new navigation property to delegatedAdminCustomers for tenantRelationships

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_delegated_admin_customer` (MicrosoftGraphDelegatedAdminCustomer): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_create_delegated_admin_customers(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomer.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomer.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_create_delegated_admin_customers(
        connection,
        microsoft_graph_delegated_admin_customer,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/tenantRelationships/delegatedAdminCustomers")
      |> add_param(:body, :body, microsoft_graph_delegated_admin_customer)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomer},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to serviceManagementDetails for tenantRelationships

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_customer_id` (String.t): The unique identifier of delegatedAdminCustomer
  - `microsoft_graph_delegated_admin_service_management_detail` (MicrosoftGraphDelegatedAdminServiceManagementDetail): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_customers_create_service_management_details(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetail.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetail.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_customers_create_service_management_details(
        connection,
        delegated_admin_customer_id,
        microsoft_graph_delegated_admin_service_management_detail,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/tenantRelationships/delegatedAdminCustomers/#{delegated_admin_customer_id}/serviceManagementDetails"
      )
      |> add_param(:body, :body, microsoft_graph_delegated_admin_service_management_detail)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property serviceManagementDetails for tenantRelationships

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_customer_id` (String.t): The unique identifier of delegatedAdminCustomer
  - `delegated_admin_service_management_detail_id` (String.t): The unique identifier of delegatedAdminServiceManagementDetail
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_customers_delete_service_management_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_customers_delete_service_management_details(
        connection,
        delegated_admin_customer_id,
        delegated_admin_service_management_detail_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/tenantRelationships/delegatedAdminCustomers/#{delegated_admin_customer_id}/serviceManagementDetails/#{delegated_admin_service_management_detail_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_customers_get_count_e293(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_customers_get_count_e293(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/tenantRelationships/delegatedAdminCustomers/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceManagementDetails from tenantRelationships
  Contains the management details of a service in the customer tenant that's managed by delegated administration.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_customer_id` (String.t): The unique identifier of delegatedAdminCustomer
  - `delegated_admin_service_management_detail_id` (String.t): The unique identifier of delegatedAdminServiceManagementDetail
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_customers_get_service_management_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetail.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_customers_get_service_management_details(
        connection,
        delegated_admin_customer_id,
        delegated_admin_service_management_detail_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminCustomers/#{delegated_admin_customer_id}/serviceManagementDetails/#{delegated_admin_service_management_detail_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List serviceManagementDetails
  Get a list of the delegatedAdminServiceManagementDetail objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_customer_id` (String.t): The unique identifier of delegatedAdminCustomer
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetailCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_customers_list_service_management_details(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetailCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_customers_list_service_management_details(
        connection,
        delegated_admin_customer_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminCustomers/#{delegated_admin_customer_id}/serviceManagementDetails"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetailCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_customer_id` (String.t): The unique identifier of delegatedAdminCustomer
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_customers_service_management_details_get_count_d662(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_customers_service_management_details_get_count_d662(
        connection,
        delegated_admin_customer_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/tenantRelationships/delegatedAdminCustomers/#{delegated_admin_customer_id}/serviceManagementDetails/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property serviceManagementDetails in tenantRelationships

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_customer_id` (String.t): The unique identifier of delegatedAdminCustomer
  - `delegated_admin_service_management_detail_id` (String.t): The unique identifier of delegatedAdminServiceManagementDetail
  - `microsoft_graph_delegated_admin_service_management_detail` (MicrosoftGraphDelegatedAdminServiceManagementDetail): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetail.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delegated_admin_customers_update_service_management_details(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetail.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetail.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delegated_admin_customers_update_service_management_details(
        connection,
        delegated_admin_customer_id,
        delegated_admin_service_management_detail_id,
        microsoft_graph_delegated_admin_service_management_detail,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/tenantRelationships/delegatedAdminCustomers/#{delegated_admin_customer_id}/serviceManagementDetails/#{delegated_admin_service_management_detail_id}"
      )
      |> add_param(:body, :body, microsoft_graph_delegated_admin_service_management_detail)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminServiceManagementDetail},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property delegatedAdminCustomers for tenantRelationships

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_customer_id` (String.t): The unique identifier of delegatedAdminCustomer
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_delete_delegated_admin_customers(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_delete_delegated_admin_customers(
        connection,
        delegated_admin_customer_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/tenantRelationships/delegatedAdminCustomers/#{delegated_admin_customer_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get delegatedAdminCustomer
  Read the properties of a delegatedAdminCustomer object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_customer_id` (String.t): The unique identifier of delegatedAdminCustomer
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_get_delegated_admin_customers(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomer.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_get_delegated_admin_customers(
        connection,
        delegated_admin_customer_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/tenantRelationships/delegatedAdminCustomers/#{delegated_admin_customer_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomer},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List delegatedAdminCustomers
  Get a list of the delegatedAdminCustomer objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomerCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_list_delegated_admin_customers(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomerCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_list_delegated_admin_customers(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/tenantRelationships/delegatedAdminCustomers")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomerCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property delegatedAdminCustomers in tenantRelationships

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `delegated_admin_customer_id` (String.t): The unique identifier of delegatedAdminCustomer
  - `microsoft_graph_delegated_admin_customer` (MicrosoftGraphDelegatedAdminCustomer): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec tenant_relationships_update_delegated_admin_customers(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomer.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomer.t()}
          | {:error, Tesla.Env.t()}
  def tenant_relationships_update_delegated_admin_customers(
        connection,
        delegated_admin_customer_id,
        microsoft_graph_delegated_admin_customer,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/tenantRelationships/delegatedAdminCustomers/#{delegated_admin_customer_id}")
      |> add_param(:body, :body, microsoft_graph_delegated_admin_customer)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDelegatedAdminCustomer},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
