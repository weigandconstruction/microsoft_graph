# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.ServicePrincipalsSynchronization do
  @moduledoc """
  API calls for all endpoints tagged `ServicePrincipalsSynchronization`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property synchronization for servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_delete_synchronization(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_delete_synchronization(connection, service_principal_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get synchronization from servicePrincipals
  Represents the capability for Microsoft Entra identity synchronization through the Microsoft Graph API.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_get_synchronization(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronization.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_get_synchronization(connection, service_principal_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create synchronizationJob
  Create new synchronization job with a default synchronization schema. The job is created in a disabled state. Call Start job to start synchronization. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `microsoft_graph_synchronization_job` (MicrosoftGraphSynchronizationJob): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationJob.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_create_jobs(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSynchronizationJob.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationJob.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_create_jobs(connection, service_principal_id, microsoft_graph_synchronization_job, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs")
      |> add_param(:body, :body, microsoft_graph_synchronization_job)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationJob},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to templates for servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `microsoft_graph_synchronization_template` (MicrosoftGraphSynchronizationTemplate): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_create_templates(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplate.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplate.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_create_templates(connection, service_principal_id, microsoft_graph_synchronization_template, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates")
      |> add_param(:body, :body, microsoft_graph_synchronization_template)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplate},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete synchronizationJob
  Stop the synchronization job, and permanently delete all the state associated with it. Synchronized accounts are left as-is. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_delete_jobs(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_delete_jobs(connection, service_principal_id, synchronization_job_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property templates for servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_delete_templates(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_delete_templates(connection, service_principal_id, synchronization_template_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get synchronizationJob
  Retrieve the existing synchronization job and its properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationJob.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_get_jobs(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationJob.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_get_jobs(connection, service_principal_id, synchronization_job_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationJob},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get templates from servicePrincipals
  Preconfigured synchronization settings for a particular application.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_get_templates(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplate.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_get_templates(connection, service_principal_id, synchronization_template_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplate},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property schema for servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_jobs_delete_schema(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_jobs_delete_schema(connection, service_principal_id, synchronization_job_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/schema")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_jobs_get_count5eba(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_jobs_get_count5eba(connection, service_principal_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get synchronizationSchema
  Retrieve the schema for a given synchronization job or template. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_jobs_get_schema(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_jobs_get_schema(connection, service_principal_id, synchronization_job_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/schema")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to directories for servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `microsoft_graph_directory_definition` (MicrosoftGraphDirectoryDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_jobs_schema_create_directories(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_jobs_schema_create_directories(connection, service_principal_id, synchronization_job_id, microsoft_graph_directory_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/schema/directories")
      |> add_param(:body, :body, microsoft_graph_directory_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property directories for servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `directory_definition_id` (String.t): The unique identifier of directoryDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_jobs_schema_delete_directories(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_jobs_schema_delete_directories(connection, service_principal_id, synchronization_job_id, directory_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/schema/directories/#{directory_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_jobs_schema_directories_get_count_af56(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_jobs_schema_directories_get_count_af56(connection, service_principal_id, synchronization_job_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/schema/directories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directories from servicePrincipals
  Contains the collection of directories and all of their objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `directory_definition_id` (String.t): The unique identifier of directoryDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_jobs_schema_get_directories(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_jobs_schema_get_directories(connection, service_principal_id, synchronization_job_id, directory_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/schema/directories/#{directory_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directories from servicePrincipals
  Contains the collection of directories and all of their objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_jobs_schema_list_directories(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_jobs_schema_list_directories(connection, service_principal_id, synchronization_job_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/schema/directories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property directories in servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `directory_definition_id` (String.t): The unique identifier of directoryDefinition
  - `microsoft_graph_directory_definition` (MicrosoftGraphDirectoryDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_jobs_schema_update_directories(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_jobs_schema_update_directories(connection, service_principal_id, synchronization_job_id, directory_definition_id, microsoft_graph_directory_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/schema/directories/#{directory_definition_id}")
      |> add_param(:body, :body, microsoft_graph_directory_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update synchronizationSchema
  Update the synchronization schema for a given job or template. This method fully replaces the current schema with the one provided in the request. To update the schema of a template, make the call on the application object. You must be the owner of the application.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `microsoft_graph_synchronization_schema` (MicrosoftGraphSynchronizationSchema): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_jobs_update_schema(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_jobs_update_schema(connection, service_principal_id, synchronization_job_id, microsoft_graph_synchronization_schema, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}/schema")
      |> add_param(:body, :body, microsoft_graph_synchronization_schema)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List synchronization jobs
  List existing jobs for a given application instance (service principal). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationJobCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_list_jobs(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationJobCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_list_jobs(connection, service_principal_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationJobCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List existing synchronization templates
  List the synchronization templates associated with a given application or service principal. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplateCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_list_templates(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplateCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_list_templates(connection, service_principal_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplateCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_secrets_get_count65c9(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_secrets_get_count65c9(connection, service_principal_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/secrets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property schema for servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_templates_delete_schema(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_templates_delete_schema(connection, service_principal_id, synchronization_template_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}/schema")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_templates_get_count1c9d(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_templates_get_count1c9d(connection, service_principal_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get schema from servicePrincipals
  Default synchronization schema for the jobs based on this template.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_templates_get_schema(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_templates_get_schema(connection, service_principal_id, synchronization_template_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}/schema")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to directories for servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `microsoft_graph_directory_definition` (MicrosoftGraphDirectoryDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_templates_schema_create_directories(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_templates_schema_create_directories(connection, service_principal_id, synchronization_template_id, microsoft_graph_directory_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}/schema/directories")
      |> add_param(:body, :body, microsoft_graph_directory_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property directories for servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `directory_definition_id` (String.t): The unique identifier of directoryDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_templates_schema_delete_directories(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_templates_schema_delete_directories(connection, service_principal_id, synchronization_template_id, directory_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}/schema/directories/#{directory_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_templates_schema_directories_get_count_f937(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_templates_schema_directories_get_count_f937(connection, service_principal_id, synchronization_template_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}/schema/directories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directories from servicePrincipals
  Contains the collection of directories and all of their objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `directory_definition_id` (String.t): The unique identifier of directoryDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_templates_schema_get_directories(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_templates_schema_get_directories(connection, service_principal_id, synchronization_template_id, directory_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}/schema/directories/#{directory_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directories from servicePrincipals
  Contains the collection of directories and all of their objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_templates_schema_list_directories(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_templates_schema_list_directories(connection, service_principal_id, synchronization_template_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}/schema/directories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property directories in servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `directory_definition_id` (String.t): The unique identifier of directoryDefinition
  - `microsoft_graph_directory_definition` (MicrosoftGraphDirectoryDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_templates_schema_update_directories(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_templates_schema_update_directories(connection, service_principal_id, synchronization_template_id, directory_definition_id, microsoft_graph_directory_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}/schema/directories/#{directory_definition_id}")
      |> add_param(:body, :body, microsoft_graph_directory_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property schema in servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `microsoft_graph_synchronization_schema` (MicrosoftGraphSynchronizationSchema): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_templates_update_schema(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_templates_update_schema(connection, service_principal_id, synchronization_template_id, microsoft_graph_synchronization_schema, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}/schema")
      |> add_param(:body, :body, microsoft_graph_synchronization_schema)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationSchema},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property jobs in servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_job_id` (String.t): The unique identifier of synchronizationJob
  - `microsoft_graph_synchronization_job` (MicrosoftGraphSynchronizationJob): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationJob.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_update_jobs(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSynchronizationJob.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationJob.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_update_jobs(connection, service_principal_id, synchronization_job_id, microsoft_graph_synchronization_job, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/jobs/#{synchronization_job_id}")
      |> add_param(:body, :body, microsoft_graph_synchronization_job)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationJob},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property secrets value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `microsoft_graph_synchronization_secret_key_string_value_pair` ([MicrosoftGraph.Model.MicrosoftGraphSynchronizationSecretKeyStringValuePair.t]): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%MicrosoftGraphSynchronizationSecretKeyStringValuePair{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_update_secrets(Tesla.Env.client, String.t, list(MicrosoftGraph.Model.MicrosoftGraphSynchronizationSecretKeyStringValuePair.t), keyword()) :: {:ok, list(MicrosoftGraph.Model.MicrosoftGraphSynchronizationSecretKeyStringValuePair.t)} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_update_secrets(connection, service_principal_id, microsoft_graph_synchronization_secret_key_string_value_pair, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/secrets")
      |> add_param(:body, :body, microsoft_graph_synchronization_secret_key_string_value_pair)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationSecretKeyStringValuePair},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update synchronizationTemplate
  Update (override) the synchronization template associated with a given application. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `synchronization_template_id` (String.t): The unique identifier of synchronizationTemplate
  - `microsoft_graph_synchronization_template` (MicrosoftGraphSynchronizationTemplate): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_synchronization_update_templates(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplate.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplate.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_synchronization_update_templates(connection, service_principal_id, synchronization_template_id, microsoft_graph_synchronization_template, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization/templates/#{synchronization_template_id}")
      |> add_param(:body, :body, microsoft_graph_synchronization_template)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronizationTemplate},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property synchronization in servicePrincipals

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_principal_id` (String.t): The unique identifier of servicePrincipal
  - `microsoft_graph_synchronization` (MicrosoftGraphSynchronization): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec service_principals_update_synchronization(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSynchronization.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSynchronization.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def service_principals_update_synchronization(connection, service_principal_id, microsoft_graph_synchronization, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/servicePrincipals/#{service_principal_id}/synchronization")
      |> add_param(:body, :body, microsoft_graph_synchronization)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSynchronization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
