# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceManagementTermsAndConditions do
  @moduledoc """
  API calls for all endpoints tagged `DeviceManagementTermsAndConditions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create termsAndConditions
  Create a new termsAndConditions object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_terms_and_conditions` (MicrosoftGraphTermsAndConditions): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_create_terms_and_conditions(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_create_terms_and_conditions(connection, microsoft_graph_terms_and_conditions, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/termsAndConditions")
      |> add_param(:body, :body, microsoft_graph_terms_and_conditions)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete termsAndConditions
  Deletes a termsAndConditions.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_delete_terms_and_conditions(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_delete_terms_and_conditions(connection, terms_and_conditions_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get termsAndConditions
  Read properties and relationships of the termsAndConditions object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_get_terms_and_conditions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_get_terms_and_conditions(connection, terms_and_conditions_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List termsAndConditionses
  List properties and relationships of the termsAndConditions objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_list_terms_and_conditions(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_management_list_terms_and_conditions(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/termsAndConditions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_acceptance_statuses_get_count_d4f9(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_acceptance_statuses_get_count_d4f9(connection, terms_and_conditions_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/acceptanceStatuses/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get termsAndConditions from deviceManagement
  Navigation link to the terms and conditions that are assigned.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `terms_and_conditions_acceptance_status_id` (String.t): The unique identifier of termsAndConditionsAcceptanceStatus
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_acceptance_statuses_get_terms_and_conditions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_acceptance_statuses_get_terms_and_conditions(connection, terms_and_conditions_id, terms_and_conditions_acceptance_status_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/acceptanceStatuses/#{terms_and_conditions_acceptance_status_id}/termsAndConditions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_assignments_get_count0a20(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_assignments_get_count0a20(connection, terms_and_conditions_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create termsAndConditionsAcceptanceStatus
  Create a new termsAndConditionsAcceptanceStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `microsoft_graph_terms_and_conditions_acceptance_status` (MicrosoftGraphTermsAndConditionsAcceptanceStatus): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_create_acceptance_statuses(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatus.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatus.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_create_acceptance_statuses(connection, terms_and_conditions_id, microsoft_graph_terms_and_conditions_acceptance_status, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/acceptanceStatuses")
      |> add_param(:body, :body, microsoft_graph_terms_and_conditions_acceptance_status)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create termsAndConditionsAssignment
  Create a new termsAndConditionsAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `microsoft_graph_terms_and_conditions_assignment` (MicrosoftGraphTermsAndConditionsAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_create_assignments(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_create_assignments(connection, terms_and_conditions_id, microsoft_graph_terms_and_conditions_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/assignments")
      |> add_param(:body, :body, microsoft_graph_terms_and_conditions_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete termsAndConditionsAcceptanceStatus
  Deletes a termsAndConditionsAcceptanceStatus.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `terms_and_conditions_acceptance_status_id` (String.t): The unique identifier of termsAndConditionsAcceptanceStatus
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_delete_acceptance_statuses(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_delete_acceptance_statuses(connection, terms_and_conditions_id, terms_and_conditions_acceptance_status_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/acceptanceStatuses/#{terms_and_conditions_acceptance_status_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete termsAndConditionsAssignment
  Deletes a termsAndConditionsAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `terms_and_conditions_assignment_id` (String.t): The unique identifier of termsAndConditionsAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_delete_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_delete_assignments(connection, terms_and_conditions_id, terms_and_conditions_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/assignments/#{terms_and_conditions_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get termsAndConditionsAcceptanceStatus
  Read properties and relationships of the termsAndConditionsAcceptanceStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `terms_and_conditions_acceptance_status_id` (String.t): The unique identifier of termsAndConditionsAcceptanceStatus
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_get_acceptance_statuses(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatus.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_get_acceptance_statuses(connection, terms_and_conditions_id, terms_and_conditions_acceptance_status_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/acceptanceStatuses/#{terms_and_conditions_acceptance_status_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get termsAndConditionsAssignment
  Read properties and relationships of the termsAndConditionsAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `terms_and_conditions_assignment_id` (String.t): The unique identifier of termsAndConditionsAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_get_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_get_assignments(connection, terms_and_conditions_id, terms_and_conditions_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/assignments/#{terms_and_conditions_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_get_count_b2c0(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_get_count_b2c0(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/termsAndConditions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List termsAndConditionsAcceptanceStatuses
  List properties and relationships of the termsAndConditionsAcceptanceStatus objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatusCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_list_acceptance_statuses(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatusCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_list_acceptance_statuses(connection, terms_and_conditions_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/acceptanceStatuses")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatusCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List termsAndConditionsAssignments
  List properties and relationships of the termsAndConditionsAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_list_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_list_assignments(connection, terms_and_conditions_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update termsAndConditionsAcceptanceStatus
  Update the properties of a termsAndConditionsAcceptanceStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `terms_and_conditions_acceptance_status_id` (String.t): The unique identifier of termsAndConditionsAcceptanceStatus
  - `microsoft_graph_terms_and_conditions_acceptance_status` (MicrosoftGraphTermsAndConditionsAcceptanceStatus): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_update_acceptance_statuses(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatus.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatus.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_update_acceptance_statuses(connection, terms_and_conditions_id, terms_and_conditions_acceptance_status_id, microsoft_graph_terms_and_conditions_acceptance_status, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/acceptanceStatuses/#{terms_and_conditions_acceptance_status_id}")
      |> add_param(:body, :body, microsoft_graph_terms_and_conditions_acceptance_status)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAcceptanceStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update termsAndConditionsAssignment
  Update the properties of a termsAndConditionsAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `terms_and_conditions_assignment_id` (String.t): The unique identifier of termsAndConditionsAssignment
  - `microsoft_graph_terms_and_conditions_assignment` (MicrosoftGraphTermsAndConditionsAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_terms_and_conditions_update_assignments(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_terms_and_conditions_update_assignments(connection, terms_and_conditions_id, terms_and_conditions_assignment_id, microsoft_graph_terms_and_conditions_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}/assignments/#{terms_and_conditions_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_terms_and_conditions_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditionsAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update termsAndConditions
  Update the properties of a termsAndConditions object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `terms_and_conditions_id` (String.t): The unique identifier of termsAndConditions
  - `microsoft_graph_terms_and_conditions` (MicrosoftGraphTermsAndConditions): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_update_terms_and_conditions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_update_terms_and_conditions(connection, terms_and_conditions_id, microsoft_graph_terms_and_conditions, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/termsAndConditions/#{terms_and_conditions_id}")
      |> add_param(:body, :body, microsoft_graph_terms_and_conditions)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermsAndConditions},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
