# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.AppCatalogsTeamsApp do
  @moduledoc """
  API calls for all endpoints tagged `AppCatalogsTeamsApp`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Publish teamsApp
  Publish an app to the Microsoft Teams app catalog. Specifically, this API publishes the app to your organization's catalog (the tenant app catalog); the created resource has a distributionMethod property value of organization. The requiresReview property allows any user to submit an app for review by an administrator. Admins can approve or reject these apps via this API or the Microsoft Teams admin center. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_teams_app` (MicrosoftGraphTeamsApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_create_teams_apps(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_create_teams_apps(connection, microsoft_graph_teams_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/appCatalogs/teamsApps")
      |> add_param(:body, :body, microsoft_graph_teams_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete teamsApp
  Delete an app from an organization's app catalog (the tenant app catalog). To delete an app, the distributionMethod property for the app must be set to organization. You can also use this API to remove a submitted app from the review process. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_delete_teams_apps(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_delete_teams_apps(connection, teams_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamsApps from appCatalogs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_get_teams_apps(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_get_teams_apps(connection, teams_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List teamsApp
  List apps from the Microsoft Teams app catalog. This includes apps from the Microsoft Teams store, as well as apps from your organization's app catalog (the tenant app catalog). To get apps from your organization's app catalog only, specify organization as the distributionMethod in the request. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_list_teams_apps(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_list_teams_apps(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/appCatalogs/teamsApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property bot for appCatalogs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `teams_app_definition_id` (String.t): The unique identifier of teamsAppDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_teams_apps_app_definitions_delete_bot(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_teams_apps_app_definitions_delete_bot(connection, teams_app_id, teams_app_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}/appDefinitions/#{teams_app_definition_id}/bot")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamworkBot
  Get the bot associated with a specific definition of the  TeamsApp. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `teams_app_definition_id` (String.t): The unique identifier of teamsAppDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkBot.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_teams_apps_app_definitions_get_bot(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkBot.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_teams_apps_app_definitions_get_bot(connection, teams_app_id, teams_app_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}/appDefinitions/#{teams_app_definition_id}/bot")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamworkBot},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_teams_apps_app_definitions_get_count_ad4f(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_teams_apps_app_definitions_get_count_ad4f(connection, teams_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}/appDefinitions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property bot in appCatalogs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `teams_app_definition_id` (String.t): The unique identifier of teamsAppDefinition
  - `microsoft_graph_teamwork_bot` (MicrosoftGraphTeamworkBot): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkBot.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_teams_apps_app_definitions_update_bot(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTeamworkBot.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkBot.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_teams_apps_app_definitions_update_bot(connection, teams_app_id, teams_app_definition_id, microsoft_graph_teamwork_bot, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}/appDefinitions/#{teams_app_definition_id}/bot")
      |> add_param(:body, :body, microsoft_graph_teamwork_bot)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamworkBot},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update teamsApp
  Update an app previously published to the Microsoft Teams app catalog. To update an app, the distributionMethod property for the app must be set to organization. This API specifically updates an app published to your organization's app catalog (the tenant app catalog). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `microsoft_graph_teams_app_definition` (MicrosoftGraphTeamsAppDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_teams_apps_create_app_definitions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_teams_apps_create_app_definitions(connection, teams_app_id, microsoft_graph_teams_app_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}/appDefinitions")
      |> add_param(:body, :body, microsoft_graph_teams_app_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property appDefinitions for appCatalogs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `teams_app_definition_id` (String.t): The unique identifier of teamsAppDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_teams_apps_delete_app_definitions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_teams_apps_delete_app_definitions(connection, teams_app_id, teams_app_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}/appDefinitions/#{teams_app_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appDefinitions from appCatalogs
  The details for each version of the app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `teams_app_definition_id` (String.t): The unique identifier of teamsAppDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_teams_apps_get_app_definitions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_teams_apps_get_app_definitions(connection, teams_app_id, teams_app_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}/appDefinitions/#{teams_app_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_teams_apps_get_count_d4ad(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_teams_apps_get_count_d4ad(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/appCatalogs/teamsApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appDefinitions from appCatalogs
  The details for each version of the app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_teams_apps_list_app_definitions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def app_catalogs_teams_apps_list_app_definitions(connection, teams_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}/appDefinitions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Publish teamsApp
  Publish an app to the Microsoft Teams app catalog. Specifically, this API publishes the app to your organization's catalog (the tenant app catalog); the created resource has a distributionMethod property value of organization. The requiresReview property allows any user to submit an app for review by an administrator. Admins can approve or reject these apps via this API or the Microsoft Teams admin center. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `teams_app_definition_id` (String.t): The unique identifier of teamsAppDefinition
  - `microsoft_graph_teams_app_definition` (MicrosoftGraphTeamsAppDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_teams_apps_update_app_definitions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_teams_apps_update_app_definitions(connection, teams_app_id, teams_app_definition_id, microsoft_graph_teams_app_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}/appDefinitions/#{teams_app_definition_id}")
      |> add_param(:body, :body, microsoft_graph_teams_app_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property teamsApps in appCatalogs

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `teams_app_id` (String.t): The unique identifier of teamsApp
  - `microsoft_graph_teams_app` (MicrosoftGraphTeamsApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec app_catalogs_update_teams_apps(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def app_catalogs_update_teams_apps(connection, teams_app_id, microsoft_graph_teams_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/appCatalogs/teamsApps/#{teams_app_id}")
      |> add_param(:body, :body, microsoft_graph_teams_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
