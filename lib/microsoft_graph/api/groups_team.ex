# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.GroupsTeam do
  @moduledoc """
  API calls for all endpoints tagged `GroupsTeam`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property team for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_delete_team(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_delete_team(connection, group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get team from groups
  The team associated with this group.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_get_team(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_get_team(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeam},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_all_channels_get_count4fa6(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_all_channels_get_count4fa6(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/allChannels/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add member to channel
  Add a conversationMember to a channel. This operation is allowed only for channels with a membershipType value of private or shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_create_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphConversationMember.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_create_members(
        connection,
        group_id,
        channel_id,
        microsoft_graph_conversation_member,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/members")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Send chatMessage in a channel or a chat
  Send a new chatMessage in the specified channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_create_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_create_messages(
        connection,
        group_id,
        channel_id,
        microsoft_graph_chat_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/messages")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sharedWithTeams for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `microsoft_graph_shared_with_channel_team_info` (MicrosoftGraphSharedWithChannelTeamInfo): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_create_shared_with_teams(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_create_shared_with_teams(
        connection,
        group_id,
        channel_id,
        microsoft_graph_shared_with_channel_team_info,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/sharedWithTeams")
      |> add_param(:body, :body, microsoft_graph_shared_with_channel_team_info)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add tab to channel
  Adds (pins) a tab to the specified channel within a team.  The corresponding app must already be installed in the team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `microsoft_graph_teams_tab` (MicrosoftGraphTeamsTab): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_create_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_create_tabs(
        connection,
        group_id,
        channel_id,
        microsoft_graph_teams_tab,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/tabs")
      |> add_param(:body, :body, microsoft_graph_teams_tab)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete conversationMember
  Delete a conversationMember from a channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_delete_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_delete_members(
        connection,
        group_id,
        channel_id,
        conversation_member_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property messages for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_delete_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_delete_messages(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete sharedWithChannelTeamInfo
  Unshare a channel with a team by deleting the corresponding sharedWithChannelTeamInfo resource. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_delete_shared_with_teams(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_delete_shared_with_teams(
        connection,
        group_id,
        channel_id,
        shared_with_channel_team_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete tab from channel
  Removes (unpins) a tab from the specified channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_delete_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_delete_tabs(connection, group_id, channel_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/tabs/#{teams_tab_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_get_count_dcc7(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_get_count_dcc7(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get filesFolder
  Get the metadata for the location where the files of a channel are stored.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_get_files_folder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_get_files_folder(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/filesFolder")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property filesFolder from groups
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_get_files_folder_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_get_files_folder_content(connection, group_id, channel_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/filesFolder/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get member of channel
  Get a conversationMember from a channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_get_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_get_members(
        connection,
        group_id,
        channel_id,
        conversation_member_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessage in a channel or chat
  Retrieve a single message or a message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_get_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_get_messages(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sharedWithChannelTeamInfo
  Get a team that has been shared with a specified channel. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_get_shared_with_teams(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_get_shared_with_teams(
        connection,
        group_id,
        channel_id,
        shared_with_channel_team_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tab
  Retrieve the properties and relationships of the specified tab in a channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_get_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_get_tabs(connection, group_id, channel_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/tabs/#{teams_tab_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List members of a channel
  Retrieve a list of conversationMembers from a channel. This method supports federation. Only a user who is a member of the shared channel can retrieve the channel member list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_list_members(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_list_members(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/members")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List channel messages
  Retrieve the list of messages (without the replies) in a channel of a team.  To get the replies for a message, call the list message replies or the get message reply API.  This method supports federation. To list channel messages in application context, the request must be made from the tenant that the channel owner belongs to (represented by the tenantId property on the channel). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_list_messages(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_list_messages(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/messages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sharedWithChannelTeamInfo
  Get the list of teams that has been shared a specified channel. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_list_shared_with_teams(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_list_shared_with_teams(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/sharedWithTeams")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List tabs in channel
  Retrieve the list of tabs in the specified channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_list_tabs(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_list_tabs(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/tabs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_members_get_count_fa97(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_members_get_count_fa97(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/members/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to hostedContents for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_create_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_create_hosted_contents(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Send replies to a message in a channel
  Send a new reply to a chatMessage in a specified channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_create_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_create_replies(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        microsoft_graph_chat_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property hostedContents for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_delete_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_delete_hosted_contents(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property replies for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_delete_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_delete_replies(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_get_count_f67e(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_get_count_f67e(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/messages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessageHostedContent
  Retrieve the properties and relationships of chatMessageHostedContent object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_get_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_get_hosted_contents(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property hostedContents from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_get_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_get_hosted_contents_content(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_hosted_content_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessage in a channel or chat
  Retrieve a single message or a message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_get_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_get_replies(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_hosted_contents_get_count7beb(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_hosted_contents_get_count7beb(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List hostedContents
  Retrieve the list of chatMessageHostedContent objects from a message. This API only lists the hosted content objects. To get the content bytes, see get chatmessage hosted content This API is available in the following national cloud deployments. The following tables show the least privileged permission or permissions required to call this API on each supported resource type. Follow best practices to request least privileged permissions. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_list_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_list_hosted_contents(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List replies
  List all the replies to a message in a channel of a team. This method lists only the replies of the specified message, if any. To get the message itself, simply call get channel message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_list_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_list_replies(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to hostedContents for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_replies_create_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_replies_create_hosted_contents(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property hostedContents for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_replies_delete_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_replies_delete_hosted_contents(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_replies_get_count_d2f1(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_replies_get_count_d2f1(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessageHostedContent
  Retrieve the properties and relationships of chatMessageHostedContent object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_replies_get_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_replies_get_hosted_contents(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property hostedContents from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_replies_get_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_replies_get_hosted_contents_content(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_replies_hosted_contents_get_count2a4d(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_replies_hosted_contents_get_count2a4d(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List hostedContents
  Retrieve the list of chatMessageHostedContent objects from a message. This API only lists the hosted content objects. To get the content bytes, see get chatmessage hosted content This API is available in the following national cloud deployments. The following tables show the least privileged permission or permissions required to call this API on each supported resource type. Follow best practices to request least privileged permissions. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_replies_list_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_replies_list_hosted_contents(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property hostedContents in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_replies_update_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_replies_update_hosted_contents(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property hostedContents in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_replies_update_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_replies_update_hosted_contents_content(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property hostedContents in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_update_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_update_hosted_contents(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_hosted_content_id,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property hostedContents in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_update_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_update_hosted_contents_content(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_hosted_content_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property replies in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_messages_update_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_messages_update_replies(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        microsoft_graph_chat_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_shared_with_teams_allowed_members_get_count_d551(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_shared_with_teams_allowed_members_get_count_d551(
        connection,
        group_id,
        channel_id,
        shared_with_channel_team_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get allowedMembers from groups
  A collection of team members who have access to the shared channel.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_shared_with_teams_get_allowed_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_shared_with_teams_get_allowed_members(
        connection,
        group_id,
        channel_id,
        shared_with_channel_team_info_id,
        conversation_member_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers/#{conversation_member_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_shared_with_teams_get_count3479(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_shared_with_teams_get_count3479(
        connection,
        group_id,
        channel_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/sharedWithTeams/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get team from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_shared_with_teams_get_team(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_shared_with_teams_get_team(
        connection,
        group_id,
        channel_id,
        shared_with_channel_team_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}/team"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeam},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List allowedMembers
  Get the list of conversationMembers who can access a shared channel. This method does not return the following conversationMembers from the team: - Users with Guest role - Users who are externally authenticated in the tenant This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_shared_with_teams_list_allowed_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_shared_with_teams_list_allowed_members(
        connection,
        group_id,
        channel_id,
        shared_with_channel_team_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_tabs_get_count5a2c(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_tabs_get_count5a2c(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/tabs/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamsApp from groups
  The application that is linked to the tab. This can't be changed after tab creation.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_tabs_get_teams_app(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_tabs_get_teams_app(
        connection,
        group_id,
        channel_id,
        teams_tab_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/tabs/#{teams_tab_id}/teamsApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property filesFolder in groups
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_update_files_folder_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_update_files_folder_content(
        connection,
        group_id,
        channel_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/filesFolder/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update member in channel
  Update the role of a conversationMember in a channel. This operation is allowed only for channels with a membershipType value of private or shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_update_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphConversationMember.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_update_members(
        connection,
        group_id,
        channel_id,
        conversation_member_id,
        microsoft_graph_conversation_member,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/members/#{conversation_member_id}")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chatMessage
  Update a chatMessage object.  With the exception of the policyViolation property, all properties of a chatMessage can be updated in delegated permissions scenarios. Only the policyViolation property of a chatMessage can be updated in application permissions scenarios. The update only works for chats where members are Microsoft Teams users. If one of the participants is using Skype, the operation will fail. This method does not support federation. Only the user in the tenant who sent the message can perform data loss prevention (DLP) updates on the specified chat message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_update_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_update_messages(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        microsoft_graph_chat_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sharedWithTeams in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `microsoft_graph_shared_with_channel_team_info` (MicrosoftGraphSharedWithChannelTeamInfo): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_update_shared_with_teams(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_update_shared_with_teams(
        connection,
        group_id,
        channel_id,
        shared_with_channel_team_info_id,
        microsoft_graph_shared_with_channel_team_info,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}"
      )
      |> add_param(:body, :body, microsoft_graph_shared_with_channel_team_info)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update tab
  Update the properties of the specified tab. This can be used to configure the content of the tab. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `microsoft_graph_teams_tab` (MicrosoftGraphTeamsTab): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_channels_update_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_channels_update_tabs(
        connection,
        group_id,
        channel_id,
        teams_tab_id,
        microsoft_graph_teams_tab,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/tabs/#{teams_tab_id}")
      |> add_param(:body, :body, microsoft_graph_teams_tab)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create channel
  Create a new channel in a team, as specified in the request body.  When you create a channel, the maximum length of the channel's displayName is 50 characters. This is the name that appears to the user in Microsoft Teams. If you're creating a private channel, you can add a maximum of 200 members. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_channel` (MicrosoftGraphChannel): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_create_channels(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChannel.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_create_channels(connection, group_id, microsoft_graph_channel, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/channels")
      |> add_param(:body, :body, microsoft_graph_channel)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add app to team
  Install an app to the specified team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_teams_app_installation` (MicrosoftGraphTeamsAppInstallation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_create_installed_apps(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_create_installed_apps(
        connection,
        group_id,
        microsoft_graph_teams_app_installation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/installedApps")
      |> add_param(:body, :body, microsoft_graph_teams_app_installation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add member to team
  Add a new conversationMember to a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_create_members(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphConversationMember.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_create_members(
        connection,
        group_id,
        microsoft_graph_conversation_member,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/members")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to operations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_teams_async_operation` (MicrosoftGraphTeamsAsyncOperation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_create_operations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_create_operations(
        connection,
        group_id,
        microsoft_graph_teams_async_operation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/operations")
      |> add_param(:body, :body, microsoft_graph_teams_async_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to permissionGrants for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_resource_specific_permission_grant` (MicrosoftGraphResourceSpecificPermissionGrant): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_create_permission_grants(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_create_permission_grants(
        connection,
        group_id,
        microsoft_graph_resource_specific_permission_grant,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/permissionGrants")
      |> add_param(:body, :body, microsoft_graph_resource_specific_permission_grant)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create teamworkTag
  Create a standard tag for members in a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_teamwork_tag` (MicrosoftGraphTeamworkTag): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTag.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_create_tags(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamworkTag.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTag.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_create_tags(connection, group_id, microsoft_graph_teamwork_tag, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/tags")
      |> add_param(:body, :body, microsoft_graph_teamwork_tag)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamworkTag},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete channel
  Delete the channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_delete_channels(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_delete_channels(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove channel
  Remove an incoming channel (a channel shared with a team) from a team.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_delete_incoming_channels(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_delete_incoming_channels(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/incomingChannels/#{channel_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove app from team
  Uninstalls an app from the specified team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_delete_installed_apps(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_delete_installed_apps(
        connection,
        group_id,
        teams_app_installation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/installedApps/#{teams_app_installation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove member from team
  Remove a conversationMember from a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_delete_members(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_delete_members(connection, group_id, conversation_member_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property operations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_async_operation_id` (String.t): The unique identifier of teamsAsyncOperation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_delete_operations(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_delete_operations(connection, group_id, teams_async_operation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/operations/#{teams_async_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property permissionGrants for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `resource_specific_permission_grant_id` (String.t): The unique identifier of resourceSpecificPermissionGrant
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_delete_permission_grants(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_delete_permission_grants(
        connection,
        group_id,
        resource_specific_permission_grant_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/permissionGrants/#{resource_specific_permission_grant_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property primaryChannel for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_delete_primary_channel(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_delete_primary_channel(connection, group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/primaryChannel")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property schedule for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_delete_schedule(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_delete_schedule(connection, group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/schedule")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete teamworkTag
  Delete a tag object permanently. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teamwork_tag_id` (String.t): The unique identifier of teamworkTag
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_delete_tags(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_delete_tags(connection, group_id, teamwork_tag_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/tags/#{teamwork_tag_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get allChannels from groups
  List of channels either hosted in or shared with the team (incoming channels).

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_all_channels(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_all_channels(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/allChannels/#{channel_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get channel
  Retrieve the properties and relationships of a channel. This method supports federation. Only a user who is a member of the shared channel can retrieve channel information. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_channels(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_channels(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_group(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_group(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get incomingChannels from groups
  List of channels shared with the team.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_incoming_channels(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_incoming_channels(connection, group_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/incomingChannels/#{channel_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get installed app in team
  Retrieve the app installed in the specified team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_installed_apps(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_installed_apps(connection, group_id, teams_app_installation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/installedApps/#{teams_app_installation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get member of team
  Get a conversationMember from a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_members(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_members(connection, group_id, conversation_member_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get operations from groups
  The async operations that ran or are running on this team.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_async_operation_id` (String.t): The unique identifier of teamsAsyncOperation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_operations(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_operations(connection, group_id, teams_async_operation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/operations/#{teams_async_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get permissionGrants from groups
  A collection of permissions granted to apps to access the team.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `resource_specific_permission_grant_id` (String.t): The unique identifier of resourceSpecificPermissionGrant
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_permission_grants(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_permission_grants(
        connection,
        group_id,
        resource_specific_permission_grant_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/permissionGrants/#{resource_specific_permission_grant_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get profilePhoto
  Get the specified profilePhoto or its metadata (profilePhoto properties). The supported sizes of HD photos on Microsoft 365 are as follows: 48x48, 64x64, 96x96, 120x120, 240x240, 360x360, 432x432, 504x504, and 648x648. Photos can be any dimension if they are stored in Microsoft Entra ID. You can get the metadata of the largest available photo, or specify a size to get the metadata for that photo size. If the size you request is not available, you can still get a smaller size that the user has uploaded and made available. For example, if the user uploads a photo that is 504x504 pixels, all but the 648x648 size of photo will be available for download. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_photo(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_photo(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/photo")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphProfilePhoto},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property photo from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_photo_content(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_photo_content(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/photo/$value")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get primaryChannel
  Get the default channel, General, of a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_primary_channel(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_primary_channel(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get schedule
  Retrieve the properties and relationships of a schedule object. The schedule creation process conforms to the One API guideline for resource based long running operations (RELO). When clients use the PUT method, if the schedule is provisioned, the operation updates the schedule; otherwise, the operation starts the schedule provisioning process in the background. During schedule provisioning, clients can use the GET method to get the schedule and look at the provisionStatus property for the current state of the provisioning. If the provisioning failed, clients can get additional information from the provisionStatusCode property. Clients can also inspect the configuration of the schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_schedule(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedule.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_schedule(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamworkTag
  Read the properties and relationships of a tag object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teamwork_tag_id` (String.t): The unique identifier of teamworkTag
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTag.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_tags(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTag.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_tags(connection, group_id, teamwork_tag_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/tags/#{teamwork_tag_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamworkTag},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get template from groups
  The template this team was created from. See available templates.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTemplate.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_get_template(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTemplate.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_get_template(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/template")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTemplate},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_group_list_service_provisioning_errors(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_group_list_service_provisioning_errors(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/group/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_group_service_provisioning_errors_get_count2547(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_group_service_provisioning_errors_get_count2547(
        connection,
        group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/group/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_incoming_channels_get_count_d4b9(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_incoming_channels_get_count_d4b9(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/incomingChannels/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_installed_apps_get_count83d4(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_installed_apps_get_count83d4(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/installedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamsApp from groups
  The app that is installed.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_installed_apps_get_teams_app(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_installed_apps_get_teams_app(
        connection,
        group_id,
        teams_app_installation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/installedApps/#{teams_app_installation_id}/teamsApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamsAppDefinition from groups
  The details of this version of the app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_installed_apps_get_teams_app_definition(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_installed_apps_get_teams_app_definition(
        connection,
        group_id,
        teams_app_installation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/installedApps/#{teams_app_installation_id}/teamsAppDefinition"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List allChannels
  Get the list of channels either in this team or shared with this team (incoming channels). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_list_all_channels(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_list_all_channels(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/allChannels")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List channels
  Retrieve the list of channels in this team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_list_channels(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_list_channels(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/channels")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List incomingChannels
  Get the list of incoming channels (channels shared with a team). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_list_incoming_channels(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_list_incoming_channels(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/incomingChannels")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List apps in team
  Retrieve a list of apps installed in the specified team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_list_installed_apps(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallationCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_list_installed_apps(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/installedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List members of team
  Get the conversationMember collection of a team. The membership IDs returned by the server must be treated as opaque strings. The client should not try to parse or make assumptions about these resource IDs. In the future, membership results may include users from various tenants, as indicated in the response. Clients should avoid assuming that all members exclusively belong to the current tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_list_members(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_list_members(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/members")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get operations from groups
  The async operations that ran or are running on this team.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_list_operations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperationCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_list_operations(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/operations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List permissionGrants of a team
  List all resource-specific permission grants on the team. This list specifies the Microsoft Entra apps that have access to the team, along with each app's corresponding type of resource-specific access. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrantCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_list_permission_grants(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrantCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_list_permission_grants(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/permissionGrants")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrantCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List teamworkTags
  Get a list of the tag objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTagCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_list_tags(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTagCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_list_tags(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/tags")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamworkTagCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_members_get_count_a0b1(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_members_get_count_a0b1(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/members/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_operations_get_count6921(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_operations_get_count6921(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/operations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_permission_grants_get_count5668(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_permission_grants_get_count5668(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/permissionGrants/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add member to channel
  Add a conversationMember to a channel. This operation is allowed only for channels with a membershipType value of private or shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_create_members(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphConversationMember.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_create_members(
        connection,
        group_id,
        microsoft_graph_conversation_member,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/members")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Send chatMessage in a channel or a chat
  Send a new chatMessage in the specified channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_create_messages(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_create_messages(
        connection,
        group_id,
        microsoft_graph_chat_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/messages")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sharedWithTeams for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_shared_with_channel_team_info` (MicrosoftGraphSharedWithChannelTeamInfo): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_create_shared_with_teams(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_create_shared_with_teams(
        connection,
        group_id,
        microsoft_graph_shared_with_channel_team_info,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/sharedWithTeams")
      |> add_param(:body, :body, microsoft_graph_shared_with_channel_team_info)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add tab to channel
  Adds (pins) a tab to the specified channel within a team.  The corresponding app must already be installed in the team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_teams_tab` (MicrosoftGraphTeamsTab): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_create_tabs(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_create_tabs(
        connection,
        group_id,
        microsoft_graph_teams_tab,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/tabs")
      |> add_param(:body, :body, microsoft_graph_teams_tab)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete conversationMember
  Delete a conversationMember from a channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_delete_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_delete_members(
        connection,
        group_id,
        conversation_member_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/primaryChannel/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property messages for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_delete_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_delete_messages(
        connection,
        group_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete sharedWithChannelTeamInfo
  Unshare a channel with a team by deleting the corresponding sharedWithChannelTeamInfo resource. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_delete_shared_with_teams(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_delete_shared_with_teams(
        connection,
        group_id,
        shared_with_channel_team_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete tab from channel
  Removes (unpins) a tab from the specified channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_delete_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_delete_tabs(connection, group_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/primaryChannel/tabs/#{teams_tab_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get filesFolder
  Get the metadata for the location where the files of a channel are stored.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_get_files_folder(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_get_files_folder(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/filesFolder")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property filesFolder from groups
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_get_files_folder_content(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_get_files_folder_content(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/filesFolder/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get member of channel
  Get a conversationMember from a channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_get_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_get_members(
        connection,
        group_id,
        conversation_member_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessage in a channel or chat
  Retrieve a single message or a message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_get_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_get_messages(connection, group_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sharedWithChannelTeamInfo
  Get a team that has been shared with a specified channel. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_get_shared_with_teams(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_get_shared_with_teams(
        connection,
        group_id,
        shared_with_channel_team_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tab
  Retrieve the properties and relationships of the specified tab in a channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_get_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_get_tabs(connection, group_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/tabs/#{teams_tab_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List members of a channel
  Retrieve a list of conversationMembers from a channel. This method supports federation. Only a user who is a member of the shared channel can retrieve the channel member list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_list_members(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_list_members(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/members")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List channel messages
  Retrieve the list of messages (without the replies) in a channel of a team.  To get the replies for a message, call the list message replies or the get message reply API.  This method supports federation. To list channel messages in application context, the request must be made from the tenant that the channel owner belongs to (represented by the tenantId property on the channel). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_list_messages(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_list_messages(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/messages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sharedWithChannelTeamInfo
  Get the list of teams that has been shared a specified channel. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_list_shared_with_teams(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_list_shared_with_teams(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/sharedWithTeams")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List tabs in channel
  Retrieve the list of tabs in the specified channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_list_tabs(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_list_tabs(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/tabs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_members_get_count_cb2b(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_members_get_count_cb2b(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/members/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to hostedContents for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_create_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_create_hosted_contents(
        connection,
        group_id,
        chat_message_id,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/hostedContents")
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Send replies to a message in a channel
  Send a new reply to a chatMessage in a specified channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_create_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_create_replies(
        connection,
        group_id,
        chat_message_id,
        microsoft_graph_chat_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property hostedContents for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_delete_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_delete_hosted_contents(
        connection,
        group_id,
        chat_message_id,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property replies for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_delete_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_delete_replies(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_get_count045c(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_get_count045c(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessageHostedContent
  Retrieve the properties and relationships of chatMessageHostedContent object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_get_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_get_hosted_contents(
        connection,
        group_id,
        chat_message_id,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property hostedContents from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_get_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_get_hosted_contents_content(
        connection,
        group_id,
        chat_message_id,
        chat_message_hosted_content_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessage in a channel or chat
  Retrieve a single message or a message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_get_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_get_replies(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_hosted_contents_get_count7396(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_hosted_contents_get_count7396(
        connection,
        group_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/hostedContents/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List hostedContents
  Retrieve the list of chatMessageHostedContent objects from a message. This API only lists the hosted content objects. To get the content bytes, see get chatmessage hosted content This API is available in the following national cloud deployments. The following tables show the least privileged permission or permissions required to call this API on each supported resource type. Follow best practices to request least privileged permissions. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_list_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_list_hosted_contents(
        connection,
        group_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/hostedContents")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List replies
  List all the replies to a message in a channel of a team. This method lists only the replies of the specified message, if any. To get the message itself, simply call get channel message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_list_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_list_replies(
        connection,
        group_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to hostedContents for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_replies_create_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_replies_create_hosted_contents(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property hostedContents for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_replies_delete_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_replies_delete_hosted_contents(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_replies_get_count_b5b0(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_replies_get_count_b5b0(
        connection,
        group_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessageHostedContent
  Retrieve the properties and relationships of chatMessageHostedContent object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_replies_get_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_replies_get_hosted_contents(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property hostedContents from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_replies_get_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_replies_get_hosted_contents_content(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_replies_hosted_contents_get_count4ed6(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_replies_hosted_contents_get_count4ed6(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List hostedContents
  Retrieve the list of chatMessageHostedContent objects from a message. This API only lists the hosted content objects. To get the content bytes, see get chatmessage hosted content This API is available in the following national cloud deployments. The following tables show the least privileged permission or permissions required to call this API on each supported resource type. Follow best practices to request least privileged permissions. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_replies_list_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_replies_list_hosted_contents(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property hostedContents in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_replies_update_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_replies_update_hosted_contents(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property hostedContents in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_replies_update_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_replies_update_hosted_contents_content(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property hostedContents in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_update_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_update_hosted_contents(
        connection,
        group_id,
        chat_message_id,
        chat_message_hosted_content_id,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property hostedContents in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_update_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_update_hosted_contents_content(
        connection,
        group_id,
        chat_message_id,
        chat_message_hosted_content_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property replies in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_messages_update_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_messages_update_replies(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        microsoft_graph_chat_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_shared_with_teams_allowed_members_get_count_c289(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_shared_with_teams_allowed_members_get_count_c289(
        connection,
        group_id,
        shared_with_channel_team_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get allowedMembers from groups
  A collection of team members who have access to the shared channel.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_shared_with_teams_get_allowed_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_shared_with_teams_get_allowed_members(
        connection,
        group_id,
        shared_with_channel_team_info_id,
        conversation_member_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers/#{conversation_member_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_shared_with_teams_get_count_fbef(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_shared_with_teams_get_count_fbef(
        connection,
        group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/sharedWithTeams/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get team from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_shared_with_teams_get_team(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_shared_with_teams_get_team(
        connection,
        group_id,
        shared_with_channel_team_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}/team"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeam},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List allowedMembers
  Get the list of conversationMembers who can access a shared channel. This method does not return the following conversationMembers from the team: - Users with Guest role - Users who are externally authenticated in the tenant This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_shared_with_teams_list_allowed_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_shared_with_teams_list_allowed_members(
        connection,
        group_id,
        shared_with_channel_team_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_tabs_get_count23e6(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_tabs_get_count23e6(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/tabs/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamsApp from groups
  The application that is linked to the tab. This can't be changed after tab creation.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_tabs_get_teams_app(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_tabs_get_teams_app(
        connection,
        group_id,
        teams_tab_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/primaryChannel/tabs/#{teams_tab_id}/teamsApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property filesFolder in groups
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_update_files_folder_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_update_files_folder_content(
        connection,
        group_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/team/primaryChannel/filesFolder/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update member in channel
  Update the role of a conversationMember in a channel. This operation is allowed only for channels with a membershipType value of private or shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_update_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphConversationMember.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_update_members(
        connection,
        group_id,
        conversation_member_id,
        microsoft_graph_conversation_member,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/primaryChannel/members/#{conversation_member_id}")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chatMessage
  Update a chatMessage object.  With the exception of the policyViolation property, all properties of a chatMessage can be updated in delegated permissions scenarios. Only the policyViolation property of a chatMessage can be updated in application permissions scenarios. The update only works for chats where members are Microsoft Teams users. If one of the participants is using Skype, the operation will fail. This method does not support federation. Only the user in the tenant who sent the message can perform data loss prevention (DLP) updates on the specified chat message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_update_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_update_messages(
        connection,
        group_id,
        chat_message_id,
        microsoft_graph_chat_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sharedWithTeams in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `microsoft_graph_shared_with_channel_team_info` (MicrosoftGraphSharedWithChannelTeamInfo): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_update_shared_with_teams(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_update_shared_with_teams(
        connection,
        group_id,
        shared_with_channel_team_info_id,
        microsoft_graph_shared_with_channel_team_info,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}"
      )
      |> add_param(:body, :body, microsoft_graph_shared_with_channel_team_info)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update tab
  Update the properties of the specified tab. This can be used to configure the content of the tab. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `microsoft_graph_teams_tab` (MicrosoftGraphTeamsTab): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_primary_channel_update_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_primary_channel_update_tabs(
        connection,
        group_id,
        teams_tab_id,
        microsoft_graph_teams_tab,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/primaryChannel/tabs/#{teams_tab_id}")
      |> add_param(:body, :body, microsoft_graph_teams_tab)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create offerShiftRequest
  Create an instance of an offerShiftRequest. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_offer_shift_request` (MicrosoftGraphOfferShiftRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_create_offer_shift_requests(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_create_offer_shift_requests(
        connection,
        group_id,
        microsoft_graph_offer_shift_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/schedule/offerShiftRequests")
      |> add_param(:body, :body, microsoft_graph_offer_shift_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create openShiftChangeRequest
  Create instance of an openShiftChangeRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_open_shift_change_request` (MicrosoftGraphOpenShiftChangeRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_create_open_shift_change_requests(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_create_open_shift_change_requests(
        connection,
        group_id,
        microsoft_graph_open_shift_change_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/schedule/openShiftChangeRequests")
      |> add_param(:body, :body, microsoft_graph_open_shift_change_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create openShift
  Create an instance of an openShift object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_open_shift` (MicrosoftGraphOpenShift): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_create_open_shifts(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOpenShift.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_create_open_shifts(
        connection,
        group_id,
        microsoft_graph_open_shift,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/schedule/openShifts")
      |> add_param(:body, :body, microsoft_graph_open_shift)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create schedulingGroup
  Create a new schedulingGroup. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_scheduling_group` (MicrosoftGraphSchedulingGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_create_scheduling_groups(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_create_scheduling_groups(
        connection,
        group_id,
        microsoft_graph_scheduling_group,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/schedule/schedulingGroups")
      |> add_param(:body, :body, microsoft_graph_scheduling_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create shift
  Create a new shift instance in a schedule. The duration of a shift cannot be less than 1 minute or longer than 24 hours. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_shift` (MicrosoftGraphShift): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_create_shifts(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphShift.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_create_shifts(connection, group_id, microsoft_graph_shift, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/schedule/shifts")
      |> add_param(:body, :body, microsoft_graph_shift)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create swapShiftsChangeRequest
  Create an instance of a swapShiftsChangeRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_swap_shifts_change_request` (MicrosoftGraphSwapShiftsChangeRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_create_swap_shifts_change_requests(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_create_swap_shifts_change_requests(
        connection,
        group_id,
        microsoft_graph_swap_shifts_change_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/schedule/swapShiftsChangeRequests")
      |> add_param(:body, :body, microsoft_graph_swap_shifts_change_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create timeOffReason
  Create a new timeOffReason. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_time_off_reason` (MicrosoftGraphTimeOffReason): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_create_time_off_reasons(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_create_time_off_reasons(
        connection,
        group_id,
        microsoft_graph_time_off_reason,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/schedule/timeOffReasons")
      |> add_param(:body, :body, microsoft_graph_time_off_reason)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffReason},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to timeOffRequests for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_time_off_request` (MicrosoftGraphTimeOffRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_create_time_off_requests(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_create_time_off_requests(
        connection,
        group_id,
        microsoft_graph_time_off_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/schedule/timeOffRequests")
      |> add_param(:body, :body, microsoft_graph_time_off_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create timeOff
  Create a new timeOff instance in a schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_time_off` (MicrosoftGraphTimeOff): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_create_times_off(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTimeOff.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_create_times_off(
        connection,
        group_id,
        microsoft_graph_time_off,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/schedule/timesOff")
      |> add_param(:body, :body, microsoft_graph_time_off)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOff},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property offerShiftRequests for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `offer_shift_request_id` (String.t): The unique identifier of offerShiftRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_delete_offer_shift_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_delete_offer_shift_requests(
        connection,
        group_id,
        offer_shift_request_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/schedule/offerShiftRequests/#{offer_shift_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property openShiftChangeRequests for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `open_shift_change_request_id` (String.t): The unique identifier of openShiftChangeRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_delete_open_shift_change_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_delete_open_shift_change_requests(
        connection,
        group_id,
        open_shift_change_request_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/groups/#{group_id}/team/schedule/openShiftChangeRequests/#{open_shift_change_request_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete openShift
  Delete an openShift object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `open_shift_id` (String.t): The unique identifier of openShift
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_delete_open_shifts(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_delete_open_shifts(connection, group_id, open_shift_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/schedule/openShifts/#{open_shift_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete schedulingGroup
  Mark a schedulingGroup as inactive by setting its isActive property. This method does not remove the schedulingGroup from the schedule. Existing shift instances assigned to the scheduling group remain part of the group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `scheduling_group_id` (String.t): The unique identifier of schedulingGroup
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_delete_scheduling_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_delete_scheduling_groups(
        connection,
        group_id,
        scheduling_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/schedule/schedulingGroups/#{scheduling_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete shift
  Delete a shift from the schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `shift_id` (String.t): The unique identifier of shift
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_delete_shifts(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_delete_shifts(connection, group_id, shift_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/schedule/shifts/#{shift_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property swapShiftsChangeRequests for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `swap_shifts_change_request_id` (String.t): The unique identifier of swapShiftsChangeRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_delete_swap_shifts_change_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_delete_swap_shifts_change_requests(
        connection,
        group_id,
        swap_shifts_change_request_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/groups/#{group_id}/team/schedule/swapShiftsChangeRequests/#{swap_shifts_change_request_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete timeOffReason
  Mark a timeOffReason as inactive by setting the isActive property. Every team must include at least one timeoff reason. This method doesn't remove the specified timeOffReason instance. timeOffItem instances that have been assigned this reason remain assigned to this reason. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `time_off_reason_id` (String.t): The unique identifier of timeOffReason
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_delete_time_off_reasons(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_delete_time_off_reasons(
        connection,
        group_id,
        time_off_reason_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/schedule/timeOffReasons/#{time_off_reason_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete timeOffRequest
  Delete a timeOffRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `time_off_request_id` (String.t): The unique identifier of timeOffRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_delete_time_off_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_delete_time_off_requests(
        connection,
        group_id,
        time_off_request_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/schedule/timeOffRequests/#{time_off_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete timeOff
  Delete a timeOff instance from a schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `time_off_id` (String.t): The unique identifier of timeOff
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_delete_times_off(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_delete_times_off(connection, group_id, time_off_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/schedule/timesOff/#{time_off_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get offerShiftRequest
  Retrieve the properties and relationships of an offerShiftRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `offer_shift_request_id` (String.t): The unique identifier of offerShiftRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_get_offer_shift_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_get_offer_shift_requests(
        connection,
        group_id,
        offer_shift_request_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/offerShiftRequests/#{offer_shift_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get openShiftChangeRequest
  Retrieve the properties and relationships of an openShiftChangeRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `open_shift_change_request_id` (String.t): The unique identifier of openShiftChangeRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_get_open_shift_change_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_get_open_shift_change_requests(
        connection,
        group_id,
        open_shift_change_request_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/schedule/openShiftChangeRequests/#{open_shift_change_request_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get openShift
  Retrieve the properties and relationships of an openshift object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `open_shift_id` (String.t): The unique identifier of openShift
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_get_open_shifts(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_get_open_shifts(connection, group_id, open_shift_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/openShifts/#{open_shift_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get schedulingGroup
  Retrieve the properties and relationships of a schedulingGroup by ID. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `scheduling_group_id` (String.t): The unique identifier of schedulingGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_get_scheduling_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_get_scheduling_groups(
        connection,
        group_id,
        scheduling_group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/schedulingGroups/#{scheduling_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get shift
  Retrieve the properties and relationships of a shift object by ID. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `shift_id` (String.t): The unique identifier of shift
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_get_shifts(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_get_shifts(connection, group_id, shift_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/shifts/#{shift_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get swapShiftsChangeRequest
  Retrieve the properties and relationships of a swapShiftsChangeRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `swap_shifts_change_request_id` (String.t): The unique identifier of swapShiftsChangeRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_get_swap_shifts_change_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_get_swap_shifts_change_requests(
        connection,
        group_id,
        swap_shifts_change_request_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/groups/#{group_id}/team/schedule/swapShiftsChangeRequests/#{swap_shifts_change_request_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get timeOffReason
  Retrieve the properties and relationships of a timeOffReason object by ID. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `time_off_reason_id` (String.t): The unique identifier of timeOffReason
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_get_time_off_reasons(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_get_time_off_reasons(
        connection,
        group_id,
        time_off_reason_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/timeOffReasons/#{time_off_reason_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffReason},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get timeOffRequest
  Retrieve the properties and relationships of a timeoffrequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `time_off_request_id` (String.t): The unique identifier of timeOffRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_get_time_off_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_get_time_off_requests(
        connection,
        group_id,
        time_off_request_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/timeOffRequests/#{time_off_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get timeOff
  Retrieve the properties and relationships of a timeOff object by ID. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `time_off_id` (String.t): The unique identifier of timeOff
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_get_times_off(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_get_times_off(connection, group_id, time_off_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/timesOff/#{time_off_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOff},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List offerShiftRequest
  Retrieve the properties and relationships of all offerShiftRequest objects in a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_list_offer_shift_requests(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequestCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_list_offer_shift_requests(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/offerShiftRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List openShiftChangeRequests
  Retrieve a list of openShiftChangeRequest objects in a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_list_open_shift_change_requests(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequestCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_list_open_shift_change_requests(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/openShiftChangeRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List openShifts
  List openShift objects in a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_list_open_shifts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_list_open_shifts(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/openShifts")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShiftCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List scheduleGroups
  Get the list of schedulingGroups in this schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_list_scheduling_groups(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroupCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_list_scheduling_groups(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/schedulingGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedulingGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List shifts
  Get the list of shift instances in a schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphShiftCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_list_shifts(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphShiftCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_list_shifts(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/shifts")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphShiftCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List swapShiftsChangeRequest
  Retrieve a list of swapShiftsChangeRequest objects in the team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_list_swap_shifts_change_requests(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequestCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_list_swap_shifts_change_requests(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/swapShiftsChangeRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List timeOffReasons
  Get the list of timeOffReasons in a schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReasonCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_list_time_off_reasons(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReasonCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_list_time_off_reasons(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/timeOffReasons")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffReasonCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List timeOffRequest
  Retrieve a list of timeOffRequest objects in the team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_list_time_off_requests(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequestCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_list_time_off_requests(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/timeOffRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List timesOff
  Get the list of timeOff instances in a schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_list_times_off(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_list_times_off(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/timesOff")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_offer_shift_requests_get_count_a576(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_offer_shift_requests_get_count_a576(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/offerShiftRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_open_shift_change_requests_get_count_a139(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_open_shift_change_requests_get_count_a139(
        connection,
        group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/openShiftChangeRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_open_shifts_get_count_bc49(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_open_shifts_get_count_bc49(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/openShifts/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_scheduling_groups_get_count_dd9d(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_scheduling_groups_get_count_dd9d(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/schedulingGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_shifts_get_count_b3cf(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_shifts_get_count_b3cf(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/shifts/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_swap_shifts_change_requests_get_count61ae(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_swap_shifts_change_requests_get_count61ae(
        connection,
        group_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/swapShiftsChangeRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_time_off_reasons_get_count_bf68(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_time_off_reasons_get_count_bf68(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/timeOffReasons/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_time_off_requests_get_count082b(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_time_off_requests_get_count082b(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/timeOffRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_times_off_get_count_e64b(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_times_off_get_count_e64b(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/schedule/timesOff/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property offerShiftRequests in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `offer_shift_request_id` (String.t): The unique identifier of offerShiftRequest
  - `microsoft_graph_offer_shift_request` (MicrosoftGraphOfferShiftRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_update_offer_shift_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_update_offer_shift_requests(
        connection,
        group_id,
        offer_shift_request_id,
        microsoft_graph_offer_shift_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/schedule/offerShiftRequests/#{offer_shift_request_id}")
      |> add_param(:body, :body, microsoft_graph_offer_shift_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property openShiftChangeRequests in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `open_shift_change_request_id` (String.t): The unique identifier of openShiftChangeRequest
  - `microsoft_graph_open_shift_change_request` (MicrosoftGraphOpenShiftChangeRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_update_open_shift_change_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_update_open_shift_change_requests(
        connection,
        group_id,
        open_shift_change_request_id,
        microsoft_graph_open_shift_change_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/groups/#{group_id}/team/schedule/openShiftChangeRequests/#{open_shift_change_request_id}"
      )
      |> add_param(:body, :body, microsoft_graph_open_shift_change_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update openShift
  Update the properties of an openShift object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `open_shift_id` (String.t): The unique identifier of openShift
  - `microsoft_graph_open_shift` (MicrosoftGraphOpenShift): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_update_open_shifts(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphOpenShift.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_update_open_shifts(
        connection,
        group_id,
        open_shift_id,
        microsoft_graph_open_shift,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/schedule/openShifts/#{open_shift_id}")
      |> add_param(:body, :body, microsoft_graph_open_shift)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Replace schedulingGroup
  Replace an existing schedulingGroup. If the specified schedulingGroup doesn't exist, this method returns 404 Not found.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `scheduling_group_id` (String.t): The unique identifier of schedulingGroup
  - `microsoft_graph_scheduling_group` (MicrosoftGraphSchedulingGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_update_scheduling_groups(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_update_scheduling_groups(
        connection,
        group_id,
        scheduling_group_id,
        microsoft_graph_scheduling_group,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/schedule/schedulingGroups/#{scheduling_group_id}")
      |> add_param(:body, :body, microsoft_graph_scheduling_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Replace shift
  Replace an existing shift. If the specified shift doesn't exist, this method returns 404 Not found. The duration of a shift can't be less than 1 minute or longer than 24 hours.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `shift_id` (String.t): The unique identifier of shift
  - `microsoft_graph_shift` (MicrosoftGraphShift): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_update_shifts(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphShift.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_update_shifts(
        connection,
        group_id,
        shift_id,
        microsoft_graph_shift,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/schedule/shifts/#{shift_id}")
      |> add_param(:body, :body, microsoft_graph_shift)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property swapShiftsChangeRequests in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `swap_shifts_change_request_id` (String.t): The unique identifier of swapShiftsChangeRequest
  - `microsoft_graph_swap_shifts_change_request` (MicrosoftGraphSwapShiftsChangeRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_update_swap_shifts_change_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_update_swap_shifts_change_requests(
        connection,
        group_id,
        swap_shifts_change_request_id,
        microsoft_graph_swap_shifts_change_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/groups/#{group_id}/team/schedule/swapShiftsChangeRequests/#{swap_shifts_change_request_id}"
      )
      |> add_param(:body, :body, microsoft_graph_swap_shifts_change_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Replace timeOffReason
  Replace an existing timeOffReason. If the specified timeOffReason doesn't exist, this method returns 404 Not found.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `time_off_reason_id` (String.t): The unique identifier of timeOffReason
  - `microsoft_graph_time_off_reason` (MicrosoftGraphTimeOffReason): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_update_time_off_reasons(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_update_time_off_reasons(
        connection,
        group_id,
        time_off_reason_id,
        microsoft_graph_time_off_reason,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/schedule/timeOffReasons/#{time_off_reason_id}")
      |> add_param(:body, :body, microsoft_graph_time_off_reason)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffReason},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property timeOffRequests in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `time_off_request_id` (String.t): The unique identifier of timeOffRequest
  - `microsoft_graph_time_off_request` (MicrosoftGraphTimeOffRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_update_time_off_requests(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_update_time_off_requests(
        connection,
        group_id,
        time_off_request_id,
        microsoft_graph_time_off_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/schedule/timeOffRequests/#{time_off_request_id}")
      |> add_param(:body, :body, microsoft_graph_time_off_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Replace timeOff
  Replace an existing timeOff object. If the specified timeOff object doesn't exist, this method returns 404 Not found.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `time_off_id` (String.t): The unique identifier of timeOff
  - `microsoft_graph_time_off` (MicrosoftGraphTimeOff): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_schedule_update_times_off(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTimeOff.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_schedule_update_times_off(
        connection,
        group_id,
        time_off_id,
        microsoft_graph_time_off,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/schedule/timesOff/#{time_off_id}")
      |> add_param(:body, :body, microsoft_graph_time_off)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOff},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create teamworkTagMember
  Create a new teamworkTagMember object in a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teamwork_tag_id` (String.t): The unique identifier of teamworkTag
  - `microsoft_graph_teamwork_tag_member` (MicrosoftGraphTeamworkTagMember): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_tags_create_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMember.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_tags_create_members(
        connection,
        group_id,
        teamwork_tag_id,
        microsoft_graph_teamwork_tag_member,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/tags/#{teamwork_tag_id}/members")
      |> add_param(:body, :body, microsoft_graph_teamwork_tag_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete teamworkTagMember
  Delete a member from a standard tag in a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teamwork_tag_id` (String.t): The unique identifier of teamworkTag
  - `teamwork_tag_member_id` (String.t): The unique identifier of teamworkTagMember
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_tags_delete_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_tags_delete_members(
        connection,
        group_id,
        teamwork_tag_id,
        teamwork_tag_member_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/team/tags/#{teamwork_tag_id}/members/#{teamwork_tag_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_tags_get_count_a8f7(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_tags_get_count_a8f7(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/tags/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamworkTagMember
  Get the properties and relationships of a member of a standard tag in a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teamwork_tag_id` (String.t): The unique identifier of teamworkTag
  - `teamwork_tag_member_id` (String.t): The unique identifier of teamworkTagMember
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_tags_get_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_tags_get_members(
        connection,
        group_id,
        teamwork_tag_id,
        teamwork_tag_member_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/tags/#{teamwork_tag_id}/members/#{teamwork_tag_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List members in a teamworkTag
  Get a list of the members of a standard tag in a team and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teamwork_tag_id` (String.t): The unique identifier of teamworkTag
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMemberCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_tags_list_members(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMemberCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_tags_list_members(connection, group_id, teamwork_tag_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/tags/#{teamwork_tag_id}/members")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMemberCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teamwork_tag_id` (String.t): The unique identifier of teamworkTag
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_tags_members_get_count2a7d(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_tags_members_get_count2a7d(connection, group_id, teamwork_tag_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/team/tags/#{teamwork_tag_id}/members/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property members in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teamwork_tag_id` (String.t): The unique identifier of teamworkTag
  - `teamwork_tag_member_id` (String.t): The unique identifier of teamworkTagMember
  - `microsoft_graph_teamwork_tag_member` (MicrosoftGraphTeamworkTagMember): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_tags_update_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMember.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_tags_update_members(
        connection,
        group_id,
        teamwork_tag_id,
        teamwork_tag_member_id,
        microsoft_graph_teamwork_tag_member,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/tags/#{teamwork_tag_id}/members/#{teamwork_tag_member_id}")
      |> add_param(:body, :body, microsoft_graph_teamwork_tag_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamworkTagMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Patch channel
  Update the properties of the specified channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `microsoft_graph_channel` (MicrosoftGraphChannel): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_update_channels(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChannel.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_update_channels(
        connection,
        group_id,
        channel_id,
        microsoft_graph_channel,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}")
      |> add_param(:body, :body, microsoft_graph_channel)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property installedApps in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `microsoft_graph_teams_app_installation` (MicrosoftGraphTeamsAppInstallation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_update_installed_apps(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_update_installed_apps(
        connection,
        group_id,
        teams_app_installation_id,
        microsoft_graph_teams_app_installation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/installedApps/#{teams_app_installation_id}")
      |> add_param(:body, :body, microsoft_graph_teams_app_installation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update member in team
  Update the role of a conversationMember in a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_update_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphConversationMember.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_update_members(
        connection,
        group_id,
        conversation_member_id,
        microsoft_graph_conversation_member,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/members/#{conversation_member_id}")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property operations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_async_operation_id` (String.t): The unique identifier of teamsAsyncOperation
  - `microsoft_graph_teams_async_operation` (MicrosoftGraphTeamsAsyncOperation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_update_operations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_update_operations(
        connection,
        group_id,
        teams_async_operation_id,
        microsoft_graph_teams_async_operation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/operations/#{teams_async_operation_id}")
      |> add_param(:body, :body, microsoft_graph_teams_async_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAsyncOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property permissionGrants in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `resource_specific_permission_grant_id` (String.t): The unique identifier of resourceSpecificPermissionGrant
  - `microsoft_graph_resource_specific_permission_grant` (MicrosoftGraphResourceSpecificPermissionGrant): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_update_permission_grants(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_update_permission_grants(
        connection,
        group_id,
        resource_specific_permission_grant_id,
        microsoft_graph_resource_specific_permission_grant,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/permissionGrants/#{resource_specific_permission_grant_id}")
      |> add_param(:body, :body, microsoft_graph_resource_specific_permission_grant)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property photo in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_profile_photo` (MicrosoftGraphProfilePhoto): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_update_photo(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_update_photo(connection, group_id, microsoft_graph_profile_photo, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/photo")
      |> add_param(:body, :body, microsoft_graph_profile_photo)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphProfilePhoto},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property photo in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_update_photo_content(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_update_photo_content(connection, group_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/team/photo/$value")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property primaryChannel in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_channel` (MicrosoftGraphChannel): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_update_primary_channel(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChannel.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_update_primary_channel(
        connection,
        group_id,
        microsoft_graph_channel,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/primaryChannel")
      |> add_param(:body, :body, microsoft_graph_channel)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property schedule in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_schedule` (MicrosoftGraphSchedule): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_update_schedule(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSchedule.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedule.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_update_schedule(connection, group_id, microsoft_graph_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/team/schedule")
      |> add_param(:body, :body, microsoft_graph_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update teamworkTag
  Update the properties of a tag object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teamwork_tag_id` (String.t): The unique identifier of teamworkTag
  - `microsoft_graph_teamwork_tag` (MicrosoftGraphTeamworkTag): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTag.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_team_update_tags(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamworkTag.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamworkTag.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_team_update_tags(
        connection,
        group_id,
        teamwork_tag_id,
        microsoft_graph_teamwork_tag,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/team/tags/#{teamwork_tag_id}")
      |> add_param(:body, :body, microsoft_graph_teamwork_tag)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamworkTag},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property team in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_team` (MicrosoftGraphTeam): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_update_team(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeam.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_update_team(connection, group_id, microsoft_graph_team, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/team")
      |> add_param(:body, :body, microsoft_graph_team)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeam},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
