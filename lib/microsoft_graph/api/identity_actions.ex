# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.IdentityActions do
  @moduledoc """
  API calls for all endpoints tagged `IdentityActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action uploadClientCertificate
  Upload a PKCS 12 format key (.pfx) to an API connector's authentication configuration. The input is a base-64 encoded value of the PKCS 12 certificate contents. This method returns an apiConnector. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `identity_api_connector_id` (String.t): The unique identifier of identityApiConnector
  - `identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_federation_signup_upload_client_certificate_request` (IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificate2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_api_connectors_identity_api_connector_upload_client_certificate(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificateRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificate2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_api_connectors_identity_api_connector_upload_client_certificate(
        connection,
        identity_api_connector_id,
        identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_federation_signup_upload_client_certificate_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/identity/apiConnectors/#{identity_api_connector_id}/uploadClientCertificate")
      |> add_param(
        :body,
        :body,
        identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_federation_signup_upload_client_certificate_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificate2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action uploadClientCertificate
  Upload a PKCS 12 format key (.pfx) to an API connector's authentication configuration. The input is a base-64 encoded value of the PKCS 12 certificate contents. This method returns an apiConnector. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_federation_signup_upload_client_certificate_request` (IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificate2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_attribute_collection_upload_client_certificate(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificateRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificate2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_attribute_collection_upload_client_certificate(
        connection,
        b2x_identity_user_flow_id,
        identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_federation_signup_upload_client_certificate_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postAttributeCollection/uploadClientCertificate"
      )
      |> add_param(
        :body,
        :body,
        identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_federation_signup_upload_client_certificate_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificate2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action uploadClientCertificate
  Upload a PKCS 12 format key (.pfx) to an API connector's authentication configuration. The input is a base-64 encoded value of the PKCS 12 certificate contents. This method returns an apiConnector. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_federation_signup_upload_client_certificate_request` (IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificate2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_federation_signup_upload_client_certificate(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificateRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificate2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_federation_signup_upload_client_certificate(
        connection,
        b2x_identity_user_flow_id,
        identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_federation_signup_upload_client_certificate_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postFederationSignup/uploadClientCertificate"
      )
      |> add_param(
        :body,
        :body,
        identity_b2x_user_flows_b2x_identity_user_flow_api_connector_configuration_post_federation_signup_upload_client_certificate_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowApiConnectorConfigurationPostFederationSignupUploadClientCertificate2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setOrder
  Set the order of identityUserFlowAttributeAssignments being collected within a user flow. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `identity_b2x_user_flows_b2x_identity_user_flow_user_attribute_assignments_set_order_request` (IdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsSetOrderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_b2x_identity_user_flow_user_attribute_assignments_set_order(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.IdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsSetOrderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_b2x_user_flows_b2x_identity_user_flow_user_attribute_assignments_set_order(
        connection,
        b2x_identity_user_flow_id,
        identity_b2x_user_flows_b2x_identity_user_flow_user_attribute_assignments_set_order_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userAttributeAssignments/setOrder"
      )
      |> add_param(
        :body,
        :body,
        identity_b2x_user_flows_b2x_identity_user_flow_user_attribute_assignments_set_order_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action updateAllowedCombinations
  Update the allowedCombinations property of an authenticationStrengthPolicy object. To update other properties of an authenticationStrengthPolicy object, use the Update authenticationStrengthPolicy method. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `authentication_strength_policy_id` (String.t): The unique identifier of authenticationStrengthPolicy
  - `identity_conditional_access_authentication_strength_policies_authentication_strength_policy_update_allowed_combinations_request` (IdentityConditionalAccessAuthenticationStrengthPoliciesAuthenticationStrengthPolicyUpdateAllowedCombinationsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityConditionalAccessAuthenticationStrengthPoliciesAuthenticationStrengthPolicyUpdateAllowedCombinations2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_conditional_access_authentication_strength_policies_authentication_strength_policy_update_allowed_combinations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.IdentityConditionalAccessAuthenticationStrengthPoliciesAuthenticationStrengthPolicyUpdateAllowedCombinationsRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.IdentityConditionalAccessAuthenticationStrengthPoliciesAuthenticationStrengthPolicyUpdateAllowedCombinations2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_conditional_access_authentication_strength_policies_authentication_strength_policy_update_allowed_combinations(
        connection,
        authentication_strength_policy_id,
        identity_conditional_access_authentication_strength_policies_authentication_strength_policy_update_allowed_combinations_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identity/conditionalAccess/authenticationStrength/policies/#{authentication_strength_policy_id}/updateAllowedCombinations"
      )
      |> add_param(
        :body,
        :body,
        identity_conditional_access_authentication_strength_policies_authentication_strength_policy_update_allowed_combinations_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.IdentityConditionalAccessAuthenticationStrengthPoliciesAuthenticationStrengthPolicyUpdateAllowedCombinations2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
