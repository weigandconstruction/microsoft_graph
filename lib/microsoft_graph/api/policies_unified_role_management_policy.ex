# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.PoliciesUnifiedRoleManagementPolicy do
  @moduledoc """
  API calls for all endpoints tagged `PoliciesUnifiedRoleManagementPolicy`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create new navigation property to roleManagementPolicies for policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_management_policy` (MicrosoftGraphUnifiedRoleManagementPolicy): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_create_role_management_policies(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicy.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicy.t} | {:error, Tesla.Env.t}
  def policies_create_role_management_policies(connection, microsoft_graph_unified_role_management_policy, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/policies/roleManagementPolicies")
      |> add_param(:body, :body, microsoft_graph_unified_role_management_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleManagementPolicies for policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_delete_role_management_policies(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def policies_delete_role_management_policies(connection, unified_role_management_policy_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleManagementPolicy
  Retrieve the details of a role management policy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_get_role_management_policies(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicy.t} | {:error, Tesla.Env.t}
  def policies_get_role_management_policies(connection, unified_role_management_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleManagementPolicies
  Get the details of the policies in PIM that can be applied to Microsoft Entra roles or group membership or ownership. To retrieve policies that apply to Azure RBAC, use the Azure REST PIM API for role management policies. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_list_role_management_policies(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def policies_list_role_management_policies(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/roleManagementPolicies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to effectiveRules for policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `microsoft_graph_unified_role_management_policy_rule` (MicrosoftGraphUnifiedRoleManagementPolicyRule): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_create_effective_rules(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_create_effective_rules(connection, unified_role_management_policy_id, microsoft_graph_unified_role_management_policy_rule, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/effectiveRules")
      |> add_param(:body, :body, microsoft_graph_unified_role_management_policy_rule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to rules for policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `microsoft_graph_unified_role_management_policy_rule` (MicrosoftGraphUnifiedRoleManagementPolicyRule): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_create_rules(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_create_rules(connection, unified_role_management_policy_id, microsoft_graph_unified_role_management_policy_rule, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/rules")
      |> add_param(:body, :body, microsoft_graph_unified_role_management_policy_rule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property effectiveRules for policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `unified_role_management_policy_rule_id` (String.t): The unique identifier of unifiedRoleManagementPolicyRule
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_delete_effective_rules(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_delete_effective_rules(connection, unified_role_management_policy_id, unified_role_management_policy_rule_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/effectiveRules/#{unified_role_management_policy_rule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property rules for policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `unified_role_management_policy_rule_id` (String.t): The unique identifier of unifiedRoleManagementPolicyRule
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_delete_rules(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_delete_rules(connection, unified_role_management_policy_id, unified_role_management_policy_rule_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/rules/#{unified_role_management_policy_rule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_effective_rules_get_count5858(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_effective_rules_get_count5858(connection, unified_role_management_policy_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/effectiveRules/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_get_count_cdca(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_get_count_cdca(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/roleManagementPolicies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get effectiveRules from policies
  The list of effective rules like approval rules and expiration rules evaluated based on inherited referenced rules. For example, if there is a tenant-wide policy to enforce enabling an approval rule, the effective rule will be to enable approval even if the policy has a rule to disable approval. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `unified_role_management_policy_rule_id` (String.t): The unique identifier of unifiedRoleManagementPolicyRule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_get_effective_rules(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_get_effective_rules(connection, unified_role_management_policy_id, unified_role_management_policy_rule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/effectiveRules/#{unified_role_management_policy_rule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleManagementPolicyRule
  Retrieve a rule or settings defined for a role management policy. The rule can be one of the following types that are derived from the unifiedRoleManagementPolicyRule object: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `unified_role_management_policy_rule_id` (String.t): The unique identifier of unifiedRoleManagementPolicyRule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_get_rules(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_get_rules(connection, unified_role_management_policy_id, unified_role_management_policy_rule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/rules/#{unified_role_management_policy_rule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get effectiveRules from policies
  The list of effective rules like approval rules and expiration rules evaluated based on inherited referenced rules. For example, if there is a tenant-wide policy to enforce enabling an approval rule, the effective rule will be to enable approval even if the policy has a rule to disable approval. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRuleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_list_effective_rules(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRuleCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_list_effective_rules(connection, unified_role_management_policy_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/effectiveRules")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRuleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List rules (for a role management policy)
  Get the rules or settings defined for a role management policy. The rules are a collection of following types that are derived from the unifiedRoleManagementPolicyRule object: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRuleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_list_rules(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRuleCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_list_rules(connection, unified_role_management_policy_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/rules")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRuleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_rules_get_count6c00(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_rules_get_count6c00(connection, unified_role_management_policy_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/rules/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property effectiveRules in policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `unified_role_management_policy_rule_id` (String.t): The unique identifier of unifiedRoleManagementPolicyRule
  - `microsoft_graph_unified_role_management_policy_rule` (MicrosoftGraphUnifiedRoleManagementPolicyRule): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_update_effective_rules(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_update_effective_rules(connection, unified_role_management_policy_id, unified_role_management_policy_rule_id, microsoft_graph_unified_role_management_policy_rule, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/effectiveRules/#{unified_role_management_policy_rule_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_management_policy_rule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update unifiedRoleManagementPolicyRule
  Update a rule defined for a role management policy. The rule can be one of the following types that are derived from the unifiedRoleManagementPolicyRule object: For more information about rules for Microsoft Entra roles and examples of updating rules, see the following articles: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `unified_role_management_policy_rule_id` (String.t): The unique identifier of unifiedRoleManagementPolicyRule
  - `microsoft_graph_unified_role_management_policy_rule` (MicrosoftGraphUnifiedRoleManagementPolicyRule): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_role_management_policies_update_rules(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule.t} | {:error, Tesla.Env.t}
  def policies_role_management_policies_update_rules(connection, unified_role_management_policy_id, unified_role_management_policy_rule_id, microsoft_graph_unified_role_management_policy_rule, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}/rules/#{unified_role_management_policy_rule_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_management_policy_rule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicyRule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleManagementPolicies in policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_management_policy_id` (String.t): The unique identifier of unifiedRoleManagementPolicy
  - `microsoft_graph_unified_role_management_policy` (MicrosoftGraphUnifiedRoleManagementPolicy): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_update_role_management_policies(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicy.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicy.t} | {:error, Tesla.Env.t}
  def policies_update_role_management_policies(connection, unified_role_management_policy_id, microsoft_graph_unified_role_management_policy, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/policies/roleManagementPolicies/#{unified_role_management_policy_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_management_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleManagementPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
