# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.SitesStore do
  @moduledoc """
  API calls for all endpoints tagged `SitesStore`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create new navigation property to termStores for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_term_store_store` (MicrosoftGraphTermStoreStore): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_create_term_stores(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_create_term_stores(connection, site_id, microsoft_graph_term_store_store, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores")
      |> add_param(:body, :body, microsoft_graph_term_store_store)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStore},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property termStore for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_delete_term_store(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_delete_term_store(connection, site_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property termStores for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_delete_term_stores(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_delete_term_stores(connection, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get store
  Read the properties and relationships of a store object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_get_term_store(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_get_term_store(connection, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStore},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get termStores from sites
  The collection of termStores under this site.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_get_term_stores(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_get_term_stores(connection, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStore},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get termStores from sites
  The collection of termStores under this site.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStoreCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_list_term_stores(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStoreCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_list_term_stores(connection, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStoreCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create termStore group
  Create a new group object in a term store. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_create_groups(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_create_groups(connection, site_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/groups")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create termStore set
  Create a new set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_create_sets(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_create_sets(connection, site_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete group
  Delete a group object in a term store]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_delete_groups(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_delete_groups(connection, site_id, group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete set
  Delete a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_delete_sets(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_delete_sets(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group
  Read the properties and relationships of a term store group object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_get_groups(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_get_groups(connection, site_id, group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set
  Read the properties and relationships of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_get_sets(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_get_sets(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sets for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_create_sets(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_create_sets(connection, site_id, group_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sets for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_delete_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_delete_sets(connection, site_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_get_count_f00a(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_get_count_f00a(connection, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sets from sites
  All sets under the group in a term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_get_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_get_sets(connection, site_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sets
  Get a list of the set objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_list_sets(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_list_sets(connection, site_id, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_children_create_relations(connection, site_id, group_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_children_delete_relations(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_children_get_count_ecf0(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_children_get_count_ecf0(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_children_get_relations(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_children_get_set(connection, site_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_children_list_relations(connection, site_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_children_relations_get_count0d34(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_children_relations_get_count0d34(connection, site_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_children_relations_get_from_term(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_children_relations_get_set(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_children_relations_get_to_term(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_children_update_relations(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_create_children(connection, site_id, group_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_create_relations(connection, site_id, group_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_delete_children(connection, site_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_delete_relations(connection, site_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_get_children(connection, site_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_get_count_ecf0(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_get_count_ecf0(connection, site_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_get_relations(connection, site_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_get_set(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_list_children(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_list_relations(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_relations_get_count0d34(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_relations_get_count0d34(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_relations_get_from_term(connection, site_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_relations_get_set(connection, site_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_relations_get_to_term(connection, site_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_update_children(connection, site_id, group_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_children_update_relations(connection, site_id, group_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_create_children(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_create_children(connection, site_id, group_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_create_relations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_create_relations(connection, site_id, group_id, set_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_create_terms(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_create_terms(connection, site_id, group_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_delete_children(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property parentGroup for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_delete_parent_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_delete_parent_group(connection, site_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_delete_relations(connection, site_id, group_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_delete_terms(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_get_children(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_get_count5bbd(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_get_count5bbd(connection, site_id, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentGroup from sites
  The parent [group] that contains the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_get_parent_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_get_parent_group(connection, site_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_get_relations(connection, site_id, group_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_get_terms(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_list_children(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_list_children(connection, site_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_list_relations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_list_relations(connection, site_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_list_terms(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_list_terms(connection, site_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_relations_get_count_efa1(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_relations_get_count_efa1(connection, site_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_relations_get_from_term(connection, site_id, group_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_relations_get_set(connection, site_id, group_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_relations_get_to_term(connection, site_id, group_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_children_create_relations(connection, site_id, group_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_children_delete_relations(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_children_get_count1cfd(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_children_get_count1cfd(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_children_get_relations(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_children_get_set(connection, site_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_children_list_relations(connection, site_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_children_relations_get_count5476(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_children_relations_get_count5476(connection, site_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_children_relations_get_from_term(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_children_relations_get_set(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_children_relations_get_to_term(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_children_update_relations(connection, site_id, group_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_create_children(connection, site_id, group_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_create_relations(connection, site_id, group_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_delete_children(connection, site_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_delete_relations(connection, site_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_get_children(connection, site_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_get_count_ccfd(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_get_count_ccfd(connection, site_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_get_relations(connection, site_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_get_set(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_list_children(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_list_relations(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_relations_get_count5d1f(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_relations_get_count5d1f(connection, site_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_relations_get_from_term(connection, site_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_relations_get_set(connection, site_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_relations_get_to_term(connection, site_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_update_children(connection, site_id, group_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_terms_update_relations(connection, site_id, group_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_update_children(connection, site_id, group_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property parentGroup in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_update_parent_group(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_update_parent_group(connection, site_id, group_id, set_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/parentGroup")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_update_relations(connection, site_id, group_id, set_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_sets_update_terms(connection, site_id, group_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sets in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_groups_update_sets(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_groups_update_sets(connection, site_id, group_id, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}/sets/#{set_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List termStore groups
  Get a list of group objects in a term store. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_list_groups(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_list_groups(connection, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/groups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set
  Read the properties and relationships of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_list_sets(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_list_sets(connection, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_children_create_relations(connection, site_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_children_delete_relations(connection, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_children_get_count_ca80(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_children_get_count_ca80(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_children_get_relations(connection, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_children_get_set(connection, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_children_list_relations(connection, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_children_relations_get_count_a6ec(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_children_relations_get_count_a6ec(connection, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_children_relations_get_from_term(connection, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_children_relations_get_set(connection, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_children_relations_get_to_term(connection, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_children_update_relations(connection, site_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_create_children(connection, site_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_create_relations(connection, site_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_delete_children(connection, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_delete_relations(connection, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_get_children(connection, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_get_count_ca80(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_get_count_ca80(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_get_relations(connection, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_get_set(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_list_children(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_list_relations(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_relations_get_count_a6ec(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_relations_get_count_a6ec(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_relations_get_from_term(connection, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_relations_get_set(connection, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_relations_get_to_term(connection, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_update_children(connection, site_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_children_update_relations(connection, site_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_create_children(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_create_children(connection, site_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_create_relations(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_create_relations(connection, site_id, set_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_create_terms(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_create_terms(connection, site_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_delete_children(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property parentGroup for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_delete_parent_group(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_delete_parent_group(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_delete_relations(connection, site_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_delete_terms(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_get_children(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_get_count_dbcc(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_get_count_dbcc(connection, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentGroup from sites
  The parent [group] that contains the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_get_parent_group(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_get_parent_group(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_get_relations(connection, site_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_get_terms(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_list_children(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_list_children(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_list_relations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_list_relations(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_list_terms(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_list_terms(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sets for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_create_sets(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_create_sets(connection, site_id, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sets for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_delete_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_delete_sets(connection, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sets from sites
  All sets under the group in a term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_get_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_get_sets(connection, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sets
  Get a list of the set objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_list_sets(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_list_sets(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_children_create_relations(connection, site_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_children_delete_relations(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_children_get_count_dda5(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_children_get_count_dda5(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_children_get_relations(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_children_get_set(connection, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_children_list_relations(connection, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_children_relations_get_count0c01(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_children_relations_get_count0c01(connection, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_children_relations_get_from_term(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_children_relations_get_set(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_children_relations_get_to_term(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_children_update_relations(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_create_children(connection, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_create_relations(connection, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_delete_children(connection, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_delete_relations(connection, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_get_children(connection, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_get_count_dda5(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_get_count_dda5(connection, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_get_relations(connection, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_get_set(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_list_children(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_list_relations(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_relations_get_count0c01(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_relations_get_count0c01(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_relations_get_from_term(connection, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_relations_get_set(connection, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_relations_get_to_term(connection, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_update_children(connection, site_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_children_update_relations(connection, site_id, set_id, set_id1, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_create_children(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_create_children(connection, site_id, set_id, set_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_create_relations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_create_relations(connection, site_id, set_id, set_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_create_terms(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_create_terms(connection, site_id, set_id, set_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_delete_children(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_delete_relations(connection, site_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_delete_terms(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_get_children(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_get_count9c40(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_get_count9c40(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_get_relations(connection, site_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_get_terms(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_list_children(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_list_children(connection, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_list_relations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_list_relations(connection, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_list_terms(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_list_terms(connection, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_relations_get_count060a(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_relations_get_count060a(connection, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_relations_get_from_term(connection, site_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_relations_get_set(connection, site_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_relations_get_to_term(connection, site_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_children_create_relations(connection, site_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_children_delete_relations(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_children_get_count931c(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_children_get_count931c(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_children_get_relations(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_children_get_set(connection, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_children_list_relations(connection, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_children_relations_get_count457b(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_children_relations_get_count457b(connection, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_children_relations_get_from_term(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_children_relations_get_set(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_children_relations_get_to_term(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_children_update_relations(connection, site_id, set_id, set_id1, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_create_children(connection, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_create_relations(connection, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_delete_children(connection, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_delete_relations(connection, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_get_children(connection, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_get_count_bc2b(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_get_count_bc2b(connection, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_get_relations(connection, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_get_set(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_list_children(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_list_relations(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_relations_get_count_b43c(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_relations_get_count_b43c(connection, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_relations_get_from_term(connection, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_relations_get_set(connection, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_relations_get_to_term(connection, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_update_children(connection, site_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_terms_update_relations(connection, site_id, set_id, set_id1, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_update_children(connection, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_update_relations(connection, site_id, set_id, set_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_sets_update_terms(connection, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sets in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_parent_group_update_sets(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_parent_group_update_sets(connection, site_id, set_id, set_id1, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_relations_get_count_acd9(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_relations_get_count_acd9(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_relations_get_from_term(connection, site_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_relations_get_set(connection, site_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_relations_get_to_term(connection, site_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_children_create_relations(connection, site_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_children_delete_relations(connection, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_children_get_count4525(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_children_get_count4525(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_children_get_relations(connection, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_children_get_set(connection, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_children_list_relations(connection, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_children_relations_get_count7f33(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_children_relations_get_count7f33(connection, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_children_relations_get_from_term(connection, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_children_relations_get_set(connection, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_children_relations_get_to_term(connection, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_children_update_relations(connection, site_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_create_children(connection, site_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_create_relations(connection, site_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_delete_children(connection, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_delete_relations(connection, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_get_children(connection, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_get_count1c96(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_get_count1c96(connection, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_get_relations(connection, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_get_set(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_list_children(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_list_relations(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_relations_get_count017f(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_relations_get_count017f(connection, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_relations_get_from_term(connection, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_relations_get_set(connection, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_relations_get_to_term(connection, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_update_children(connection, site_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_terms_update_relations(connection, site_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_update_children(connection, site_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property parentGroup in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_update_parent_group(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_update_parent_group(connection, site_id, set_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_update_relations(connection, site_id, set_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_store_sets_update_terms(connection, site_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property groups in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_update_groups(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_update_groups(connection, site_id, group_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/groups/#{group_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update set
  Update the properties of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_store_update_sets(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_store_update_sets(connection, site_id, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore/sets/#{set_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create termStore group
  Create a new group object in a term store. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_create_groups(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_create_groups(connection, site_id, store_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create termStore set
  Create a new set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_create_sets(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_create_sets(connection, site_id, store_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete group
  Delete a group object in a term store]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_delete_groups(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_delete_groups(connection, site_id, store_id, group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete set
  Delete a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_delete_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_delete_sets(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_get_count00cb(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_get_count00cb(connection, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group
  Read the properties and relationships of a term store group object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_get_groups(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_get_groups(connection, site_id, store_id, group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set
  Read the properties and relationships of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_get_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_get_sets(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sets for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_create_sets(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_create_sets(connection, site_id, store_id, group_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sets for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_delete_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_delete_sets(connection, site_id, store_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_get_count6c15(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_get_count6c15(connection, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sets from sites
  All sets under the group in a term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_get_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_get_sets(connection, site_id, store_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sets
  Get a list of the set objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_list_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_list_sets(connection, site_id, store_id, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_children_create_relations(connection, site_id, store_id, group_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_children_delete_relations(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_children_get_count_f2a5(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_children_get_count_f2a5(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_children_get_relations(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_children_get_set(connection, site_id, store_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_children_list_relations(connection, site_id, store_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_children_relations_get_count_d2cc(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_children_relations_get_count_d2cc(connection, site_id, store_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_children_relations_get_from_term(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_children_relations_get_set(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_children_relations_get_to_term(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_children_update_relations(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_create_children(connection, site_id, store_id, group_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_create_relations(connection, site_id, store_id, group_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_delete_children(connection, site_id, store_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_delete_relations(connection, site_id, store_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_get_children(connection, site_id, store_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_get_count_f2a5(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_get_count_f2a5(connection, site_id, store_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_get_relations(connection, site_id, store_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_get_set(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_list_children(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_list_relations(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_relations_get_count_d2cc(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_relations_get_count_d2cc(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_relations_get_from_term(connection, site_id, store_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_relations_get_set(connection, site_id, store_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_relations_get_to_term(connection, site_id, store_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_update_children(connection, site_id, store_id, group_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_children_update_relations(connection, site_id, store_id, group_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_create_children(connection, site_id, store_id, group_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_create_relations(connection, site_id, store_id, group_id, set_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_create_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_create_terms(connection, site_id, store_id, group_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_delete_children(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property parentGroup for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_delete_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_delete_parent_group(connection, site_id, store_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_delete_relations(connection, site_id, store_id, group_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_delete_terms(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_get_children(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_get_count7f44(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_get_count7f44(connection, site_id, store_id, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentGroup from sites
  The parent [group] that contains the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_get_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_get_parent_group(connection, site_id, store_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_get_relations(connection, site_id, store_id, group_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_get_terms(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_list_children(connection, site_id, store_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_list_relations(connection, site_id, store_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_list_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_list_terms(connection, site_id, store_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_relations_get_count4b3b(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_relations_get_count4b3b(connection, site_id, store_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_relations_get_from_term(connection, site_id, store_id, group_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_relations_get_set(connection, site_id, store_id, group_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_relations_get_to_term(connection, site_id, store_id, group_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_children_create_relations(connection, site_id, store_id, group_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_children_delete_relations(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_children_get_count18db(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_children_get_count18db(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_children_get_relations(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_children_get_set(connection, site_id, store_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_children_list_relations(connection, site_id, store_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_children_relations_get_count563b(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_children_relations_get_count563b(connection, site_id, store_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_children_relations_get_from_term(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_children_relations_get_set(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_children_relations_get_to_term(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_children_update_relations(connection, site_id, store_id, group_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_create_children(connection, site_id, store_id, group_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_create_relations(connection, site_id, store_id, group_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_delete_children(connection, site_id, store_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_delete_relations(connection, site_id, store_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_get_children(connection, site_id, store_id, group_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_get_count0e2e(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_get_count0e2e(connection, site_id, store_id, group_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_get_relations(connection, site_id, store_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_get_set(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_list_children(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_list_relations(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_relations_get_count_c55c(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_relations_get_count_c55c(connection, site_id, store_id, group_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_relations_get_from_term(connection, site_id, store_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_relations_get_set(connection, site_id, store_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_relations_get_to_term(connection, site_id, store_id, group_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_update_children(connection, site_id, store_id, group_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_terms_update_relations(connection, site_id, store_id, group_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_update_children(connection, site_id, store_id, group_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property parentGroup in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_update_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_update_parent_group(connection, site_id, store_id, group_id, set_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/parentGroup")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_update_relations(connection, site_id, store_id, group_id, set_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_sets_update_terms(connection, site_id, store_id, group_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sets in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_groups_update_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_groups_update_sets(connection, site_id, store_id, group_id, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}/sets/#{set_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List termStore groups
  Get a list of group objects in a term store. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_list_groups(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_list_groups(connection, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set
  Read the properties and relationships of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_list_sets(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_list_sets(connection, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_children_create_relations(connection, site_id, store_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_children_delete_relations(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_children_get_count3380(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_children_get_count3380(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_children_get_relations(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_children_get_set(connection, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_children_list_relations(connection, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_children_relations_get_count6644(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_children_relations_get_count6644(connection, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_children_relations_get_from_term(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_children_relations_get_set(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_children_relations_get_to_term(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_children_update_relations(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_create_children(connection, site_id, store_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_create_relations(connection, site_id, store_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_delete_children(connection, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_delete_relations(connection, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_get_children(connection, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_get_count3380(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_get_count3380(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_get_relations(connection, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_get_set(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_list_children(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_list_relations(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_relations_get_count6644(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_relations_get_count6644(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_relations_get_from_term(connection, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_relations_get_set(connection, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_relations_get_to_term(connection, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_update_children(connection, site_id, store_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_children_update_relations(connection, site_id, store_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_create_children(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_create_children(connection, site_id, store_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_create_relations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_create_relations(connection, site_id, store_id, set_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_create_terms(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_create_terms(connection, site_id, store_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_delete_children(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property parentGroup for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_delete_parent_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_delete_parent_group(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_delete_relations(connection, site_id, store_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_delete_terms(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_get_children(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_get_count07f9(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_get_count07f9(connection, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentGroup from sites
  The parent [group] that contains the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_get_parent_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_get_parent_group(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_get_relations(connection, site_id, store_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_get_terms(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_list_children(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_list_children(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_list_relations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_list_relations(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_list_terms(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_list_terms(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sets for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_create_sets(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_create_sets(connection, site_id, store_id, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sets for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_delete_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_delete_sets(connection, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sets from sites
  All sets under the group in a term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_get_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_get_sets(connection, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sets
  Get a list of the set objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_list_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_list_sets(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_children_create_relations(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_children_delete_relations(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_children_get_count_a85c(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_children_get_count_a85c(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_children_get_relations(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_children_get_set(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_children_list_relations(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_children_relations_get_count227b(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_children_relations_get_count227b(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_children_relations_get_from_term(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_children_relations_get_set(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_children_relations_get_to_term(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_children_update_relations(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_create_children(connection, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_create_relations(connection, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_delete_children(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_delete_relations(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_get_children(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_get_count_a85c(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_get_count_a85c(connection, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_get_relations(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_get_set(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_list_children(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_list_relations(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_relations_get_count227b(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_relations_get_count227b(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_relations_get_from_term(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_relations_get_set(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_relations_get_to_term(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_update_children(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_children_update_relations(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_create_children(connection, site_id, store_id, set_id, set_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_create_relations(connection, site_id, store_id, set_id, set_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_create_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_create_terms(connection, site_id, store_id, set_id, set_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_delete_children(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_delete_relations(connection, site_id, store_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_delete_terms(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_get_children(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_get_count_bf6d(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_get_count_bf6d(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_get_relations(connection, site_id, store_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_get_terms(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_list_children(connection, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_list_relations(connection, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_list_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_list_terms(connection, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_relations_get_count_c83c(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_relations_get_count_c83c(connection, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_relations_get_from_term(connection, site_id, store_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_relations_get_set(connection, site_id, store_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_relations_get_to_term(connection, site_id, store_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_children_create_relations(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_children_delete_relations(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_children_get_count775b(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_children_get_count775b(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_children_get_relations(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_children_get_set(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_children_list_relations(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_children_relations_get_count_bd86(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_children_relations_get_count_bd86(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_children_relations_get_from_term(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_children_relations_get_set(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_children_relations_get_to_term(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_children_update_relations(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_create_children(connection, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_create_relations(connection, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_delete_children(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_delete_relations(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_get_children(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_get_count261f(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_get_count261f(connection, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_get_relations(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_get_set(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_list_children(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_list_relations(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_relations_get_count0036(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_relations_get_count0036(connection, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_relations_get_from_term(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_relations_get_set(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_relations_get_to_term(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_update_children(connection, site_id, store_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_terms_update_relations(connection, site_id, store_id, set_id, set_id1, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_update_children(connection, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_update_relations(connection, site_id, store_id, set_id, set_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_sets_update_terms(connection, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sets in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_parent_group_update_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_parent_group_update_sets(connection, site_id, store_id, set_id, set_id1, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_relations_get_count5a39(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_relations_get_count5a39(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_relations_get_from_term(connection, site_id, store_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_relations_get_set(connection, site_id, store_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_relations_get_to_term(connection, site_id, store_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_children_create_relations(connection, site_id, store_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_children_delete_relations(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_children_get_count6a9c(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_children_get_count6a9c(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_children_get_relations(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_children_get_set(connection, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_children_list_relations(connection, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_children_relations_get_count_f9a6(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_children_relations_get_count_f9a6(connection, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_children_relations_get_from_term(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_children_relations_get_set(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_children_relations_get_to_term(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_children_update_relations(connection, site_id, store_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_create_children(connection, site_id, store_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_create_relations(connection, site_id, store_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_delete_children(connection, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_delete_relations(connection, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_get_children(connection, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_get_count26b6(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_get_count26b6(connection, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_get_relations(connection, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_get_set(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from sites
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_list_children(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from sites
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_list_relations(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_relations_get_count3f58(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_relations_get_count3f58(connection, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from sites
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_relations_get_from_term(connection, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from sites
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_relations_get_set(connection, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from sites
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_relations_get_to_term(connection, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_update_children(connection, site_id, store_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_terms_update_relations(connection, site_id, store_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_update_children(connection, site_id, store_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property parentGroup in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_update_parent_group(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_update_parent_group(connection, site_id, store_id, set_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_update_relations(connection, site_id, store_id, set_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def sites_term_stores_sets_update_terms(connection, site_id, store_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property groups in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id` (String.t): The unique identifier of group
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_update_groups(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_update_groups(connection, site_id, store_id, group_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update set
  Update the properties of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_term_stores_update_sets(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_term_stores_update_sets(connection, site_id, store_id, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update store
  Update the properties of a store object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_term_store_store` (MicrosoftGraphTermStoreStore): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_update_term_store(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_update_term_store(connection, site_id, microsoft_graph_term_store_store, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStore")
      |> add_param(:body, :body, microsoft_graph_term_store_store)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStore},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property termStores in sites

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `microsoft_graph_term_store_store` (MicrosoftGraphTermStoreStore): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec sites_update_term_stores(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def sites_update_term_stores(connection, site_id, store_id, microsoft_graph_term_store_store, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/sites/#{site_id}/termStores/#{store_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_store)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStore},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
