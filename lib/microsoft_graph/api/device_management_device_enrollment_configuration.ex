# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceManagementDeviceEnrollmentConfiguration do
  @moduledoc """
  API calls for all endpoints tagged `DeviceManagementDeviceEnrollmentConfiguration`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create deviceEnrollmentPlatformRestrictionsConfiguration
  Create a new deviceEnrollmentPlatformRestrictionsConfiguration object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_device_enrollment_configuration` (MicrosoftGraphDeviceEnrollmentConfiguration): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_create_device_enrollment_configurations(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfiguration.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfiguration.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_create_device_enrollment_configurations(connection, microsoft_graph_device_enrollment_configuration, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceEnrollmentConfigurations")
      |> add_param(:body, :body, microsoft_graph_device_enrollment_configuration)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete deviceEnrollmentLimitConfiguration
  Deletes a deviceEnrollmentLimitConfiguration.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_enrollment_configuration_id` (String.t): The unique identifier of deviceEnrollmentConfiguration
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_delete_device_enrollment_configurations(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_delete_device_enrollment_configurations(connection, device_enrollment_configuration_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/#{device_enrollment_configuration_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_enrollment_configuration_id` (String.t): The unique identifier of deviceEnrollmentConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_enrollment_configurations_assignments_get_count_f0d7(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_enrollment_configurations_assignments_get_count_f0d7(connection, device_enrollment_configuration_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/#{device_enrollment_configuration_id}/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create enrollmentConfigurationAssignment
  Create a new enrollmentConfigurationAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_enrollment_configuration_id` (String.t): The unique identifier of deviceEnrollmentConfiguration
  - `microsoft_graph_enrollment_configuration_assignment` (MicrosoftGraphEnrollmentConfigurationAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_enrollment_configurations_create_assignments(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment.t} | {:error, Tesla.Env.t}
  def device_management_device_enrollment_configurations_create_assignments(connection, device_enrollment_configuration_id, microsoft_graph_enrollment_configuration_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/#{device_enrollment_configuration_id}/assignments")
      |> add_param(:body, :body, microsoft_graph_enrollment_configuration_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete enrollmentConfigurationAssignment
  Deletes a enrollmentConfigurationAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_enrollment_configuration_id` (String.t): The unique identifier of deviceEnrollmentConfiguration
  - `enrollment_configuration_assignment_id` (String.t): The unique identifier of enrollmentConfigurationAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_enrollment_configurations_delete_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_enrollment_configurations_delete_assignments(connection, device_enrollment_configuration_id, enrollment_configuration_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/#{device_enrollment_configuration_id}/assignments/#{enrollment_configuration_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get enrollmentConfigurationAssignment
  Read properties and relationships of the enrollmentConfigurationAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_enrollment_configuration_id` (String.t): The unique identifier of deviceEnrollmentConfiguration
  - `enrollment_configuration_assignment_id` (String.t): The unique identifier of enrollmentConfigurationAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_enrollment_configurations_get_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment.t} | {:error, Tesla.Env.t}
  def device_management_device_enrollment_configurations_get_assignments(connection, device_enrollment_configuration_id, enrollment_configuration_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/#{device_enrollment_configuration_id}/assignments/#{enrollment_configuration_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_enrollment_configurations_get_count69e5(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_enrollment_configurations_get_count69e5(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List enrollmentConfigurationAssignments
  List properties and relationships of the enrollmentConfigurationAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_enrollment_configuration_id` (String.t): The unique identifier of deviceEnrollmentConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_enrollment_configurations_list_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_enrollment_configurations_list_assignments(connection, device_enrollment_configuration_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/#{device_enrollment_configuration_id}/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update enrollmentConfigurationAssignment
  Update the properties of a enrollmentConfigurationAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_enrollment_configuration_id` (String.t): The unique identifier of deviceEnrollmentConfiguration
  - `enrollment_configuration_assignment_id` (String.t): The unique identifier of enrollmentConfigurationAssignment
  - `microsoft_graph_enrollment_configuration_assignment` (MicrosoftGraphEnrollmentConfigurationAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_enrollment_configurations_update_assignments(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment.t} | {:error, Tesla.Env.t}
  def device_management_device_enrollment_configurations_update_assignments(connection, device_enrollment_configuration_id, enrollment_configuration_assignment_id, microsoft_graph_enrollment_configuration_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/#{device_enrollment_configuration_id}/assignments/#{enrollment_configuration_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_enrollment_configuration_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceEnrollmentConfiguration
  Read properties and relationships of the deviceEnrollmentConfiguration object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_enrollment_configuration_id` (String.t): The unique identifier of deviceEnrollmentConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_get_device_enrollment_configurations(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfiguration.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_get_device_enrollment_configurations(connection, device_enrollment_configuration_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/#{device_enrollment_configuration_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List deviceEnrollmentConfigurations
  List properties and relationships of the deviceEnrollmentConfiguration objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfigurationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_list_device_enrollment_configurations(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfigurationCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_management_list_device_enrollment_configurations(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceEnrollmentConfigurations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfigurationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceEnrollmentLimitConfiguration
  Update the properties of a deviceEnrollmentLimitConfiguration object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_enrollment_configuration_id` (String.t): The unique identifier of deviceEnrollmentConfiguration
  - `microsoft_graph_device_enrollment_configuration` (MicrosoftGraphDeviceEnrollmentConfiguration): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_update_device_enrollment_configurations(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfiguration.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfiguration.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_update_device_enrollment_configurations(connection, device_enrollment_configuration_id, microsoft_graph_device_enrollment_configuration, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/#{device_enrollment_configuration_id}")
      |> add_param(:body, :body, microsoft_graph_device_enrollment_configuration)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
