# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DirectoryAdministrativeUnit do
  @moduledoc """
  API calls for all endpoints tagged `DirectoryAdministrativeUnit`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create new navigation property to extensions for directory

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_create_extensions(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExtension.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_create_extensions(
        connection,
        administrative_unit_id,
        microsoft_graph_extension,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/extensions")
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to members for directory

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `microsoft_graph_directory_object` (MicrosoftGraphDirectoryObject): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_create_members(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_create_members(
        connection,
        administrative_unit_id,
        microsoft_graph_directory_object,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/members")
      |> add_param(:body, :body, microsoft_graph_directory_object)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property ref to members for directory

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `request_body` (%{optional(String.t) => map()}): New navigation property ref value
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_create_ref_members(
          Tesla.Env.client(),
          String.t(),
          %{optional(String.t()) => Map.t()},
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_create_ref_members(
        connection,
        administrative_unit_id,
        request_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/members/$ref")
      |> add_param(:body, :body, request_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add a scopedRoleMember
  Assign a Microsoft Entra role with administrative unit scope. For a list of roles that can be assigned with administrative unit scope, see Assign Microsoft Entra roles with administrative unit scope. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `microsoft_graph_scoped_role_membership` (MicrosoftGraphScopedRoleMembership): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembership.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_create_scoped_role_members(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembership.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembership.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_create_scoped_role_members(
        connection,
        administrative_unit_id,
        microsoft_graph_scoped_role_membership,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/scopedRoleMembers")
      |> add_param(:body, :body, microsoft_graph_scoped_role_membership)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembership},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property extensions for directory

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_delete_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_delete_extensions(
        connection,
        administrative_unit_id,
        extension_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/extensions/#{extension_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove a member
  Use this API to remove a member (user, group, or device) from an administrative unit. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag
    - `:"@id"` (String.t): Delete Uri

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_delete_ref_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_delete_ref_members(
        connection,
        administrative_unit_id,
        directory_object_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers,
      :"@id" => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/#{directory_object_id}/$ref"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove a scopedRoleMember
  Remove a Microsoft Entra role assignment with administrative unit scope. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `scoped_role_membership_id` (String.t): The unique identifier of scopedRoleMembership
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_delete_scoped_role_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_delete_scoped_role_members(
        connection,
        administrative_unit_id,
        scoped_role_membership_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/scopedRoleMembers/#{scoped_role_membership_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_extensions_get_count48cb(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_extensions_get_count48cb(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/extensions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_get_count_a5a1(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_get_count_a5a1(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get extensions from directory
  The collection of open extensions defined for this administrative unit. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_get_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_get_extensions(
        connection,
        administrative_unit_id,
        extension_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/extensions/#{extension_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.directoryObject as microsoft.graph.application

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApplication.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_get_members_as_application(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphApplication.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_get_members_as_application(
        connection,
        administrative_unit_id,
        directory_object_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/#{directory_object_id}/graph.application"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApplication},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.directoryObject as microsoft.graph.device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDevice.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_get_members_as_device(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDevice.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_get_members_as_device(
        connection,
        administrative_unit_id,
        directory_object_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/#{directory_object_id}/graph.device"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDevice},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.directoryObject as microsoft.graph.group

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_get_members_as_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_get_members_as_group(
        connection,
        administrative_unit_id,
        directory_object_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/#{directory_object_id}/graph.group"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.directoryObject as microsoft.graph.orgContact

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOrgContact.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_get_members_as_org_contact(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphOrgContact.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_get_members_as_org_contact(
        connection,
        administrative_unit_id,
        directory_object_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/#{directory_object_id}/graph.orgContact"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOrgContact},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.directoryObject as microsoft.graph.servicePrincipal

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServicePrincipal.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_get_members_as_service_principal(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphServicePrincipal.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_get_members_as_service_principal(
        connection,
        administrative_unit_id,
        directory_object_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/#{directory_object_id}/graph.servicePrincipal"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServicePrincipal},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.directoryObject as microsoft.graph.user

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_get_members_as_user(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_get_members_as_user(
        connection,
        administrative_unit_id,
        directory_object_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/#{directory_object_id}/graph.user"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get a scopedRoleMember
  Get a Microsoft Entra role assignment with administrative unit scope. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `scoped_role_membership_id` (String.t): The unique identifier of scopedRoleMembership
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembership.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_get_scoped_role_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembership.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_get_scoped_role_members(
        connection,
        administrative_unit_id,
        scoped_role_membership_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/scopedRoleMembers/#{scoped_role_membership_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembership},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get extensions from directory
  The collection of open extensions defined for this administrative unit. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_list_extensions(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_list_extensions(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/extensions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get members from directory
  Users and groups that are members of this administrative unit. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_list_members(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_list_members(connection, administrative_unit_id, opts \\ []) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/members")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.application in the microsoft.graph.directoryObject collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApplicationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_list_members_as_application(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphApplicationCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_list_members_as_application(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/members/graph.application")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApplicationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.device in the microsoft.graph.directoryObject collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_list_members_as_device(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_list_members_as_device(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/members/graph.device")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.group in the microsoft.graph.directoryObject collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_list_members_as_group(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphGroupCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_list_members_as_group(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/members/graph.group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.orgContact in the microsoft.graph.directoryObject collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOrgContactCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_list_members_as_org_contact(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphOrgContactCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_list_members_as_org_contact(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/members/graph.orgContact")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOrgContactCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.servicePrincipal in the microsoft.graph.directoryObject collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServicePrincipalCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_list_members_as_service_principal(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphServicePrincipalCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_list_members_as_service_principal(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/graph.servicePrincipal"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServicePrincipalCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.user in the microsoft.graph.directoryObject collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_list_members_as_user(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphUserCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_list_members_as_user(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/members/graph.user")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ref of members from directory
  Users and groups that are members of this administrative unit. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.StringCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_list_ref_members(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.StringCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_list_ref_members(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/members/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.StringCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List scopedRoleMembers
  List Microsoft Entra role assignments with administrative unit scope. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembershipCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_list_scoped_role_members(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembershipCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_list_scoped_role_members(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/scopedRoleMembers")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembershipCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_members_get_count777a(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_members_get_count777a(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/members/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_members_get_count_as_application12bb(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_members_get_count_as_application12bb(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/graph.application/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_members_get_count_as_device_a313(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_members_get_count_as_device_a313(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/graph.device/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_members_get_count_as_group_af07(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_members_get_count_as_group_af07(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/graph.group/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_members_get_count_as_org_contact7392(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_members_get_count_as_org_contact7392(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/graph.orgContact/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_members_get_count_as_service_principal1d41(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_members_get_count_as_service_principal1d41(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/members/graph.servicePrincipal/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:ConsistencyLevel` (String.t): Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_members_get_count_as_user5d18(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_members_get_count_as_user5d18(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :ConsistencyLevel => :headers,
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/members/graph.user/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_scoped_role_members_get_count_cb3a(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_scoped_role_members_get_count_cb3a(
        connection,
        administrative_unit_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}/scopedRoleMembers/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property extensions in directory

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `extension_id` (String.t): The unique identifier of extension
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_update_extensions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphExtension.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_update_extensions(
        connection,
        administrative_unit_id,
        extension_id,
        microsoft_graph_extension,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/extensions/#{extension_id}"
      )
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopedRoleMembers in directory

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `scoped_role_membership_id` (String.t): The unique identifier of scopedRoleMembership
  - `microsoft_graph_scoped_role_membership` (MicrosoftGraphScopedRoleMembership): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembership.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_administrative_units_update_scoped_role_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembership.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembership.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_administrative_units_update_scoped_role_members(
        connection,
        administrative_unit_id,
        scoped_role_membership_id,
        microsoft_graph_scoped_role_membership,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/directory/administrativeUnits/#{administrative_unit_id}/scopedRoleMembers/#{scoped_role_membership_id}"
      )
      |> add_param(:body, :body, microsoft_graph_scoped_role_membership)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphScopedRoleMembership},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create administrativeUnit
  Use this API to create a new administrativeUnit. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_administrative_unit` (MicrosoftGraphAdministrativeUnit): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnit.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_create_administrative_units(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnit.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnit.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_create_administrative_units(
        connection,
        microsoft_graph_administrative_unit,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/directory/administrativeUnits")
      |> add_param(:body, :body, microsoft_graph_administrative_unit)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnit},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete administrativeUnit
  Delete an administrativeUnit. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_delete_administrative_units(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_delete_administrative_units(connection, administrative_unit_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get administrativeUnit
  Retrieve the properties and relationships of an administrativeUnit object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnit.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_get_administrative_units(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnit.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_get_administrative_units(connection, administrative_unit_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnit},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List administrativeUnits
  Retrieve a list of administrativeUnit objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnitCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_list_administrative_units(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnitCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_list_administrative_units(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/directory/administrativeUnits")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnitCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update administrativeUnit
  Update the properties of an administrativeUnit object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `administrative_unit_id` (String.t): The unique identifier of administrativeUnit
  - `microsoft_graph_administrative_unit` (MicrosoftGraphAdministrativeUnit): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnit.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec directory_update_administrative_units(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnit.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnit.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def directory_update_administrative_units(
        connection,
        administrative_unit_id,
        microsoft_graph_administrative_unit,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/directory/administrativeUnits/#{administrative_unit_id}")
      |> add_param(:body, :body, microsoft_graph_administrative_unit)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAdministrativeUnit},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
