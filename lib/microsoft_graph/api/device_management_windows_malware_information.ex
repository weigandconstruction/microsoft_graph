# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceManagementWindowsMalwareInformation do
  @moduledoc """
  API calls for all endpoints tagged `DeviceManagementWindowsMalwareInformation`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create windowsMalwareInformation
  Create a new windowsMalwareInformation object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_windows_malware_information` (MicrosoftGraphWindowsMalwareInformation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_create_windows_malware_information(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformation.t} | {:error, Tesla.Env.t}
  def device_management_create_windows_malware_information(connection, microsoft_graph_windows_malware_information, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/windowsMalwareInformation")
      |> add_param(:body, :body, microsoft_graph_windows_malware_information)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete windowsMalwareInformation
  Deletes a windowsMalwareInformation.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_malware_information_id` (String.t): The unique identifier of windowsMalwareInformation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_delete_windows_malware_information(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_delete_windows_malware_information(connection, windows_malware_information_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/windowsMalwareInformation/#{windows_malware_information_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get windowsMalwareInformation
  Read properties and relationships of the windowsMalwareInformation object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_malware_information_id` (String.t): The unique identifier of windowsMalwareInformation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_get_windows_malware_information(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformation.t} | {:error, Tesla.Env.t}
  def device_management_get_windows_malware_information(connection, windows_malware_information_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/windowsMalwareInformation/#{windows_malware_information_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List windowsMalwareInformations
  List properties and relationships of the windowsMalwareInformation objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_list_windows_malware_information(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_list_windows_malware_information(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/windowsMalwareInformation")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update windowsMalwareInformation
  Update the properties of a windowsMalwareInformation object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_malware_information_id` (String.t): The unique identifier of windowsMalwareInformation
  - `microsoft_graph_windows_malware_information` (MicrosoftGraphWindowsMalwareInformation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_update_windows_malware_information(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformation.t} | {:error, Tesla.Env.t}
  def device_management_update_windows_malware_information(connection, windows_malware_information_id, microsoft_graph_windows_malware_information, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/windowsMalwareInformation/#{windows_malware_information_id}")
      |> add_param(:body, :body, microsoft_graph_windows_malware_information)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsMalwareInformation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create malwareStateForWindowsDevice
  Create a new malwareStateForWindowsDevice object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_malware_information_id` (String.t): The unique identifier of windowsMalwareInformation
  - `microsoft_graph_malware_state_for_windows_device` (MicrosoftGraphMalwareStateForWindowsDevice): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDevice.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_windows_malware_information_create_device_malware_states(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDevice.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDevice.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_windows_malware_information_create_device_malware_states(connection, windows_malware_information_id, microsoft_graph_malware_state_for_windows_device, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/windowsMalwareInformation/#{windows_malware_information_id}/deviceMalwareStates")
      |> add_param(:body, :body, microsoft_graph_malware_state_for_windows_device)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDevice},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete malwareStateForWindowsDevice
  Deletes a malwareStateForWindowsDevice.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_malware_information_id` (String.t): The unique identifier of windowsMalwareInformation
  - `malware_state_for_windows_device_id` (String.t): The unique identifier of malwareStateForWindowsDevice
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_windows_malware_information_delete_device_malware_states(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_windows_malware_information_delete_device_malware_states(connection, windows_malware_information_id, malware_state_for_windows_device_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/windowsMalwareInformation/#{windows_malware_information_id}/deviceMalwareStates/#{malware_state_for_windows_device_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_malware_information_id` (String.t): The unique identifier of windowsMalwareInformation
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_windows_malware_information_device_malware_states_get_count_bf2c(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_windows_malware_information_device_malware_states_get_count_bf2c(connection, windows_malware_information_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/windowsMalwareInformation/#{windows_malware_information_id}/deviceMalwareStates/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_windows_malware_information_get_count3d28(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_windows_malware_information_get_count3d28(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/windowsMalwareInformation/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get malwareStateForWindowsDevice
  Read properties and relationships of the malwareStateForWindowsDevice object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_malware_information_id` (String.t): The unique identifier of windowsMalwareInformation
  - `malware_state_for_windows_device_id` (String.t): The unique identifier of malwareStateForWindowsDevice
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDevice.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_windows_malware_information_get_device_malware_states(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDevice.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_windows_malware_information_get_device_malware_states(connection, windows_malware_information_id, malware_state_for_windows_device_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/windowsMalwareInformation/#{windows_malware_information_id}/deviceMalwareStates/#{malware_state_for_windows_device_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDevice},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List malwareStateForWindowsDevices
  List properties and relationships of the malwareStateForWindowsDevice objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_malware_information_id` (String.t): The unique identifier of windowsMalwareInformation
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDeviceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_windows_malware_information_list_device_malware_states(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDeviceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_windows_malware_information_list_device_malware_states(connection, windows_malware_information_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/windowsMalwareInformation/#{windows_malware_information_id}/deviceMalwareStates")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDeviceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update malwareStateForWindowsDevice
  Update the properties of a malwareStateForWindowsDevice object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_malware_information_id` (String.t): The unique identifier of windowsMalwareInformation
  - `malware_state_for_windows_device_id` (String.t): The unique identifier of malwareStateForWindowsDevice
  - `microsoft_graph_malware_state_for_windows_device` (MicrosoftGraphMalwareStateForWindowsDevice): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDevice.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_windows_malware_information_update_device_malware_states(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDevice.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDevice.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_windows_malware_information_update_device_malware_states(connection, windows_malware_information_id, malware_state_for_windows_device_id, microsoft_graph_malware_state_for_windows_device, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/windowsMalwareInformation/#{windows_malware_information_id}/deviceMalwareStates/#{malware_state_for_windows_device_id}")
      |> add_param(:body, :body, microsoft_graph_malware_state_for_windows_device)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMalwareStateForWindowsDevice},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
