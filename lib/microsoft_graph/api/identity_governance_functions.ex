# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.IdentityGovernanceFunctions do
  @moduledoc """
  API calls for all endpoints tagged `IdentityGovernanceFunctions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `on` (MicrosoftGraphAccessReviewInstanceDecisionItemFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfAccessReviewInstanceDecisionItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_decisions_filter_by_current_user(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItemFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CollectionOfAccessReviewInstanceDecisionItem.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_decisions_filter_by_current_user(connection, access_review_schedule_definition_id, access_review_instance_id, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfAccessReviewInstanceDecisionItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `on` (MicrosoftGraphAccessReviewInstanceDecisionItemFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfAccessReviewInstanceDecisionItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_stages_access_review_stage_decisions_filter_by_current_user(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItemFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CollectionOfAccessReviewInstanceDecisionItem.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_stages_access_review_stage_decisions_filter_by_current_user(connection, access_review_schedule_definition_id, access_review_instance_id, access_review_stage_id, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfAccessReviewInstanceDecisionItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `on` (MicrosoftGraphAccessReviewStageFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfAccessReviewStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_stages_filter_by_current_user(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessReviewStageFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CollectionOfAccessReviewStage.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_stages_filter_by_current_user(connection, access_review_schedule_definition_id, access_review_instance_id, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfAccessReviewStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `on` (MicrosoftGraphAccessReviewInstanceFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfAccessReviewInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_filter_by_current_user(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CollectionOfAccessReviewInstance.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_filter_by_current_user(connection, access_review_schedule_definition_id, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfAccessReviewInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphAccessReviewScheduleDefinitionFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfAccessReviewScheduleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinitionFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CollectionOfAccessReviewScheduleDefinition.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/accessReviews/definitions/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfAccessReviewScheduleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `app_consent_request_id` (String.t): The unique identifier of appConsentRequest
  - `on` (MicrosoftGraphConsentRequestFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUserConsentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_app_consent_request_user_consent_requests_filter_by_current_user(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphConsentRequestFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfUserConsentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_app_consent_request_user_consent_requests_filter_by_current_user(connection, app_consent_request_id, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests/#{app_consent_request_id}/userConsentRequests/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUserConsentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphConsentRequestFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfAppConsentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_app_consent_app_consent_requests_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphConsentRequestFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfAppConsentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_app_consent_app_consent_requests_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/appConsent/appConsentRequests/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfAppConsentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphApprovalFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfApproval.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_package_assignment_approvals_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphApprovalFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfApproval.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_package_assignment_approvals_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfApproval},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphAccessPackageFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfAccessPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackageFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CollectionOfAccessPackage.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfAccessPackage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphAccessPackageAssignmentRequestFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfAccessPackageAssignmentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_requests_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequestFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfAccessPackageAssignmentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_requests_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfAccessPackageAssignmentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function additionalAccess

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfAccessPackageAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignments_additional_access894c(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfAccessPackageAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignments_additional_access894c(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignments/additionalAccess()")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfAccessPackageAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function additionalAccess

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): Usage: accessPackageId='{accessPackageId}'
  - `incompatible_access_package_id` (String.t): Usage: incompatibleAccessPackageId='{incompatibleAccessPackageId}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfAccessPackageAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignments_additional_access9b62(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfAccessPackageAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignments_additional_access9b62(connection, access_package_id, incompatible_access_package_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignments/additionalAccess(accessPackageId&#x3D;&#39;#{access_package_id}&#39;,incompatibleAccessPackageId&#x3D;&#39;#{incompatible_access_package_id}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfAccessPackageAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfAccessPackageAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignments_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfAccessPackageAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignments_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignments/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfAccessPackageAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function summary

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `start_date_time` (DateTime.t): Usage: startDateTime={startDateTime}
  - `end_date_time` (DateTime.t): Usage: endDateTime={endDateTime}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_runs_run_user_processing_results_summary(Tesla.Env.client, String.t, String.t, DateTime.t, DateTime.t, keyword()) :: {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_runs_run_user_processing_results_summary(connection, workflow_id, run_id, start_date_time, end_date_time, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/microsoft.graph.identityGovernance.summary(startDateTime&#x3D;#{start_date_time},endDateTime&#x3D;#{end_date_time})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function summary

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `start_date_time` (DateTime.t): Usage: startDateTime={startDateTime}
  - `end_date_time` (DateTime.t): Usage: endDateTime={endDateTime}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowRunsSummary2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_runs_summary(Tesla.Env.client, String.t, DateTime.t, DateTime.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowRunsSummary2XxResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_runs_summary(connection, workflow_id, start_date_time, end_date_time, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/microsoft.graph.identityGovernance.summary(startDateTime&#x3D;#{start_date_time},endDateTime&#x3D;#{end_date_time})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowRunsSummary2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function summary

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `start_date_time` (DateTime.t): Usage: startDateTime={startDateTime}
  - `end_date_time` (DateTime.t): Usage: endDateTime={endDateTime}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowTaskReportsSummary2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_task_reports_summary(Tesla.Env.client, String.t, DateTime.t, DateTime.t, keyword()) :: {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowTaskReportsSummary2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_task_reports_summary(connection, workflow_id, start_date_time, end_date_time, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/microsoft.graph.identityGovernance.summary(startDateTime&#x3D;#{start_date_time},endDateTime&#x3D;#{end_date_time})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowTaskReportsSummary2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function summary

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `start_date_time` (DateTime.t): Usage: startDateTime={startDateTime}
  - `end_date_time` (DateTime.t): Usage: endDateTime={endDateTime}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_user_processing_results_summary(Tesla.Env.client, String.t, DateTime.t, DateTime.t, keyword()) :: {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_user_processing_results_summary(connection, workflow_id, start_date_time, end_date_time, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/microsoft.graph.identityGovernance.summary(startDateTime&#x3D;#{start_date_time},endDateTime&#x3D;#{end_date_time})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function summary

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `start_date_time` (DateTime.t): Usage: startDateTime={startDateTime}
  - `end_date_time` (DateTime.t): Usage: endDateTime={endDateTime}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_runs_run_user_processing_results_summary(Tesla.Env.client, String.t, String.t, DateTime.t, DateTime.t, keyword()) :: {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_runs_run_user_processing_results_summary(connection, workflow_id, run_id, start_date_time, end_date_time, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/microsoft.graph.identityGovernance.summary(startDateTime&#x3D;#{start_date_time},endDateTime&#x3D;#{end_date_time})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function summary

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `start_date_time` (DateTime.t): Usage: startDateTime={startDateTime}
  - `end_date_time` (DateTime.t): Usage: endDateTime={endDateTime}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowRunsSummary2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_runs_summary(Tesla.Env.client, String.t, DateTime.t, DateTime.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowRunsSummary2XxResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_runs_summary(connection, workflow_id, start_date_time, end_date_time, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/microsoft.graph.identityGovernance.summary(startDateTime&#x3D;#{start_date_time},endDateTime&#x3D;#{end_date_time})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowRunsSummary2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function summary

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `start_date_time` (DateTime.t): Usage: startDateTime={startDateTime}
  - `end_date_time` (DateTime.t): Usage: endDateTime={endDateTime}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowTaskReportsSummary2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_task_reports_summary(Tesla.Env.client, String.t, DateTime.t, DateTime.t, keyword()) :: {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowTaskReportsSummary2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_task_reports_summary(connection, workflow_id, start_date_time, end_date_time, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/microsoft.graph.identityGovernance.summary(startDateTime&#x3D;#{start_date_time},endDateTime&#x3D;#{end_date_time})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowTaskReportsSummary2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function summary

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `start_date_time` (DateTime.t): Usage: startDateTime={startDateTime}
  - `end_date_time` (DateTime.t): Usage: endDateTime={endDateTime}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_user_processing_results_summary(Tesla.Env.client, String.t, DateTime.t, DateTime.t, keyword()) :: {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_user_processing_results_summary(connection, workflow_id, start_date_time, end_date_time, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/microsoft.graph.identityGovernance.summary(startDateTime&#x3D;#{start_date_time},endDateTime&#x3D;#{end_date_time})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowUserProcessingResultsSummary2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphApprovalFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfApproval.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_approvals_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphApprovalFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfApproval.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_approvals_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfApproval},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphAssignmentScheduleInstanceFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_instances_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAssignmentScheduleInstanceFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupAssignmentScheduleInstance.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_instances_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphAssignmentScheduleRequestFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_requests_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAssignmentScheduleRequestFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupAssignmentScheduleRequest.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_requests_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphAssignmentScheduleFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedules_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAssignmentScheduleFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupAssignmentSchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedules_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphEligibilityScheduleInstanceFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_instances_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphEligibilityScheduleInstanceFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupEligibilityScheduleInstance.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_instances_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphEligibilityScheduleRequestFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_requests_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphEligibilityScheduleRequestFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupEligibilityScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_requests_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphEligibilityScheduleFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedules_filter_by_current_user(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphEligibilityScheduleFilterByCurrentUserOptions.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupEligibilitySchedule.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedules_filter_by_current_user(connection, on, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilitySchedules/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfPrivilegedAccessGroupEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
