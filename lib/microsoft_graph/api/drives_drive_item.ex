# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DrivesDriveItem do
  @moduledoc """
  API calls for all endpoints tagged `DrivesDriveItem`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_bundles_get_count_c935(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_bundles_get_count_c935(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/bundles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to bundles for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `microsoft_graph_drive_item` (MicrosoftGraphDriveItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_create_bundles(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_create_bundles(connection, drive_id, microsoft_graph_drive_item, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/bundles")
      |> add_param(:body, :body, microsoft_graph_drive_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to items for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `microsoft_graph_drive_item` (MicrosoftGraphDriveItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_create_items(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_create_items(connection, drive_id, microsoft_graph_drive_item, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items")
      |> add_param(:body, :body, microsoft_graph_drive_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete a DriveItem
  Delete a DriveItem by using its ID or path. Deleting items using this method moves the items to the recycle bin instead of permanently deleting the item. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_delete_items(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_delete_items(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_following_get_count16f3(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_following_get_count16f3(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/following/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get bundles from drives
  Collection of [bundles][bundle] (albums and multi-select-shared sets of items). Only in personal OneDrive.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_get_bundles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_get_bundles(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/bundles/#{drive_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property bundles from drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_get_bundles_content(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def drives_get_bundles_content(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/bundles/#{drive_item_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get following from drives
  The list of items the user is following. Only in OneDrive for Business.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_get_following(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_get_following(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/following/#{drive_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property following from drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_get_following_content(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def drives_get_following_content(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/following/#{drive_item_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get items from drives
  All items contained in the drive. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_get_items(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_get_items(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property items from drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_get_items_content(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def drives_get_items_content(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get a driveItem resource
  Retrieve the metadata for a driveItem in a drive by file system path or ID. item-id is the ID of a driveItem. It may also be the unique ID of a SharePoint list item. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_get_root(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_get_root(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/root")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property root from drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_get_root_content(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def drives_get_root_content(connection, drive_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/root/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get a special folder by name
  Use the special collection to access a special folder by name. Special folders provide simple aliases to access well-known folders in OneDrive without the need to look up the folder by path (which would require localization), or reference the folder with an ID. If a special folder is renamed or moved to another location within the drive, this syntax will continue to find that folder. Special folders are automatically created the first time an application attempts to write to one, if it doesn't already exist. If a user deletes one, it is recreated when written to again. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_get_special(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_get_special(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/special/#{drive_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property special from drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_get_special_content(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def drives_get_special_content(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/special/#{drive_item_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to itemActivityStats for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_item_activity_stat` (MicrosoftGraphItemActivityStat): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_create_item_activity_stats(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_create_item_activity_stats(connection, drive_id, drive_item_id, microsoft_graph_item_activity_stat, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats")
      |> add_param(:body, :body, microsoft_graph_item_activity_stat)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property itemActivityStats for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_delete_item_activity_stats(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_delete_item_activity_stats(connection, drive_id, drive_item_id, item_activity_stat_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get itemAnalytics
  Get [itemAnalytics][] about the views that took place under this resource. The itemAnalytics resource is a convenient way to get activity stats for allTime and the lastSevenDays. For a custom time range or interval, use the getActivitiesByInterval][] API. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_get_all_time(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_get_all_time(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/allTime")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get itemActivityStats from drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_get_item_activity_stats(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_get_item_activity_stats(connection, drive_id, drive_item_id, item_activity_stat_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastSevenDays from drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_get_last_seven_days(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_get_last_seven_days(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/lastSevenDays")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_item_activity_stats_activities_get_count7511(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_item_activity_stats_activities_get_count7511(connection, drive_id, drive_item_id, item_activity_stat_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get driveItem from drives
  Exposes the driveItem that was the target of this activity.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_item_activity_stats_activities_get_drive_item(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_item_activity_stats_activities_get_drive_item(connection, drive_id, drive_item_id, item_activity_stat_id, item_activity_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}/driveItem")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property driveItem from drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_item_activity_stats_activities_get_drive_item_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_item_activity_stats_activities_get_drive_item_content(connection, drive_id, drive_item_id, item_activity_stat_id, item_activity_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}/driveItem/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property driveItem in drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_item_activity_stats_activities_update_drive_item_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_item_activity_stats_activities_update_drive_item_content(connection, drive_id, drive_item_id, item_activity_stat_id, item_activity_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}/driveItem/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to activities for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `microsoft_graph_item_activity` (MicrosoftGraphItemActivity): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_item_activity_stats_create_activities(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_item_activity_stats_create_activities(connection, drive_id, drive_item_id, item_activity_stat_id, microsoft_graph_item_activity, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities")
      |> add_param(:body, :body, microsoft_graph_item_activity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property activities for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_item_activity_stats_delete_activities(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_item_activity_stats_delete_activities(connection, drive_id, drive_item_id, item_activity_stat_id, item_activity_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activities from drives
  Exposes the itemActivities represented in this itemActivityStat resource.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_item_activity_stats_get_activities(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_item_activity_stats_get_activities(connection, drive_id, drive_item_id, item_activity_stat_id, item_activity_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_item_activity_stats_get_count_f4fa(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_item_activity_stats_get_count_f4fa(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activities from drives
  Exposes the itemActivities represented in this itemActivityStat resource.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_item_activity_stats_list_activities(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityCollectionResponse.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_item_activity_stats_list_activities(connection, drive_id, drive_item_id, item_activity_stat_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property activities in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `microsoft_graph_item_activity` (MicrosoftGraphItemActivity): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_item_activity_stats_update_activities(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_item_activity_stats_update_activities(connection, drive_id, drive_item_id, item_activity_stat_id, item_activity_id, microsoft_graph_item_activity, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}")
      |> add_param(:body, :body, microsoft_graph_item_activity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get itemActivityStats from drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStatCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_list_item_activity_stats(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStatCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_list_item_activity_stats(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStatCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property itemActivityStats in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `microsoft_graph_item_activity_stat` (MicrosoftGraphItemActivityStat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_analytics_update_item_activity_stats(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t} | {:error, Tesla.Env.t}
  def drives_items_analytics_update_item_activity_stats(connection, drive_id, drive_item_id, item_activity_stat_id, microsoft_graph_item_activity_stat, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics/itemActivityStats/#{item_activity_stat_id}")
      |> add_param(:body, :body, microsoft_graph_item_activity_stat)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_children_get_count17b0(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_children_get_count17b0(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_drive_item` (MicrosoftGraphDriveItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_create_children(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_create_children(connection, drive_id, drive_item_id, microsoft_graph_drive_item, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/children")
      |> add_param(:body, :body, microsoft_graph_drive_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to permissions for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_permission` (MicrosoftGraphPermission): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_create_permissions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphPermission.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_create_permissions(connection, drive_id, drive_item_id, microsoft_graph_permission, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/permissions")
      |> add_param(:body, :body, microsoft_graph_permission)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to subscriptions for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_subscription` (MicrosoftGraphSubscription): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_create_subscriptions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSubscription.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_create_subscriptions(connection, drive_id, drive_item_id, microsoft_graph_subscription, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/subscriptions")
      |> add_param(:body, :body, microsoft_graph_subscription)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscription},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to thumbnails for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_thumbnail_set` (MicrosoftGraphThumbnailSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphThumbnailSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_create_thumbnails(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphThumbnailSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphThumbnailSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_create_thumbnails(connection, drive_id, drive_item_id, microsoft_graph_thumbnail_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/thumbnails")
      |> add_param(:body, :body, microsoft_graph_thumbnail_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphThumbnailSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to versions for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_drive_item_version` (MicrosoftGraphDriveItemVersion): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_create_versions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_create_versions(connection, drive_id, drive_item_id, microsoft_graph_drive_item_version, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/versions")
      |> add_param(:body, :body, microsoft_graph_drive_item_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_created_by_user_get_mailbox_settings(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def drives_items_created_by_user_get_mailbox_settings(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/createdByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_created_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_created_by_user_list_service_provisioning_errors(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/createdByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_created_by_user_service_provisioning_errors_get_count9567(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_created_by_user_service_provisioning_errors_get_count9567(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/createdByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_created_by_user_update_mailbox_settings(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def drives_items_created_by_user_update_mailbox_settings(connection, drive_id, drive_item_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/createdByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property analytics for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_delete_analytics(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_delete_analytics(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete a sharing permission from a file or folder
  Remove access to a DriveItem. Only sharing permissions that are not inherited can be deleted. The inheritedFrom property must be null. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `permission_id` (String.t): The unique identifier of permission
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_delete_permissions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_delete_permissions(connection, drive_id, drive_item_id, permission_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/permissions/#{permission_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property subscriptions for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `subscription_id` (String.t): The unique identifier of subscription
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_delete_subscriptions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_delete_subscriptions(connection, drive_id, drive_item_id, subscription_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/subscriptions/#{subscription_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property thumbnails for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `thumbnail_set_id` (String.t): The unique identifier of thumbnailSet
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_delete_thumbnails(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_delete_thumbnails(connection, drive_id, drive_item_id, thumbnail_set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/thumbnails/#{thumbnail_set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property versions for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drive_item_version_id` (String.t): The unique identifier of driveItemVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_delete_versions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_delete_versions(connection, drive_id, drive_item_id, drive_item_version_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/versions/#{drive_item_version_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property workbook for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_delete_workbook(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_delete_workbook(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get analytics from drives
  Analytics about the view activities that took place on this item.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_analytics(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_get_analytics(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemAnalytics},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from drives
  Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drive_item_id1` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_children(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_get_children(connection, drive_id, drive_item_id, drive_item_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/children/#{drive_item_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property children from drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drive_item_id1` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_children_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def drives_items_get_children_content(connection, drive_id, drive_item_id, drive_item_id1, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/children/#{drive_item_id1}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_count9c16(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_get_count9c16(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get createdByUser from drives
  Identity of the user who created the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_created_by_user(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_get_created_by_user(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/createdByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastModifiedByUser from drives
  Identity of the user who last modified the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_last_modified_by_user(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_get_last_modified_by_user(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/lastModifiedByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get listItem from drives
  For drives in SharePoint, the associated document library list item. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_list_item(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t} | {:error, Tesla.Env.t}
  def drives_items_get_list_item(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/listItem")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sharing permission for a file or folder
  Return the effective sharing permission for a particular permission resource. Effective permissions of an item can come from two sources: permissions set directly on the item itself or permissions that are inherited from the item's ancestors. Callers can differentiate if the permission is inherited or not by checking the inheritedFrom property. This property is an ItemReference resource referencing the ancestor that the permission is inherited from. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `permission_id` (String.t): The unique identifier of permission
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_permissions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_get_permissions(connection, drive_id, drive_item_id, permission_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/permissions/#{permission_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subscriptions from drives
  The set of subscriptions on the item. Only supported on the root of a drive.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `subscription_id` (String.t): The unique identifier of subscription
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_subscriptions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_get_subscriptions(connection, drive_id, drive_item_id, subscription_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/subscriptions/#{subscription_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscription},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get thumbnails from drives
  Collection containing [ThumbnailSet][] objects associated with the item. For more info, see [getting thumbnails][]. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `thumbnail_set_id` (String.t): The unique identifier of thumbnailSet
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphThumbnailSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_thumbnails(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphThumbnailSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_get_thumbnails(connection, drive_id, drive_item_id, thumbnail_set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/thumbnails/#{thumbnail_set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphThumbnailSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get a DriveItemVersion resource
  Retrieve the metadata for a specific version of a DriveItem. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drive_item_version_id` (String.t): The unique identifier of driveItemVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_versions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_get_versions(connection, drive_id, drive_item_id, drive_item_version_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/versions/#{drive_item_version_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property versions from drives
  The content stream for this version of the item.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drive_item_version_id` (String.t): The unique identifier of driveItemVersion
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_versions_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def drives_items_get_versions_content(connection, drive_id, drive_item_id, drive_item_version_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/versions/#{drive_item_version_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get workbook from drives
  For files that are Excel spreadsheets, accesses the workbook API to work with the spreadsheet's contents. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_get_workbook(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbook.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_get_workbook(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_last_modified_by_user_get_mailbox_settings(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def drives_items_last_modified_by_user_get_mailbox_settings(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/lastModifiedByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_last_modified_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_last_modified_by_user_list_service_provisioning_errors(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/lastModifiedByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_last_modified_by_user_service_provisioning_errors_get_count_b2d2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_last_modified_by_user_service_provisioning_errors_get_count_b2d2(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/lastModifiedByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_last_modified_by_user_update_mailbox_settings(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def drives_items_last_modified_by_user_update_mailbox_settings(connection, drive_id, drive_item_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/lastModifiedByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children of a driveItem
  Return a collection of DriveItems in the children relationship of a DriveItem. DriveItems with a non-null folder or package facet can have one or more child DriveItems. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_list_children(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_list_children(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sharing permissions on a driveItem
  List the effective sharing permissions on a driveItem. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_list_permissions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionCollectionResponse.t} | {:error, Tesla.Env.t}
  def drives_items_list_permissions(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/permissions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subscriptions from drives
  The set of subscriptions on the item. Only supported on the root of a drive.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscriptionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_list_subscriptions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscriptionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_list_subscriptions(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/subscriptions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscriptionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List thumbnails for a DriveItem
  Retrieve a collection of ThumbnailSet resources for a DriveItem resource. A DriveItem can be represented by zero or more ThumbnailSet resources. Each thumbnailSet can have one or more thumbnail objects, which are images that represent the item. For example, a thumbnailSet may include thumbnail objects, such as common ones including small, medium, or large. There are many ways to work with thumbnails on OneDrive. Here are the most common ones: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphThumbnailSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_list_thumbnails(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphThumbnailSetCollectionResponse.t} | {:error, Tesla.Env.t}
  def drives_items_list_thumbnails(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/thumbnails")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphThumbnailSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List versions of a driveItem
  OneDrive and SharePoint can be configured to retain the history for files. Depending on the service and configuration, a new version can be created for each edit, each time the file is saved, manually, or never. Previous versions of a document may be retained for a finite period of time depending on admin settings that may be unique per user or location. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_list_versions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersionCollectionResponse.t} | {:error, Tesla.Env.t}
  def drives_items_list_versions(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/versions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItemVersionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_permissions_get_count_d367(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_permissions_get_count_d367(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/permissions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_subscriptions_get_count_f848(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_subscriptions_get_count_f848(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/subscriptions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_thumbnails_get_count50f0(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_thumbnails_get_count50f0(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/thumbnails/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property analytics in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_item_analytics` (MicrosoftGraphItemAnalytics): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_update_analytics(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_update_analytics(connection, drive_id, drive_item_id, microsoft_graph_item_analytics, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/analytics")
      |> add_param(:body, :body, microsoft_graph_item_analytics)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemAnalytics},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property children in drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drive_item_id1` (String.t): The unique identifier of driveItem
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_update_children_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_update_children_content(connection, drive_id, drive_item_id, drive_item_id1, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/children/#{drive_item_id1}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update sharing permission
  Update the properties of a sharing permission by patching the permission resource. Only the roles property can be modified this way. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `permission_id` (String.t): The unique identifier of permission
  - `microsoft_graph_permission` (MicrosoftGraphPermission): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_update_permissions(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphPermission.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_update_permissions(connection, drive_id, drive_item_id, permission_id, microsoft_graph_permission, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/permissions/#{permission_id}")
      |> add_param(:body, :body, microsoft_graph_permission)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property subscriptions in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `subscription_id` (String.t): The unique identifier of subscription
  - `microsoft_graph_subscription` (MicrosoftGraphSubscription): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_update_subscriptions(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSubscription.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_update_subscriptions(connection, drive_id, drive_item_id, subscription_id, microsoft_graph_subscription, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/subscriptions/#{subscription_id}")
      |> add_param(:body, :body, microsoft_graph_subscription)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscription},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property thumbnails in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `thumbnail_set_id` (String.t): The unique identifier of thumbnailSet
  - `microsoft_graph_thumbnail_set` (MicrosoftGraphThumbnailSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphThumbnailSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_update_thumbnails(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphThumbnailSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphThumbnailSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_update_thumbnails(connection, drive_id, drive_item_id, thumbnail_set_id, microsoft_graph_thumbnail_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/thumbnails/#{thumbnail_set_id}")
      |> add_param(:body, :body, microsoft_graph_thumbnail_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphThumbnailSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property versions in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drive_item_version_id` (String.t): The unique identifier of driveItemVersion
  - `microsoft_graph_drive_item_version` (MicrosoftGraphDriveItemVersion): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_update_versions(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_update_versions(connection, drive_id, drive_item_id, drive_item_version_id, microsoft_graph_drive_item_version, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/versions/#{drive_item_version_id}")
      |> add_param(:body, :body, microsoft_graph_drive_item_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property versions in drives
  The content stream for this version of the item.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `drive_item_version_id` (String.t): The unique identifier of driveItemVersion
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_update_versions_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_update_versions_content(connection, drive_id, drive_item_id, drive_item_version_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/versions/#{drive_item_version_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItemVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property workbook in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_workbook` (MicrosoftGraphWorkbook): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_update_workbook(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbook.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbook.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_update_workbook(connection, drive_id, drive_item_id, microsoft_graph_workbook, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook")
      |> add_param(:body, :body, microsoft_graph_workbook)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_versions_get_count6d7a(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_versions_get_count6d7a(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/versions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to replies for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_comment_id` (String.t): The unique identifier of workbookComment
  - `microsoft_graph_workbook_comment_reply` (MicrosoftGraphWorkbookCommentReply): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReply.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_comments_create_replies(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReply.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReply.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_comments_create_replies(connection, drive_id, drive_item_id, workbook_comment_id, microsoft_graph_workbook_comment_reply, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments/#{workbook_comment_id}/replies")
      |> add_param(:body, :body, microsoft_graph_workbook_comment_reply)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReply},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property replies for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_comment_id` (String.t): The unique identifier of workbookComment
  - `workbook_comment_reply_id` (String.t): The unique identifier of workbookCommentReply
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_comments_delete_replies(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_comments_delete_replies(connection, drive_id, drive_item_id, workbook_comment_id, workbook_comment_reply_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments/#{workbook_comment_id}/replies/#{workbook_comment_reply_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_comments_get_count8437(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_comments_get_count8437(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get workbookCommentReply
  Retrieve the properties and relationships of workbookCommentReply object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_comment_id` (String.t): The unique identifier of workbookComment
  - `workbook_comment_reply_id` (String.t): The unique identifier of workbookCommentReply
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReply.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_comments_get_replies(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReply.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_comments_get_replies(connection, drive_id, drive_item_id, workbook_comment_id, workbook_comment_reply_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments/#{workbook_comment_id}/replies/#{workbook_comment_reply_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReply},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get workbookCommentReply
  Retrieve the properties and relationships of workbookCommentReply object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_comment_id` (String.t): The unique identifier of workbookComment
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReplyCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_comments_list_replies(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReplyCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_comments_list_replies(connection, drive_id, drive_item_id, workbook_comment_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments/#{workbook_comment_id}/replies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReplyCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_comment_id` (String.t): The unique identifier of workbookComment
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_comments_replies_get_count5e78(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_comments_replies_get_count5e78(connection, drive_id, drive_item_id, workbook_comment_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments/#{workbook_comment_id}/replies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property replies in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_comment_id` (String.t): The unique identifier of workbookComment
  - `workbook_comment_reply_id` (String.t): The unique identifier of workbookCommentReply
  - `microsoft_graph_workbook_comment_reply` (MicrosoftGraphWorkbookCommentReply): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReply.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_comments_update_replies(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReply.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReply.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_comments_update_replies(connection, drive_id, drive_item_id, workbook_comment_id, workbook_comment_reply_id, microsoft_graph_workbook_comment_reply, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments/#{workbook_comment_id}/replies/#{workbook_comment_reply_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_comment_reply)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentReply},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to comments for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_workbook_comment` (MicrosoftGraphWorkbookComment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookComment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_create_comments(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookComment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookComment.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_create_comments(connection, drive_id, drive_item_id, microsoft_graph_workbook_comment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments")
      |> add_param(:body, :body, microsoft_graph_workbook_comment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookComment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to names for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_workbook_named_item` (MicrosoftGraphWorkbookNamedItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_create_names(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_create_names(connection, drive_id, drive_item_id, microsoft_graph_workbook_named_item, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/names")
      |> add_param(:body, :body, microsoft_graph_workbook_named_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to operations for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_workbook_operation` (MicrosoftGraphWorkbookOperation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_create_operations(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_create_operations(connection, drive_id, drive_item_id, microsoft_graph_workbook_operation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/operations")
      |> add_param(:body, :body, microsoft_graph_workbook_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to tables for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_workbook_table` (MicrosoftGraphWorkbookTable): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_create_tables(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_create_tables(connection, drive_id, drive_item_id, microsoft_graph_workbook_table, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables")
      |> add_param(:body, :body, microsoft_graph_workbook_table)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTable},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to worksheets for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_workbook_worksheet` (MicrosoftGraphWorkbookWorksheet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_create_worksheets(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_create_worksheets(connection, drive_id, drive_item_id, microsoft_graph_workbook_worksheet, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets")
      |> add_param(:body, :body, microsoft_graph_workbook_worksheet)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property application for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_delete_application(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_delete_application(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/application")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property comments for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_comment_id` (String.t): The unique identifier of workbookComment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_delete_comments(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_delete_comments(connection, drive_id, drive_item_id, workbook_comment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments/#{workbook_comment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property functions for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_delete_functions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_delete_functions(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property names for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_named_item_id` (String.t): The unique identifier of workbookNamedItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_delete_names(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_delete_names(connection, drive_id, drive_item_id, workbook_named_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/names/#{workbook_named_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property operations for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_operation_id` (String.t): The unique identifier of workbookOperation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_delete_operations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_delete_operations(connection, drive_id, drive_item_id, workbook_operation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/operations/#{workbook_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Table: delete
  Deletes the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_delete_tables(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_delete_tables(connection, drive_id, drive_item_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Worksheet: delete
  Deletes the worksheet from the workbook. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_delete_worksheets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_delete_worksheets(connection, drive_id, drive_item_id, workbook_worksheet_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get workbookApplication
  Retrieve the properties and relationships of a workbookApplication object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookApplication.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_get_application(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookApplication.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_get_application(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/application")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookApplication},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get comments from drives
  Represents a collection of comments in a workbook.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_comment_id` (String.t): The unique identifier of workbookComment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookComment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_get_comments(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookComment.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_get_comments(connection, drive_id, drive_item_id, workbook_comment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments/#{workbook_comment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookComment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get functions from drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFunctions.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_get_functions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFunctions.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_get_functions(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookFunctions},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get NamedItem
  Retrieve the properties and relationships of nameditem object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_named_item_id` (String.t): The unique identifier of workbookNamedItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_get_names(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_get_names(connection, drive_id, drive_item_id, workbook_named_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/names/#{workbook_named_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get workbookOperation
  Meaningless if this url is called independently. This request is part of all async requests for excel. This is used to retrieve the status of a workbookOperation object. Currently not all requests support async. Take Create session request as an example. Issue an async Create session request, follow the documentation and you may get status code 202 Accepted, async operation starts from here and you can find the url this document required from the response header, from the location part. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_operation_id` (String.t): The unique identifier of workbookOperation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_get_operations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_get_operations(connection, drive_id, drive_item_id, workbook_operation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/operations/#{workbook_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get Table
  Retrieve the properties and relationships of table object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_get_tables(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_get_tables(connection, drive_id, drive_item_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTable},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get Worksheet
  Retrieve the properties and relationships of worksheet object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_get_worksheets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_get_worksheets(connection, drive_id, drive_item_id, workbook_worksheet_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get comments from drives
  Represents a collection of comments in a workbook.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_list_comments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_list_comments(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookCommentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List names
  Retrieve a list of nameditem objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_list_names(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItemCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_list_names(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/names")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get workbookOperation
  Meaningless if this url is called independently. This request is part of all async requests for excel. This is used to retrieve the status of a workbookOperation object. Currently not all requests support async. Take Create session request as an example. Issue an async Create session request, follow the documentation and you may get status code 202 Accepted, async operation starts from here and you can find the url this document required from the response header, from the location part. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookOperationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_list_operations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookOperationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_list_operations(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/operations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookOperationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List TableCollection
  Retrieve a list of table objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_list_tables(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_list_tables(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List worksheets
  Retrieve a list of worksheet objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_list_worksheets(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheetCollectionResponse.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_list_worksheets(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_names_get_count_eada(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_names_get_count_eada(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/names/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get worksheet from drives
  Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_named_item_id` (String.t): The unique identifier of workbookNamedItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_names_get_worksheet(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_names_get_worksheet(connection, drive_id, drive_item_id, workbook_named_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/names/#{workbook_named_item_id}/worksheet")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_operations_get_count67f8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_operations_get_count67f8(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/operations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property filter for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_columns_delete_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_columns_delete_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get filter from drives
  Retrieve the filter applied to the column. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_columns_get_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_columns_get_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property filter in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `microsoft_graph_workbook_filter` (MicrosoftGraphWorkbookFilter): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_columns_update_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_columns_update_filter(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, microsoft_graph_workbook_filter, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter")
      |> add_param(:body, :body, microsoft_graph_workbook_filter)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create TableColumn
  Use this API to create a new TableColumn. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `microsoft_graph_workbook_table_column` (MicrosoftGraphWorkbookTableColumn): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_create_columns(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_create_columns(connection, drive_id, drive_item_id, workbook_table_id, microsoft_graph_workbook_table_column, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns")
      |> add_param(:body, :body, microsoft_graph_workbook_table_column)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create TableRow
  Adds rows to the end of a table.  Note that this API can accept multiple rows of data. Adding one row at a time can affect performance. The recommended approach is to batch the rows together in a single call rather than inserting single rows. For best results, collect the rows to be inserted on the application side and perform a single row add operation. Experiment with the number of rows to determine the ideal number of rows to use in a single API call.  This request might occasionally result in a 504 HTTP error. The appropriate response to this error is to repeat the request. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `microsoft_graph_workbook_table_row` (MicrosoftGraphWorkbookTableRow): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_create_rows(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_create_rows(connection, drive_id, drive_item_id, workbook_table_id, microsoft_graph_workbook_table_row, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/rows")
      |> add_param(:body, :body, microsoft_graph_workbook_table_row)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  TableColumn: delete
  Deletes the column from the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_delete_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_delete_columns(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  TableRow: delete
  Deletes the row from the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_row_id` (String.t): The unique identifier of workbookTableRow
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_delete_rows(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_delete_rows(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_row_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/rows/#{workbook_table_row_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sort for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_delete_sort(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_delete_sort(connection, drive_id, drive_item_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/sort")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get TableColumn
  Retrieve the properties and relationships of tablecolumn object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_get_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_get_columns(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get TableRow
  Retrieve the properties and relationships of tablerow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_row_id` (String.t): The unique identifier of workbookTableRow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_get_rows(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_get_rows(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_row_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/rows/#{workbook_table_row_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get TableSort
  Retrieve the properties and relationships of tablesort object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_get_sort(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_get_sort(connection, drive_id, drive_item_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/sort")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get worksheet from drives
  The worksheet containing the current table. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_get_worksheet(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_get_worksheet(connection, drive_id, drive_item_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/worksheet")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List columns
  Retrieve a list of tablecolumn objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumnCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_list_columns(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumnCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_list_columns(connection, drive_id, drive_item_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumnCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List rows
  Retrieve a list of tablerow objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRowCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_list_rows(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRowCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_list_rows(connection, drive_id, drive_item_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/rows")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRowCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update tablecolumn
  Update the properties of tablecolumn object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `microsoft_graph_workbook_table_column` (MicrosoftGraphWorkbookTableColumn): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_update_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_update_columns(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, microsoft_graph_workbook_table_column, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_table_column)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update tablerow
  Update the properties of tablerow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_row_id` (String.t): The unique identifier of workbookTableRow
  - `microsoft_graph_workbook_table_row` (MicrosoftGraphWorkbookTableRow): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_update_rows(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_update_rows(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_row_id, microsoft_graph_workbook_table_row, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/rows/#{workbook_table_row_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_table_row)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sort in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `microsoft_graph_workbook_table_sort` (MicrosoftGraphWorkbookTableSort): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_tables_update_sort(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_tables_update_sort(connection, drive_id, drive_item_id, workbook_table_id, microsoft_graph_workbook_table_sort, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/sort")
      |> add_param(:body, :body, microsoft_graph_workbook_table_sort)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property application in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_workbook_application` (MicrosoftGraphWorkbookApplication): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookApplication.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_update_application(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookApplication.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookApplication.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_update_application(connection, drive_id, drive_item_id, microsoft_graph_workbook_application, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/application")
      |> add_param(:body, :body, microsoft_graph_workbook_application)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookApplication},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property comments in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_comment_id` (String.t): The unique identifier of workbookComment
  - `microsoft_graph_workbook_comment` (MicrosoftGraphWorkbookComment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookComment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_update_comments(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookComment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookComment.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_update_comments(connection, drive_id, drive_item_id, workbook_comment_id, microsoft_graph_workbook_comment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/comments/#{workbook_comment_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_comment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookComment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property functions in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_workbook_functions` (MicrosoftGraphWorkbookFunctions): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFunctions.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_update_functions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookFunctions.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFunctions.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_update_functions(connection, drive_id, drive_item_id, microsoft_graph_workbook_functions, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/functions")
      |> add_param(:body, :body, microsoft_graph_workbook_functions)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookFunctions},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update nameditem
  Update the properties of nameditem object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_named_item_id` (String.t): The unique identifier of workbookNamedItem
  - `microsoft_graph_workbook_named_item` (MicrosoftGraphWorkbookNamedItem): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_update_names(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_update_names(connection, drive_id, drive_item_id, workbook_named_item_id, microsoft_graph_workbook_named_item, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/names/#{workbook_named_item_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_named_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property operations in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_operation_id` (String.t): The unique identifier of workbookOperation
  - `microsoft_graph_workbook_operation` (MicrosoftGraphWorkbookOperation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_update_operations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_update_operations(connection, drive_id, drive_item_id, workbook_operation_id, microsoft_graph_workbook_operation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/operations/#{workbook_operation_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update table
  Update the properties of table object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `microsoft_graph_workbook_table` (MicrosoftGraphWorkbookTable): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_update_tables(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_update_tables(connection, drive_id, drive_item_id, workbook_table_id, microsoft_graph_workbook_table, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_table)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTable},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update worksheet
  Update the properties of worksheet object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `microsoft_graph_workbook_worksheet` (MicrosoftGraphWorkbookWorksheet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_update_worksheets(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_update_worksheets(connection, drive_id, drive_item_id, workbook_worksheet_id, microsoft_graph_workbook_worksheet, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_worksheet)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property majorGridlines for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_delete_major_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_delete_major_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/majorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property minorGridlines for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_delete_minor_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_delete_minor_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/minorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property title for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_delete_title(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_delete_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/title")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property font for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_format_delete_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_format_delete_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property line for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_format_delete_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_format_delete_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartFont
  Retrieve the properties and relationships of chartfont object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_format_get_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_format_get_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartLineFormat
  Retrieve the properties and relationships of chartlineformat object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_format_get_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_format_get_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartfont
  Update the properties of chartfont object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_font` (MicrosoftGraphWorkbookChartFont): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_format_update_font(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_format_update_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_font, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/format/font")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_font)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartlineformat
  Update the properties of chartlineformat object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_line_format` (MicrosoftGraphWorkbookChartLineFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_format_update_line(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_format_update_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_line_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/format/line")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_line_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of a chart object, which includes line and font formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get majorGridlines from drives
  Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_get_major_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_get_major_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/majorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartGridlines
  Retrieve the properties and relationships of chartgridlines object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_get_minor_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_get_minor_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/minorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartAxisTitle
  Retrieve the properties and relationships of chartaxistitle object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_get_title(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_get_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/title")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/majorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property line for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_format_delete_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_format_delete_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/majorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get line from drives
  Represents chart line formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_format_get_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_format_get_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/majorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property line in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_line_format` (MicrosoftGraphWorkbookChartLineFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_format_update_line(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_format_update_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_line_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/majorGridlines/format/line")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_line_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of chart gridlines. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/majorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines_format` (MicrosoftGraphWorkbookChartGridlinesFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_major_gridlines_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/majorGridlines/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/minorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property line for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_format_delete_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_format_delete_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/minorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get line from drives
  Represents chart line formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_format_get_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_format_get_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/minorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property line in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_line_format` (MicrosoftGraphWorkbookChartLineFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_format_update_line(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_format_update_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_line_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/minorGridlines/format/line")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_line_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of chart gridlines. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/minorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines_format` (MicrosoftGraphWorkbookChartGridlinesFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_minor_gridlines_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/minorGridlines/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_title_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_title_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/title/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property font for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_title_format_delete_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_title_format_delete_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/title/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get font from drives
  Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_title_format_get_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_title_format_get_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/title/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property font in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_font` (MicrosoftGraphWorkbookChartFont): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_title_format_update_font(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_title_format_update_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_font, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/title/format/font")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_font)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of chart axis title. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_title_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_title_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/title/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis_title_format` (MicrosoftGraphWorkbookChartAxisTitleFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_title_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_title_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis_title_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/title/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis_title_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis_format` (MicrosoftGraphWorkbookChartAxisFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property majorGridlines in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines` (MicrosoftGraphWorkbookChartGridlines): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_update_major_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_update_major_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/majorGridlines")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartgridlines
  Update the properties of chartgridlines object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines` (MicrosoftGraphWorkbookChartGridlines): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_update_minor_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_update_minor_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/minorGridlines")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartaxistitle
  Update the properties of chartaxistitle object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis_title` (MicrosoftGraphWorkbookChartAxisTitle): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_category_axis_update_title(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_category_axis_update_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis_title, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis/title")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis_title)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property categoryAxis for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_delete_category_axis(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_delete_category_axis(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property seriesAxis for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_delete_series_axis(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_delete_series_axis(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property valueAxis for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_delete_value_axis(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_delete_value_axis(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categoryAxis from drives
  Represents the category axis in a chart. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_get_category_axis(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_get_category_axis(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get seriesAxis from drives
  Represents the series axis of a 3-dimensional chart. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_get_series_axis(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_get_series_axis(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartAxis
  Retrieve the properties and relationships of chartaxis object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_get_value_axis(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_get_value_axis(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property majorGridlines for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_delete_major_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_delete_major_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/majorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property minorGridlines for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_delete_minor_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_delete_minor_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/minorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property title for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_delete_title(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_delete_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/title")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property font for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_format_delete_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_format_delete_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property line for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_format_delete_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_format_delete_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartFont
  Retrieve the properties and relationships of chartfont object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_format_get_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_format_get_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartLineFormat
  Retrieve the properties and relationships of chartlineformat object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_format_get_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_format_get_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartfont
  Update the properties of chartfont object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_font` (MicrosoftGraphWorkbookChartFont): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_format_update_font(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_format_update_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_font, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/format/font")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_font)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartlineformat
  Update the properties of chartlineformat object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_line_format` (MicrosoftGraphWorkbookChartLineFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_format_update_line(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_format_update_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_line_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/format/line")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_line_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of a chart object, which includes line and font formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get majorGridlines from drives
  Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_get_major_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_get_major_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/majorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartGridlines
  Retrieve the properties and relationships of chartgridlines object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_get_minor_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_get_minor_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/minorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartAxisTitle
  Retrieve the properties and relationships of chartaxistitle object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_get_title(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_get_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/title")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/majorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property line for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_format_delete_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_format_delete_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/majorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get line from drives
  Represents chart line formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_format_get_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_format_get_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/majorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property line in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_line_format` (MicrosoftGraphWorkbookChartLineFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_format_update_line(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_format_update_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_line_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/majorGridlines/format/line")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_line_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of chart gridlines. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/majorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines_format` (MicrosoftGraphWorkbookChartGridlinesFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_major_gridlines_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/majorGridlines/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/minorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property line for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_format_delete_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_format_delete_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/minorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get line from drives
  Represents chart line formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_format_get_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_format_get_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/minorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property line in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_line_format` (MicrosoftGraphWorkbookChartLineFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_format_update_line(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_format_update_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_line_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/minorGridlines/format/line")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_line_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of chart gridlines. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/minorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines_format` (MicrosoftGraphWorkbookChartGridlinesFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_minor_gridlines_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/minorGridlines/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_title_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_title_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/title/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property font for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_title_format_delete_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_title_format_delete_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/title/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get font from drives
  Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_title_format_get_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_title_format_get_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/title/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property font in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_font` (MicrosoftGraphWorkbookChartFont): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_title_format_update_font(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_title_format_update_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_font, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/title/format/font")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_font)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of chart axis title. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_title_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_title_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/title/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis_title_format` (MicrosoftGraphWorkbookChartAxisTitleFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_title_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_title_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis_title_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/title/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis_title_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis_format` (MicrosoftGraphWorkbookChartAxisFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property majorGridlines in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines` (MicrosoftGraphWorkbookChartGridlines): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_update_major_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_update_major_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/majorGridlines")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartgridlines
  Update the properties of chartgridlines object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines` (MicrosoftGraphWorkbookChartGridlines): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_update_minor_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_update_minor_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/minorGridlines")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartaxistitle
  Update the properties of chartaxistitle object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis_title` (MicrosoftGraphWorkbookChartAxisTitle): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_series_axis_update_title(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_series_axis_update_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis_title, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis/title")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis_title)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property categoryAxis in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis` (MicrosoftGraphWorkbookChartAxis): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_update_category_axis(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_update_category_axis(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/categoryAxis")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property seriesAxis in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis` (MicrosoftGraphWorkbookChartAxis): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_update_series_axis(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_update_series_axis(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/seriesAxis")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartaxis
  Update the properties of chartaxis object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis` (MicrosoftGraphWorkbookChartAxis): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_update_value_axis(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_update_value_axis(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxis},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property majorGridlines for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_delete_major_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_delete_major_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/majorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property minorGridlines for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_delete_minor_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_delete_minor_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/minorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property title for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_delete_title(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_delete_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/title")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property font for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_format_delete_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_format_delete_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property line for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_format_delete_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_format_delete_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartFont
  Retrieve the properties and relationships of chartfont object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_format_get_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_format_get_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartLineFormat
  Retrieve the properties and relationships of chartlineformat object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_format_get_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_format_get_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartfont
  Update the properties of chartfont object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_font` (MicrosoftGraphWorkbookChartFont): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_format_update_font(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_format_update_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_font, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/format/font")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_font)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartlineformat
  Update the properties of chartlineformat object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_line_format` (MicrosoftGraphWorkbookChartLineFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_format_update_line(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_format_update_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_line_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/format/line")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_line_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of a chart object, which includes line and font formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get majorGridlines from drives
  Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_get_major_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_get_major_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/majorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartGridlines
  Retrieve the properties and relationships of chartgridlines object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_get_minor_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_get_minor_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/minorGridlines")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartAxisTitle
  Retrieve the properties and relationships of chartaxistitle object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_get_title(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_get_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/title")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/majorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property line for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_format_delete_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_format_delete_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/majorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get line from drives
  Represents chart line formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_format_get_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_format_get_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/majorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property line in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_line_format` (MicrosoftGraphWorkbookChartLineFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_format_update_line(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_format_update_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_line_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/majorGridlines/format/line")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_line_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of chart gridlines. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/majorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines_format` (MicrosoftGraphWorkbookChartGridlinesFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_major_gridlines_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/majorGridlines/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/minorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property line for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_format_delete_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_format_delete_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/minorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get line from drives
  Represents chart line formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_format_get_line(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_format_get_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/minorGridlines/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property line in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_line_format` (MicrosoftGraphWorkbookChartLineFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_format_update_line(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_format_update_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_line_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/minorGridlines/format/line")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_line_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of chart gridlines. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/minorGridlines/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines_format` (MicrosoftGraphWorkbookChartGridlinesFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_minor_gridlines_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/minorGridlines/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlinesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_title_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_title_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/title/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property font for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_title_format_delete_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_title_format_delete_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/title/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get font from drives
  Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_title_format_get_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_title_format_get_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/title/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property font in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_font` (MicrosoftGraphWorkbookChartFont): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_title_format_update_font(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_title_format_update_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_font, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/title/format/font")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_font)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of chart axis title. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_title_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_title_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/title/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis_title_format` (MicrosoftGraphWorkbookChartAxisTitleFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_title_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_title_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis_title_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/title/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis_title_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitleFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis_format` (MicrosoftGraphWorkbookChartAxisFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property majorGridlines in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines` (MicrosoftGraphWorkbookChartGridlines): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_update_major_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_update_major_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/majorGridlines")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartgridlines
  Update the properties of chartgridlines object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_gridlines` (MicrosoftGraphWorkbookChartGridlines): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_update_minor_gridlines(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_update_minor_gridlines(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_gridlines, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/minorGridlines")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_gridlines)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartGridlines},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartaxistitle
  Update the properties of chartaxistitle object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axis_title` (MicrosoftGraphWorkbookChartAxisTitle): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_axes_value_axis_update_title(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_axes_value_axis_update_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axis_title, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes/valueAxis/title")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axis_title)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxisTitle},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create ChartSeries
  Use this API to create a new ChartSeries. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_series` (MicrosoftGraphWorkbookChartSeries): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeries.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_create_series(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeries.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeries.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_create_series(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_series, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_series)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeries},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_data_labels_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_data_labels_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fill for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_data_labels_format_delete_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_data_labels_format_delete_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property font for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_data_labels_format_delete_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_data_labels_format_delete_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fill from drives
  Represents the fill format of the current chart data label. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_data_labels_format_get_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_data_labels_format_get_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get font from drives
  Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_data_labels_format_get_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_data_labels_format_get_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property fill in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_fill` (MicrosoftGraphWorkbookChartFill): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_data_labels_format_update_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_data_labels_format_update_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_fill, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels/format/fill")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_fill)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property font in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_font` (MicrosoftGraphWorkbookChartFont): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_data_labels_format_update_font(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_data_labels_format_update_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_font, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels/format/font")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_font)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the format of chart data labels, which includes fill and font formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabelFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_data_labels_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabelFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_data_labels_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabelFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_data_label_format` (MicrosoftGraphWorkbookChartDataLabelFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabelFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_data_labels_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabelFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabelFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_data_labels_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_data_label_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_data_label_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabelFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property axes for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_delete_axes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_delete_axes(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property dataLabels for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_delete_data_labels(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_delete_data_labels(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property legend for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_delete_legend(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_delete_legend(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property series for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_delete_series(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_delete_series(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property title for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_delete_title(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_delete_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fill for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_format_delete_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_format_delete_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property font for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_format_delete_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_format_delete_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fill from drives
  Represents the fill format of an object, which includes background formatting information. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_format_get_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_format_get_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get font from drives
  Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_format_get_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_format_get_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property fill in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_fill` (MicrosoftGraphWorkbookChartFill): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_format_update_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_format_update_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_fill, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/format/fill")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_fill)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property font in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_font` (MicrosoftGraphWorkbookChartFont): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_format_update_font(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_format_update_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_font, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/format/font")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_font)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get axes from drives
  Represents chart axes. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxes.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_get_axes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxes.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_get_axes(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxes},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartDataLabels
  Retrieve the properties and relationships of chartdatalabels object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabels.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_get_data_labels(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabels.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_get_data_labels(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabels},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Encapsulates the format properties for the chart area. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAreaFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAreaFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAreaFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartLegend
  Retrieve the properties and relationships of chartlegend object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegend.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_get_legend(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegend.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_get_legend(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegend},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartSeries
  Retrieve the properties and relationships of chartseries object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeries.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_get_series(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeries.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_get_series(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeries},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartTitle
  Retrieve the properties and relationships of charttitle object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_get_title(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitle.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_get_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitle},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get worksheet from drives
  The worksheet containing the current chart. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_get_worksheet(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_get_worksheet(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/worksheet")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_legend_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_legend_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fill for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_legend_format_delete_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_legend_format_delete_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property font for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_legend_format_delete_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_legend_format_delete_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fill from drives
  Represents the fill format of an object, which includes background formating information. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_legend_format_get_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_legend_format_get_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get font from drives
  Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_legend_format_get_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_legend_format_get_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property fill in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_fill` (MicrosoftGraphWorkbookChartFill): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_legend_format_update_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_legend_format_update_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_fill, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend/format/fill")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_fill)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property font in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_font` (MicrosoftGraphWorkbookChartFont): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_legend_format_update_font(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_legend_format_update_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_font, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend/format/font")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_font)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegendFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_legend_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegendFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_legend_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegendFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_legend_format` (MicrosoftGraphWorkbookChartLegendFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegendFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_legend_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegendFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegendFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_legend_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_legend_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_legend_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegendFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List series
  Retrieve a list of chartseries objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeriesCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_list_series(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeriesCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_list_series(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeriesCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create ChartPoints
  Use this API to create a new ChartPoints. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `microsoft_graph_workbook_chart_point` (MicrosoftGraphWorkbookChartPoint): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPoint.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_create_points(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPoint.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPoint.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_create_points(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, microsoft_graph_workbook_chart_point, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_point)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPoint},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property points for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `workbook_chart_point_id` (String.t): The unique identifier of workbookChartPoint
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_delete_points(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_delete_points(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, workbook_chart_point_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/#{workbook_chart_point_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fill for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_format_delete_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_format_delete_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property line for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_format_delete_line(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_format_delete_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fill from drives
  Represents the fill format of a chart series, which includes background formatting information. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_format_get_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_format_get_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get line from drives
  Represents line formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_format_get_line(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_format_get_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format/line")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property fill in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `microsoft_graph_workbook_chart_fill` (MicrosoftGraphWorkbookChartFill): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_format_update_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_format_update_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, microsoft_graph_workbook_chart_fill, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format/fill")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_fill)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property line in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `microsoft_graph_workbook_chart_line_format` (MicrosoftGraphWorkbookChartLineFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_format_update_line(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_format_update_line(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, microsoft_graph_workbook_chart_line_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format/line")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_line_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLineFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of a chart series, which includes fill and line formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeriesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeriesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeriesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ChartPoint
  Retrieve the properties and relationships of chartpoint object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `workbook_chart_point_id` (String.t): The unique identifier of workbookChartPoint
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPoint.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_get_points(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPoint.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_get_points(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, workbook_chart_point_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/#{workbook_chart_point_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPoint},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List ChartPointsCollection
  Retrieve a list of chartpoint objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPointCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_list_points(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPointCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_list_points(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPointCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `workbook_chart_point_id` (String.t): The unique identifier of workbookChartPoint
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_points_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_points_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, workbook_chart_point_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/#{workbook_chart_point_id}/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fill for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `workbook_chart_point_id` (String.t): The unique identifier of workbookChartPoint
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_points_format_delete_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_points_format_delete_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, workbook_chart_point_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/#{workbook_chart_point_id}/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fill from drives
  Represents the fill format of a chart, which includes background formatting information. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `workbook_chart_point_id` (String.t): The unique identifier of workbookChartPoint
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_points_format_get_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_points_format_get_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, workbook_chart_point_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/#{workbook_chart_point_id}/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property fill in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `workbook_chart_point_id` (String.t): The unique identifier of workbookChartPoint
  - `microsoft_graph_workbook_chart_fill` (MicrosoftGraphWorkbookChartFill): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_points_format_update_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_points_format_update_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, workbook_chart_point_id, microsoft_graph_workbook_chart_fill, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/#{workbook_chart_point_id}/format/fill")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_fill)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Encapsulates the format properties chart point. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `workbook_chart_point_id` (String.t): The unique identifier of workbookChartPoint
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPointFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_points_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPointFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_points_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, workbook_chart_point_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/#{workbook_chart_point_id}/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPointFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `workbook_chart_point_id` (String.t): The unique identifier of workbookChartPoint
  - `microsoft_graph_workbook_chart_point_format` (MicrosoftGraphWorkbookChartPointFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPointFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_points_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPointFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPointFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_points_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, workbook_chart_point_id, microsoft_graph_workbook_chart_point_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/#{workbook_chart_point_id}/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_point_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPointFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `microsoft_graph_workbook_chart_series_format` (MicrosoftGraphWorkbookChartSeriesFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeriesFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeriesFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeriesFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, microsoft_graph_workbook_chart_series_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_series_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeriesFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property points in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `workbook_chart_point_id` (String.t): The unique identifier of workbookChartPoint
  - `microsoft_graph_workbook_chart_point` (MicrosoftGraphWorkbookChartPoint): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPoint.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_series_update_points(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPoint.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPoint.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_series_update_points(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, workbook_chart_point_id, microsoft_graph_workbook_chart_point, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/#{workbook_chart_point_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_point)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartPoint},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property format for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_title_delete_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_title_delete_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fill for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_title_format_delete_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_title_format_delete_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property font for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_title_format_delete_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_title_format_delete_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fill from drives
  Represents the fill format of an object, which includes background formatting information. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_title_format_get_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_title_format_get_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title/format/fill")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get font from drives
  Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_title_format_get_font(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_title_format_get_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title/format/font")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property fill in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_fill` (MicrosoftGraphWorkbookChartFill): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_title_format_update_fill(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_title_format_update_fill(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_fill, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title/format/fill")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_fill)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFill},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property font in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_font` (MicrosoftGraphWorkbookChartFont): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_title_format_update_font(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_title_format_update_font(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_font, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title/format/font")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_font)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartFont},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get format from drives
  Represents the formatting of a chart title, which includes fill and font formatting. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitleFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_title_get_format(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitleFormat.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_title_get_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title/format")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitleFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_title_format` (MicrosoftGraphWorkbookChartTitleFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitleFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_title_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitleFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitleFormat.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_title_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_title_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_title_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitleFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property axes in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_axes` (MicrosoftGraphWorkbookChartAxes): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxes.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_update_axes(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxes.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxes.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_update_axes(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_axes, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/axes")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_axes)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAxes},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartdatalabels
  Update the properties of chartdatalabels object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_data_labels` (MicrosoftGraphWorkbookChartDataLabels): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabels.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_update_data_labels(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabels.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabels.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_update_data_labels(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_data_labels, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/dataLabels")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_data_labels)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartDataLabels},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property format in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_area_format` (MicrosoftGraphWorkbookChartAreaFormat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAreaFormat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_update_format(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAreaFormat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAreaFormat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_update_format(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_area_format, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/format")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_area_format)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartAreaFormat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartlegend
  Update the properties of chartlegend object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_legend` (MicrosoftGraphWorkbookChartLegend): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegend.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_update_legend(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegend.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegend.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_update_legend(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_legend, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/legend")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_legend)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartLegend},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chartseries
  Update the properties of chartseries object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `microsoft_graph_workbook_chart_series` (MicrosoftGraphWorkbookChartSeries): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeries.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_update_series(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeries.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeries.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_update_series(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, microsoft_graph_workbook_chart_series, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_series)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartSeries},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update charttitle
  Update the properties of charttitle object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart_title` (MicrosoftGraphWorkbookChartTitle): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitle.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_charts_update_title(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitle.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitle.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_charts_update_title(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart_title, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/title")
      |> add_param(:body, :body, microsoft_graph_workbook_chart_title)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartTitle},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create Chart
  Use this API to create a new Chart. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `microsoft_graph_workbook_chart` (MicrosoftGraphWorkbookChart): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChart.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_create_charts(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChart.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChart.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_create_charts(connection, drive_id, drive_item_id, workbook_worksheet_id, microsoft_graph_workbook_chart, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts")
      |> add_param(:body, :body, microsoft_graph_workbook_chart)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChart},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to names for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `microsoft_graph_workbook_named_item` (MicrosoftGraphWorkbookNamedItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_create_names(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_create_names(connection, drive_id, drive_item_id, workbook_worksheet_id, microsoft_graph_workbook_named_item, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/names")
      |> add_param(:body, :body, microsoft_graph_workbook_named_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to pivotTables for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `microsoft_graph_workbook_pivot_table` (MicrosoftGraphWorkbookPivotTable): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_create_pivot_tables(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTable.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTable.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_create_pivot_tables(connection, drive_id, drive_item_id, workbook_worksheet_id, microsoft_graph_workbook_pivot_table, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/pivotTables")
      |> add_param(:body, :body, microsoft_graph_workbook_pivot_table)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTable},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to tables for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `microsoft_graph_workbook_table` (MicrosoftGraphWorkbookTable): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_create_tables(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_create_tables(connection, drive_id, drive_item_id, workbook_worksheet_id, microsoft_graph_workbook_table, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables")
      |> add_param(:body, :body, microsoft_graph_workbook_table)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTable},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Chart: delete
  Deletes the chart object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_delete_charts(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_delete_charts(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property names for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_named_item_id` (String.t): The unique identifier of workbookNamedItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_delete_names(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_delete_names(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_named_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/names/#{workbook_named_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property pivotTables for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_pivot_table_id` (String.t): The unique identifier of workbookPivotTable
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_delete_pivot_tables(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_delete_pivot_tables(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_pivot_table_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/pivotTables/#{workbook_pivot_table_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property protection for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_delete_protection(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_delete_protection(connection, drive_id, drive_item_id, workbook_worksheet_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/protection")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property tables for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_delete_tables(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_delete_tables(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get Chart
  Retrieve the properties and relationships of chart object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChart.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_get_charts(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChart.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_get_charts(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChart},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_get_count98c0(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_get_count98c0(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get names from drives
  Returns collection of names that are associated with the worksheet. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_named_item_id` (String.t): The unique identifier of workbookNamedItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_get_names(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_get_names(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_named_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/names/#{workbook_named_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get workbookPivotTable
  Retrieve the properties and relationships of workbookPivotTable object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_pivot_table_id` (String.t): The unique identifier of workbookPivotTable
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_get_pivot_tables(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTable.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_get_pivot_tables(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_pivot_table_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/pivotTables/#{workbook_pivot_table_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTable},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get WorksheetProtection
  Retrieve the properties and relationships of worksheetprotection object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheetProtection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_get_protection(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheetProtection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_get_protection(connection, drive_id, drive_item_id, workbook_worksheet_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/protection")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheetProtection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tables from drives
  Collection of tables that are part of the worksheet. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_get_tables(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_get_tables(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTable},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List charts
  Retrieve a list of chart objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_list_charts(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChartCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_list_charts(connection, drive_id, drive_item_id, workbook_worksheet_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChartCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List names
  Retrieve a list of named item associated with the worksheet.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_list_names(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItemCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_list_names(connection, drive_id, drive_item_id, workbook_worksheet_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/names")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List pivotTables
  Retrieve a list of workbookpivottable objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTableCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_list_pivot_tables(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTableCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_list_pivot_tables(connection, drive_id, drive_item_id, workbook_worksheet_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/pivotTables")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTableCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List tables
  Retrieve a list of table objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_list_tables(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_list_tables(connection, drive_id, drive_item_id, workbook_worksheet_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_names_get_count_b666(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_names_get_count_b666(connection, drive_id, drive_item_id, workbook_worksheet_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/names/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get worksheet from drives
  Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_named_item_id` (String.t): The unique identifier of workbookNamedItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_names_get_worksheet(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_names_get_worksheet(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_named_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/names/#{workbook_named_item_id}/worksheet")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_pivot_tables_get_count_d7ec(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_pivot_tables_get_count_d7ec(connection, drive_id, drive_item_id, workbook_worksheet_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/pivotTables/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get worksheet from drives
  The worksheet containing the current PivotTable. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_pivot_table_id` (String.t): The unique identifier of workbookPivotTable
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_pivot_tables_get_worksheet(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_pivot_tables_get_worksheet(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_pivot_table_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/pivotTables/#{workbook_pivot_table_id}/worksheet")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property filter for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_columns_delete_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_columns_delete_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get filter from drives
  Retrieve the filter applied to the column. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_columns_get_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_columns_get_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property filter in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `microsoft_graph_workbook_filter` (MicrosoftGraphWorkbookFilter): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_columns_update_filter(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_columns_update_filter(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, microsoft_graph_workbook_filter, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/filter")
      |> add_param(:body, :body, microsoft_graph_workbook_filter)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookFilter},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create TableColumn
  Use this API to create a new TableColumn. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `microsoft_graph_workbook_table_column` (MicrosoftGraphWorkbookTableColumn): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_create_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_create_columns(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, microsoft_graph_workbook_table_column, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns")
      |> add_param(:body, :body, microsoft_graph_workbook_table_column)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create TableRow
  Adds rows to the end of a table.  Note that this API can accept multiple rows of data. Adding one row at a time can affect performance. The recommended approach is to batch the rows together in a single call rather than inserting single rows. For best results, collect the rows to be inserted on the application side and perform a single row add operation. Experiment with the number of rows to determine the ideal number of rows to use in a single API call.  This request might occasionally result in a 504 HTTP error. The appropriate response to this error is to repeat the request. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `microsoft_graph_workbook_table_row` (MicrosoftGraphWorkbookTableRow): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_create_rows(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_create_rows(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, microsoft_graph_workbook_table_row, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/rows")
      |> add_param(:body, :body, microsoft_graph_workbook_table_row)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  TableColumn: delete
  Deletes the column from the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_delete_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_delete_columns(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  TableRow: delete
  Deletes the row from the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_row_id` (String.t): The unique identifier of workbookTableRow
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_delete_rows(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_delete_rows(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_row_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/rows/#{workbook_table_row_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sort for drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_delete_sort(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_delete_sort(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/sort")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get TableColumn
  Retrieve the properties and relationships of tablecolumn object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_get_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_get_columns(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get TableRow
  Retrieve the properties and relationships of tablerow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_row_id` (String.t): The unique identifier of workbookTableRow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_get_rows(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_get_rows(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_row_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/rows/#{workbook_table_row_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get TableSort
  Retrieve the properties and relationships of tablesort object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_get_sort(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_get_sort(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/sort")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get worksheet from drives
  The worksheet containing the current table. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_get_worksheet(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_get_worksheet(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/worksheet")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List columns
  Retrieve a list of tablecolumn objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumnCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_list_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumnCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_list_columns(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumnCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List rows
  Retrieve a list of tablerow objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRowCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_list_rows(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRowCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_list_rows(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/rows")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRowCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update tablecolumn
  Update the properties of tablecolumn object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `microsoft_graph_workbook_table_column` (MicrosoftGraphWorkbookTableColumn): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_update_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_update_columns(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, microsoft_graph_workbook_table_column, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_table_column)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableColumn},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update tablerow
  Update the properties of tablerow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_row_id` (String.t): The unique identifier of workbookTableRow
  - `microsoft_graph_workbook_table_row` (MicrosoftGraphWorkbookTableRow): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_update_rows(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_update_rows(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_row_id, microsoft_graph_workbook_table_row, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/rows/#{workbook_table_row_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_table_row)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableRow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sort in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `microsoft_graph_workbook_table_sort` (MicrosoftGraphWorkbookTableSort): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_tables_update_sort(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_tables_update_sort(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, microsoft_graph_workbook_table_sort, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/sort")
      |> add_param(:body, :body, microsoft_graph_workbook_table_sort)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTableSort},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chart
  Update the properties of chart object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `microsoft_graph_workbook_chart` (MicrosoftGraphWorkbookChart): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChart.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_update_charts(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookChart.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookChart.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_update_charts(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, microsoft_graph_workbook_chart, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_chart)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookChart},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property names in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_named_item_id` (String.t): The unique identifier of workbookNamedItem
  - `microsoft_graph_workbook_named_item` (MicrosoftGraphWorkbookNamedItem): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_update_names(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_update_names(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_named_item_id, microsoft_graph_workbook_named_item, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/names/#{workbook_named_item_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_named_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookNamedItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pivotTables in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_pivot_table_id` (String.t): The unique identifier of workbookPivotTable
  - `microsoft_graph_workbook_pivot_table` (MicrosoftGraphWorkbookPivotTable): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_update_pivot_tables(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTable.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTable.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_update_pivot_tables(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_pivot_table_id, microsoft_graph_workbook_pivot_table, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/pivotTables/#{workbook_pivot_table_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_pivot_table)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookPivotTable},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property protection in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `microsoft_graph_workbook_worksheet_protection` (MicrosoftGraphWorkbookWorksheetProtection): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheetProtection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_update_protection(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheetProtection.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheetProtection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_update_protection(connection, drive_id, drive_item_id, workbook_worksheet_id, microsoft_graph_workbook_worksheet_protection, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/protection")
      |> add_param(:body, :body, microsoft_graph_workbook_worksheet_protection)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookWorksheetProtection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property tables in drives

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `microsoft_graph_workbook_table` (MicrosoftGraphWorkbookTable): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_items_workbook_worksheets_update_tables(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWorkbookTable.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_items_workbook_worksheets_update_tables(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, microsoft_graph_workbook_table, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}")
      |> add_param(:body, :body, microsoft_graph_workbook_table)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWorkbookTable},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get bundles from drives
  Collection of [bundles][bundle] (albums and multi-select-shared sets of items). Only in personal OneDrive.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_list_bundles(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_list_bundles(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/bundles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List followed items
  List the items that have been followed by the signed in user. This collection includes items that are in the user's drive as well as items they have access to from other drives. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_list_following(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_list_following(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/following")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get items from drives
  All items contained in the drive. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_list_items(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_list_items(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get a special folder by name
  Use the special collection to access a special folder by name. Special folders provide simple aliases to access well-known folders in OneDrive without the need to look up the folder by path (which would require localization), or reference the folder with an ID. If a special folder is renamed or moved to another location within the drive, this syntax will continue to find that folder. Special folders are automatically created the first time an application attempts to write to one, if it doesn't already exist. If a user deletes one, it is recreated when written to again. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_list_special(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_list_special(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/special")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_special_get_count6a2e(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_special_get_count6a2e(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/special/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property bundles in drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_update_bundles_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_update_bundles_content(connection, drive_id, drive_item_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/drives/#{drive_id}/bundles/#{drive_item_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property following in drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_update_following_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_update_following_content(connection, drive_id, drive_item_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/drives/#{drive_id}/following/#{drive_item_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Move a DriveItem to a new folder
  To move a DriveItem to a new parent item, your app requests to update the parentReference of the DriveItem to move. This is a special case of the Update method. Your app can combine moving an item to a new container and updating other properties of the item into a single request. Items cannot be moved between Drives using this request. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `microsoft_graph_drive_item` (MicrosoftGraphDriveItem): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_update_items(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_update_items(connection, drive_id, drive_item_id, microsoft_graph_drive_item, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}")
      |> add_param(:body, :body, microsoft_graph_drive_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property items in drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_update_items_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_update_items_content(connection, drive_id, drive_item_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property root in drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_update_root_content(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_update_root_content(connection, drive_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/drives/#{drive_id}/root/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property special in drives
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_update_special_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_update_special_content(connection, drive_id, drive_item_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/drives/#{drive_id}/special/#{drive_item_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
