# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.TeamsSchedule do
  @moduledoc """
  API calls for all endpoints tagged `TeamsSchedule`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property schedule for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_delete_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_delete_schedule(connection, team_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/schedule")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get schedule
  Retrieve the properties and relationships of a schedule object. The schedule creation process conforms to the One API guideline for resource based long running operations (RELO). When clients use the PUT method, if the schedule is provisioned, the operation updates the schedule; otherwise, the operation starts the schedule provisioning process in the background. During schedule provisioning, clients can use the GET method to get the schedule and look at the provisionStatus property for the current state of the provisioning. If the provisioning failed, clients can get additional information from the provisionStatusCode property. Clients can also inspect the configuration of the schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_get_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_get_schedule(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create offerShiftRequest
  Create an instance of an offerShiftRequest. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_offer_shift_request` (MicrosoftGraphOfferShiftRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_create_offer_shift_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_create_offer_shift_requests(connection, team_id, microsoft_graph_offer_shift_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/schedule/offerShiftRequests")
      |> add_param(:body, :body, microsoft_graph_offer_shift_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create openShiftChangeRequest
  Create instance of an openShiftChangeRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_open_shift_change_request` (MicrosoftGraphOpenShiftChangeRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_create_open_shift_change_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_create_open_shift_change_requests(connection, team_id, microsoft_graph_open_shift_change_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/schedule/openShiftChangeRequests")
      |> add_param(:body, :body, microsoft_graph_open_shift_change_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create openShift
  Create an instance of an openShift object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_open_shift` (MicrosoftGraphOpenShift): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_create_open_shifts(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_create_open_shifts(connection, team_id, microsoft_graph_open_shift, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/schedule/openShifts")
      |> add_param(:body, :body, microsoft_graph_open_shift)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create schedulingGroup
  Create a new schedulingGroup. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_scheduling_group` (MicrosoftGraphSchedulingGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_create_scheduling_groups(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t} | {:error, Tesla.Env.t}
  def teams_schedule_create_scheduling_groups(connection, team_id, microsoft_graph_scheduling_group, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/schedule/schedulingGroups")
      |> add_param(:body, :body, microsoft_graph_scheduling_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create shift
  Create a new shift instance in a schedule. The duration of a shift cannot be less than 1 minute or longer than 24 hours. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_shift` (MicrosoftGraphShift): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_create_shifts(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphShift.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_create_shifts(connection, team_id, microsoft_graph_shift, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/schedule/shifts")
      |> add_param(:body, :body, microsoft_graph_shift)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create swapShiftsChangeRequest
  Create an instance of a swapShiftsChangeRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_swap_shifts_change_request` (MicrosoftGraphSwapShiftsChangeRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_create_swap_shifts_change_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t} | {:error, Tesla.Env.t}
  def teams_schedule_create_swap_shifts_change_requests(connection, team_id, microsoft_graph_swap_shifts_change_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/schedule/swapShiftsChangeRequests")
      |> add_param(:body, :body, microsoft_graph_swap_shifts_change_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create timeOffReason
  Create a new timeOffReason. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_time_off_reason` (MicrosoftGraphTimeOffReason): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_create_time_off_reasons(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_create_time_off_reasons(connection, team_id, microsoft_graph_time_off_reason, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/schedule/timeOffReasons")
      |> add_param(:body, :body, microsoft_graph_time_off_reason)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffReason},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to timeOffRequests for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_time_off_request` (MicrosoftGraphTimeOffRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_create_time_off_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_create_time_off_requests(connection, team_id, microsoft_graph_time_off_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/schedule/timeOffRequests")
      |> add_param(:body, :body, microsoft_graph_time_off_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create timeOff
  Create a new timeOff instance in a schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_time_off` (MicrosoftGraphTimeOff): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_create_times_off(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t} | {:error, Tesla.Env.t}
  def teams_schedule_create_times_off(connection, team_id, microsoft_graph_time_off, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/schedule/timesOff")
      |> add_param(:body, :body, microsoft_graph_time_off)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOff},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property offerShiftRequests for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `offer_shift_request_id` (String.t): The unique identifier of offerShiftRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_delete_offer_shift_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_delete_offer_shift_requests(connection, team_id, offer_shift_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/schedule/offerShiftRequests/#{offer_shift_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property openShiftChangeRequests for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `open_shift_change_request_id` (String.t): The unique identifier of openShiftChangeRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_delete_open_shift_change_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_delete_open_shift_change_requests(connection, team_id, open_shift_change_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/schedule/openShiftChangeRequests/#{open_shift_change_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete openShift
  Delete an openShift object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `open_shift_id` (String.t): The unique identifier of openShift
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_delete_open_shifts(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_delete_open_shifts(connection, team_id, open_shift_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/schedule/openShifts/#{open_shift_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete schedulingGroup
  Mark a schedulingGroup as inactive by setting its isActive property. This method does not remove the schedulingGroup from the schedule. Existing shift instances assigned to the scheduling group remain part of the group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `scheduling_group_id` (String.t): The unique identifier of schedulingGroup
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_delete_scheduling_groups(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_delete_scheduling_groups(connection, team_id, scheduling_group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/schedule/schedulingGroups/#{scheduling_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete shift
  Delete a shift from the schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `shift_id` (String.t): The unique identifier of shift
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_delete_shifts(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_delete_shifts(connection, team_id, shift_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/schedule/shifts/#{shift_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property swapShiftsChangeRequests for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `swap_shifts_change_request_id` (String.t): The unique identifier of swapShiftsChangeRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_delete_swap_shifts_change_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_delete_swap_shifts_change_requests(connection, team_id, swap_shifts_change_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/schedule/swapShiftsChangeRequests/#{swap_shifts_change_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete timeOffReason
  Mark a timeOffReason as inactive by setting the isActive property. Every team must include at least one timeoff reason. This method doesn't remove the specified timeOffReason instance. timeOffItem instances that have been assigned this reason remain assigned to this reason. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `time_off_reason_id` (String.t): The unique identifier of timeOffReason
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_delete_time_off_reasons(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_delete_time_off_reasons(connection, team_id, time_off_reason_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/schedule/timeOffReasons/#{time_off_reason_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete timeOffRequest
  Delete a timeOffRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `time_off_request_id` (String.t): The unique identifier of timeOffRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_delete_time_off_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_delete_time_off_requests(connection, team_id, time_off_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/schedule/timeOffRequests/#{time_off_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete timeOff
  Delete a timeOff instance from a schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `time_off_id` (String.t): The unique identifier of timeOff
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_delete_times_off(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_delete_times_off(connection, team_id, time_off_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/schedule/timesOff/#{time_off_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get offerShiftRequest
  Retrieve the properties and relationships of an offerShiftRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `offer_shift_request_id` (String.t): The unique identifier of offerShiftRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_get_offer_shift_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_get_offer_shift_requests(connection, team_id, offer_shift_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/offerShiftRequests/#{offer_shift_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get openShiftChangeRequest
  Retrieve the properties and relationships of an openShiftChangeRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `open_shift_change_request_id` (String.t): The unique identifier of openShiftChangeRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_get_open_shift_change_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_get_open_shift_change_requests(connection, team_id, open_shift_change_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/openShiftChangeRequests/#{open_shift_change_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get openShift
  Retrieve the properties and relationships of an openshift object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `open_shift_id` (String.t): The unique identifier of openShift
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_get_open_shifts(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_get_open_shifts(connection, team_id, open_shift_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/openShifts/#{open_shift_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get schedulingGroup
  Retrieve the properties and relationships of a schedulingGroup by ID. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `scheduling_group_id` (String.t): The unique identifier of schedulingGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_get_scheduling_groups(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t} | {:error, Tesla.Env.t}
  def teams_schedule_get_scheduling_groups(connection, team_id, scheduling_group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/schedulingGroups/#{scheduling_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get shift
  Retrieve the properties and relationships of a shift object by ID. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `shift_id` (String.t): The unique identifier of shift
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_get_shifts(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_get_shifts(connection, team_id, shift_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/shifts/#{shift_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get swapShiftsChangeRequest
  Retrieve the properties and relationships of a swapShiftsChangeRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `swap_shifts_change_request_id` (String.t): The unique identifier of swapShiftsChangeRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_get_swap_shifts_change_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t} | {:error, Tesla.Env.t}
  def teams_schedule_get_swap_shifts_change_requests(connection, team_id, swap_shifts_change_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/swapShiftsChangeRequests/#{swap_shifts_change_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get timeOffReason
  Retrieve the properties and relationships of a timeOffReason object by ID. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `time_off_reason_id` (String.t): The unique identifier of timeOffReason
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_get_time_off_reasons(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_get_time_off_reasons(connection, team_id, time_off_reason_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/timeOffReasons/#{time_off_reason_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffReason},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get timeOffRequest
  Retrieve the properties and relationships of a timeoffrequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `time_off_request_id` (String.t): The unique identifier of timeOffRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_get_time_off_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_get_time_off_requests(connection, team_id, time_off_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/timeOffRequests/#{time_off_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get timeOff
  Retrieve the properties and relationships of a timeOff object by ID. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `time_off_id` (String.t): The unique identifier of timeOff
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_get_times_off(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t} | {:error, Tesla.Env.t}
  def teams_schedule_get_times_off(connection, team_id, time_off_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/timesOff/#{time_off_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOff},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List offerShiftRequest
  Retrieve the properties and relationships of all offerShiftRequest objects in a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_list_offer_shift_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequestCollectionResponse.t} | {:error, Tesla.Env.t}
  def teams_schedule_list_offer_shift_requests(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/offerShiftRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List openShiftChangeRequests
  Retrieve a list of openShiftChangeRequest objects in a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_list_open_shift_change_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequestCollectionResponse.t} | {:error, Tesla.Env.t}
  def teams_schedule_list_open_shift_change_requests(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/openShiftChangeRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List openShifts
  List openShift objects in a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_list_open_shifts(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftCollectionResponse.t} | {:error, Tesla.Env.t}
  def teams_schedule_list_open_shifts(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/openShifts")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShiftCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List scheduleGroups
  Get the list of schedulingGroups in this schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_list_scheduling_groups(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroupCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_list_scheduling_groups(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/schedulingGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedulingGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List shifts
  Get the list of shift instances in a schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphShiftCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_list_shifts(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphShiftCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_list_shifts(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/shifts")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphShiftCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List swapShiftsChangeRequest
  Retrieve a list of swapShiftsChangeRequest objects in the team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_list_swap_shifts_change_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequestCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_list_swap_shifts_change_requests(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/swapShiftsChangeRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List timeOffReasons
  Get the list of timeOffReasons in a schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReasonCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_list_time_off_reasons(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReasonCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_list_time_off_reasons(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/timeOffReasons")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffReasonCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List timeOffRequest
  Retrieve a list of timeOffRequest objects in the team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_list_time_off_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequestCollectionResponse.t} | {:error, Tesla.Env.t}
  def teams_schedule_list_time_off_requests(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/timeOffRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List timesOff
  Get the list of timeOff instances in a schedule. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_list_times_off(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_list_times_off(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/timesOff")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_offer_shift_requests_get_count9c52(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_offer_shift_requests_get_count9c52(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/offerShiftRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_open_shift_change_requests_get_count179b(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_open_shift_change_requests_get_count179b(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/openShiftChangeRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_open_shifts_get_count_bdbd(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_open_shifts_get_count_bdbd(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/openShifts/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_scheduling_groups_get_count256b(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_scheduling_groups_get_count256b(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/schedulingGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_shifts_get_count97aa(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_shifts_get_count97aa(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/shifts/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_swap_shifts_change_requests_get_count9390(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_swap_shifts_change_requests_get_count9390(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/swapShiftsChangeRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_time_off_reasons_get_count4024(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_time_off_reasons_get_count4024(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/timeOffReasons/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_time_off_requests_get_count9411(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_time_off_requests_get_count9411(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/timeOffRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_times_off_get_count16b4(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_times_off_get_count16b4(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/schedule/timesOff/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property offerShiftRequests in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `offer_shift_request_id` (String.t): The unique identifier of offerShiftRequest
  - `microsoft_graph_offer_shift_request` (MicrosoftGraphOfferShiftRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_update_offer_shift_requests(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_update_offer_shift_requests(connection, team_id, offer_shift_request_id, microsoft_graph_offer_shift_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/schedule/offerShiftRequests/#{offer_shift_request_id}")
      |> add_param(:body, :body, microsoft_graph_offer_shift_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOfferShiftRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property openShiftChangeRequests in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `open_shift_change_request_id` (String.t): The unique identifier of openShiftChangeRequest
  - `microsoft_graph_open_shift_change_request` (MicrosoftGraphOpenShiftChangeRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_update_open_shift_change_requests(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_update_open_shift_change_requests(connection, team_id, open_shift_change_request_id, microsoft_graph_open_shift_change_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/schedule/openShiftChangeRequests/#{open_shift_change_request_id}")
      |> add_param(:body, :body, microsoft_graph_open_shift_change_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShiftChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update openShift
  Update the properties of an openShift object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `open_shift_id` (String.t): The unique identifier of openShift
  - `microsoft_graph_open_shift` (MicrosoftGraphOpenShift): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_update_open_shifts(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOpenShift.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_update_open_shifts(connection, team_id, open_shift_id, microsoft_graph_open_shift, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/schedule/openShifts/#{open_shift_id}")
      |> add_param(:body, :body, microsoft_graph_open_shift)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOpenShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Replace schedulingGroup
  Replace an existing schedulingGroup. If the specified schedulingGroup doesn't exist, this method returns 404 Not found.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `scheduling_group_id` (String.t): The unique identifier of schedulingGroup
  - `microsoft_graph_scheduling_group` (MicrosoftGraphSchedulingGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_update_scheduling_groups(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup.t} | {:error, Tesla.Env.t}
  def teams_schedule_update_scheduling_groups(connection, team_id, scheduling_group_id, microsoft_graph_scheduling_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/schedule/schedulingGroups/#{scheduling_group_id}")
      |> add_param(:body, :body, microsoft_graph_scheduling_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedulingGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Replace shift
  Replace an existing shift. If the specified shift doesn't exist, this method returns 404 Not found. The duration of a shift can't be less than 1 minute or longer than 24 hours.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `shift_id` (String.t): The unique identifier of shift
  - `microsoft_graph_shift` (MicrosoftGraphShift): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_update_shifts(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphShift.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphShift.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_update_shifts(connection, team_id, shift_id, microsoft_graph_shift, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/schedule/shifts/#{shift_id}")
      |> add_param(:body, :body, microsoft_graph_shift)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphShift},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property swapShiftsChangeRequests in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `swap_shifts_change_request_id` (String.t): The unique identifier of swapShiftsChangeRequest
  - `microsoft_graph_swap_shifts_change_request` (MicrosoftGraphSwapShiftsChangeRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_update_swap_shifts_change_requests(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest.t} | {:error, Tesla.Env.t}
  def teams_schedule_update_swap_shifts_change_requests(connection, team_id, swap_shifts_change_request_id, microsoft_graph_swap_shifts_change_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/schedule/swapShiftsChangeRequests/#{swap_shifts_change_request_id}")
      |> add_param(:body, :body, microsoft_graph_swap_shifts_change_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSwapShiftsChangeRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Replace timeOffReason
  Replace an existing timeOffReason. If the specified timeOffReason doesn't exist, this method returns 404 Not found.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `time_off_reason_id` (String.t): The unique identifier of timeOffReason
  - `microsoft_graph_time_off_reason` (MicrosoftGraphTimeOffReason): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_update_time_off_reasons(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffReason.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_update_time_off_reasons(connection, team_id, time_off_reason_id, microsoft_graph_time_off_reason, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/schedule/timeOffReasons/#{time_off_reason_id}")
      |> add_param(:body, :body, microsoft_graph_time_off_reason)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffReason},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property timeOffRequests in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `time_off_request_id` (String.t): The unique identifier of timeOffRequest
  - `microsoft_graph_time_off_request` (MicrosoftGraphTimeOffRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_update_time_off_requests(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_schedule_update_time_off_requests(connection, team_id, time_off_request_id, microsoft_graph_time_off_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/schedule/timeOffRequests/#{time_off_request_id}")
      |> add_param(:body, :body, microsoft_graph_time_off_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOffRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Replace timeOff
  Replace an existing timeOff object. If the specified timeOff object doesn't exist, this method returns 404 Not found.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `time_off_id` (String.t): The unique identifier of timeOff
  - `microsoft_graph_time_off` (MicrosoftGraphTimeOff): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_schedule_update_times_off(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTimeOff.t} | {:error, Tesla.Env.t}
  def teams_schedule_update_times_off(connection, team_id, time_off_id, microsoft_graph_time_off, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/schedule/timesOff/#{time_off_id}")
      |> add_param(:body, :body, microsoft_graph_time_off)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTimeOff},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property schedule in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_schedule` (MicrosoftGraphSchedule): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_update_schedule(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_update_schedule(connection, team_id, microsoft_graph_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/teams/#{team_id}/schedule")
      |> add_param(:body, :body, microsoft_graph_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
