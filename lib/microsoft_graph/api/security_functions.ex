# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.SecurityFunctions do
  @moduledoc """
  API calls for all endpoints tagged `SecurityFunctions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke function asHierarchy

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfEdiscoveryReviewTag.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_ediscovery_case_tags_as_hierarchy(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfEdiscoveryReviewTag.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_cases_ediscovery_cases_ediscovery_case_tags_as_hierarchy(
        connection,
        ediscovery_case_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/security/cases/ediscoveryCases/#{ediscovery_case_id}/tags/microsoft.graph.security.asHierarchy()"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfEdiscoveryReviewTag},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getFinalAttachment

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `subject_rights_request_id` (String.t): The unique identifier of subjectRightsRequest
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_subject_rights_requests_subject_rights_request_get_final_attachment(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_subject_rights_requests_subject_rights_request_get_final_attachment(
        connection,
        subject_rights_request_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/security/subjectRightsRequests/#{subject_rights_request_id}/getFinalAttachment()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getFinalReport

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `subject_rights_request_id` (String.t): The unique identifier of subjectRightsRequest
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_subject_rights_requests_subject_rights_request_get_final_report(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def security_subject_rights_requests_subject_rights_request_get_final_report(
        connection,
        subject_rights_request_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/security/subjectRightsRequests/#{subject_rights_request_id}/getFinalReport()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
