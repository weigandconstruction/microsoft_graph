# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.MeContactFolder do
  @moduledoc """
  API calls for all endpoints tagged `MeContactFolder`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create new navigation property to extensions for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_contacts_create_extensions(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphExtension.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_contacts_create_extensions(connection, contact_folder_id, contact_folder_id1, contact_id, microsoft_graph_extension, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}/extensions")
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property extensions for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_contacts_delete_extensions(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_contacts_delete_extensions(connection, contact_folder_id, contact_folder_id1, contact_id, extension_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}/extensions/#{extension_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_contacts_extensions_get_count0ca5(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_contacts_extensions_get_count0ca5(connection, contact_folder_id, contact_folder_id1, contact_id, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}/extensions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_contacts_get_count_bf12(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_contacts_get_count_bf12(connection, contact_folder_id, contact_folder_id1, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get extensions from me
  The collection of open extensions defined for the contact. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_contacts_get_extensions(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_contacts_get_extensions(connection, contact_folder_id, contact_folder_id1, contact_id, extension_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}/extensions/#{extension_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get photo from me
  Optional contact picture. You can get or set a photo for a contact.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_contacts_get_photo(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_contacts_get_photo(connection, contact_folder_id, contact_folder_id1, contact_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}/photo")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphProfilePhoto},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property photo from me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_contacts_get_photo_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_contacts_get_photo_content(connection, contact_folder_id, contact_folder_id1, contact_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}/photo/$value")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get extensions from me
  The collection of open extensions defined for the contact. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_contacts_list_extensions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_contacts_list_extensions(connection, contact_folder_id, contact_folder_id1, contact_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}/extensions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property extensions in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `extension_id` (String.t): The unique identifier of extension
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_contacts_update_extensions(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphExtension.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_contacts_update_extensions(connection, contact_folder_id, contact_folder_id1, contact_id, extension_id, microsoft_graph_extension, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}/extensions/#{extension_id}")
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property photo in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `microsoft_graph_profile_photo` (MicrosoftGraphProfilePhoto): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_contacts_update_photo(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_contacts_update_photo(connection, contact_folder_id, contact_folder_id1, contact_id, microsoft_graph_profile_photo, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}/photo")
      |> add_param(:body, :body, microsoft_graph_profile_photo)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphProfilePhoto},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property photo in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_contacts_update_photo_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_contacts_update_photo_content(connection, contact_folder_id, contact_folder_id1, contact_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}/photo/$value")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create contact
  Add a contact to the root Contacts folder or to the contacts endpoint of another contact folder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `microsoft_graph_contact` (MicrosoftGraphContact): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_create_contacts(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphContact.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_create_contacts(connection, contact_folder_id, contact_folder_id1, microsoft_graph_contact, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts")
      |> add_param(:body, :body, microsoft_graph_contact)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContact},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contacts for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_delete_contacts(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_delete_contacts(connection, contact_folder_id, contact_folder_id1, contact_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contacts from me
  The contacts in the folder. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_get_contacts(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_get_contacts(connection, contact_folder_id, contact_folder_id1, contact_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContact},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_get_count_bbef(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_get_count_bbef(connection, contact_folder_id, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List contacts
  Get a contact collection from the default Contacts folder of the signed-in user (.../me/contacts), or from the specified contact folder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContactCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_list_contacts(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContactCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_list_contacts(connection, contact_folder_id, contact_folder_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContactCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contacts in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `microsoft_graph_contact` (MicrosoftGraphContact): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_child_folders_update_contacts(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphContact.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_child_folders_update_contacts(connection, contact_folder_id, contact_folder_id1, contact_id, microsoft_graph_contact, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}/contacts/#{contact_id}")
      |> add_param(:body, :body, microsoft_graph_contact)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContact},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to extensions for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_contacts_create_extensions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphExtension.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_contacts_create_extensions(connection, contact_folder_id, contact_id, microsoft_graph_extension, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}/extensions")
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property extensions for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_contacts_delete_extensions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_contacts_delete_extensions(connection, contact_folder_id, contact_id, extension_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}/extensions/#{extension_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_contacts_extensions_get_count_d89c(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_contacts_extensions_get_count_d89c(connection, contact_folder_id, contact_id, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}/extensions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_contacts_get_count31d1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_contacts_get_count31d1(connection, contact_folder_id, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get extensions from me
  The collection of open extensions defined for the contact. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `extension_id` (String.t): The unique identifier of extension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_contacts_get_extensions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_contacts_get_extensions(connection, contact_folder_id, contact_id, extension_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}/extensions/#{extension_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get photo from me
  Optional contact picture. You can get or set a photo for a contact.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_contacts_get_photo(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_contacts_get_photo(connection, contact_folder_id, contact_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}/photo")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphProfilePhoto},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property photo from me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_contacts_get_photo_content(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def me_contact_folders_contacts_get_photo_content(connection, contact_folder_id, contact_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}/photo/$value")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get extensions from me
  The collection of open extensions defined for the contact. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_contacts_list_extensions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse.t} | {:error, Tesla.Env.t}
  def me_contact_folders_contacts_list_extensions(connection, contact_folder_id, contact_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}/extensions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtensionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property extensions in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `extension_id` (String.t): The unique identifier of extension
  - `microsoft_graph_extension` (MicrosoftGraphExtension): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_contacts_update_extensions(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphExtension.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_contacts_update_extensions(connection, contact_folder_id, contact_id, extension_id, microsoft_graph_extension, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}/extensions/#{extension_id}")
      |> add_param(:body, :body, microsoft_graph_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property photo in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `microsoft_graph_profile_photo` (MicrosoftGraphProfilePhoto): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_contacts_update_photo(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphProfilePhoto.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_contacts_update_photo(connection, contact_folder_id, contact_id, microsoft_graph_profile_photo, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}/photo")
      |> add_param(:body, :body, microsoft_graph_profile_photo)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphProfilePhoto},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property photo in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_contacts_update_photo_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_contacts_update_photo_content(connection, contact_folder_id, contact_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}/photo/$value")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create ContactFolder
  Create a new contactFolder as a child of a specified folder.  You can also create a new contactFolder under the user's default contact folder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `microsoft_graph_contact_folder` (MicrosoftGraphContactFolder): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_create_child_folders(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_create_child_folders(connection, contact_folder_id, microsoft_graph_contact_folder, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders")
      |> add_param(:body, :body, microsoft_graph_contact_folder)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContactFolder},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create contact
  Add a contact to the root Contacts folder or to the contacts endpoint of another contact folder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `microsoft_graph_contact` (MicrosoftGraphContact): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_create_contacts(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphContact.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_create_contacts(connection, contact_folder_id, microsoft_graph_contact, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts")
      |> add_param(:body, :body, microsoft_graph_contact)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContact},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property childFolders for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_delete_child_folders(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_delete_child_folders(connection, contact_folder_id, contact_folder_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contacts for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_delete_contacts(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_delete_contacts(connection, contact_folder_id, contact_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get childFolders from me
  The collection of child folders in the folder. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_get_child_folders(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_get_child_folders(connection, contact_folder_id, contact_folder_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContactFolder},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contacts from me
  The contacts in the folder. Navigation property. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_get_contacts(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_get_contacts(connection, contact_folder_id, contact_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContact},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_get_count35c1(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_get_count35c1(connection, opts \\ []) do
    optional_params = %{
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List childFolders
  Get a collection of child folders under the specified contact folder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolderCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_list_child_folders(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolderCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_list_child_folders(connection, contact_folder_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContactFolderCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List contacts
  Get a contact collection from the default Contacts folder of the signed-in user (.../me/contacts), or from the specified contact folder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContactCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_list_contacts(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContactCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_list_contacts(connection, contact_folder_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContactCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property childFolders in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_folder_id1` (String.t): The unique identifier of contactFolder
  - `microsoft_graph_contact_folder` (MicrosoftGraphContactFolder): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_update_child_folders(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_update_child_folders(connection, contact_folder_id, contact_folder_id1, microsoft_graph_contact_folder, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/contactFolders/#{contact_folder_id}/childFolders/#{contact_folder_id1}")
      |> add_param(:body, :body, microsoft_graph_contact_folder)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContactFolder},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contacts in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `contact_id` (String.t): The unique identifier of contact
  - `microsoft_graph_contact` (MicrosoftGraphContact): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_contact_folders_update_contacts(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphContact.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContact.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_contact_folders_update_contacts(connection, contact_folder_id, contact_id, microsoft_graph_contact, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/contactFolders/#{contact_folder_id}/contacts/#{contact_id}")
      |> add_param(:body, :body, microsoft_graph_contact)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContact},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create ContactFolder
  Create a new contactFolder under the user's default contacts folder. You can also create a new contactfolder as a child of any specified contact folder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_contact_folder` (MicrosoftGraphContactFolder): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_create_contact_folders(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_create_contact_folders(connection, microsoft_graph_contact_folder, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/contactFolders")
      |> add_param(:body, :body, microsoft_graph_contact_folder)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContactFolder},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete contactFolder
  Delete contactFolder other than the default contactFolder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_delete_contact_folders(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_delete_contact_folders(connection, contact_folder_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/contactFolders/#{contact_folder_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contactFolder
  Get a contact folder by using the contact folder ID. There are two scenarios where an app can get another user's contact folder: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_get_contact_folders(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_get_contact_folders(connection, contact_folder_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders/#{contact_folder_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContactFolder},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List contactFolders
  Get the contact folder collection in the default Contacts folder of the signed-in user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolderCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_list_contact_folders(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolderCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_list_contact_folders(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/contactFolders")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContactFolderCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update contactfolder
  Update the properties of contactfolder object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contact_folder_id` (String.t): The unique identifier of contactFolder
  - `microsoft_graph_contact_folder` (MicrosoftGraphContactFolder): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_update_contact_folders(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContactFolder.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def me_update_contact_folders(connection, contact_folder_id, microsoft_graph_contact_folder, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/contactFolders/#{contact_folder_id}")
      |> add_param(:body, :body, microsoft_graph_contact_folder)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContactFolder},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
