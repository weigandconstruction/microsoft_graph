# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.RoleManagementRbacApplication do
  @moduledoc """
  API calls for all endpoints tagged `RoleManagementRbacApplication`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property directory for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_delete_directory(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_delete_directory(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property entitlementManagement for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_delete_entitlement_management(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_delete_entitlement_management(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resourceNamespaces for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_rbac_resource_namespace` (MicrosoftGraphUnifiedRbacResourceNamespace): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_create_resource_namespaces(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_create_resource_namespaces(connection, microsoft_graph_unified_rbac_resource_namespace, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/directory/resourceNamespaces")
      |> add_param(:body, :body, microsoft_graph_unified_rbac_resource_namespace)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roleAssignmentScheduleInstances for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_assignment_schedule_instance` (MicrosoftGraphUnifiedRoleAssignmentScheduleInstance): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_create_role_assignment_schedule_instances(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_directory_create_role_assignment_schedule_instances(connection, microsoft_graph_unified_role_assignment_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/directory/roleAssignmentScheduleInstances")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create roleAssignmentScheduleRequests
  In PIM, carry out the following operations through the unifiedRoleAssignmentScheduleRequest object: To call this API to update, renew, and extend assignments for yourself, you must have multifactor authentication (MFA) enforced, and running the query in a session in which they were challenged for MFA. See Enable per-user Microsoft Entra multifactor authentication to secure sign-in events. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_assignment_schedule_request` (MicrosoftGraphUnifiedRoleAssignmentScheduleRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_create_role_assignment_schedule_requests(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_create_role_assignment_schedule_requests(connection, microsoft_graph_unified_role_assignment_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roleAssignmentSchedules for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_assignment_schedule` (MicrosoftGraphUnifiedRoleAssignmentSchedule): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_create_role_assignment_schedules(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t} | {:error, Tesla.Env.t}
  def role_management_directory_create_role_assignment_schedules(connection, microsoft_graph_unified_role_assignment_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/directory/roleAssignmentSchedules")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create unifiedRoleAssignment
  Create a new unifiedRoleAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_assignment` (MicrosoftGraphUnifiedRoleAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_create_role_assignments(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t} | {:error, Tesla.Env.t}
  def role_management_directory_create_role_assignments(connection, microsoft_graph_unified_role_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/directory/roleAssignments")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create roleDefinitions
  Create a new custom unifiedRoleDefinition object. This feature requires a Microsoft Entra ID P1 or P2 license. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_definition` (MicrosoftGraphUnifiedRoleDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_create_role_definitions(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_create_role_definitions(connection, microsoft_graph_unified_role_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/directory/roleDefinitions")
      |> add_param(:body, :body, microsoft_graph_unified_role_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roleEligibilityScheduleInstances for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_eligibility_schedule_instance` (MicrosoftGraphUnifiedRoleEligibilityScheduleInstance): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_create_role_eligibility_schedule_instances(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_directory_create_role_eligibility_schedule_instances(connection, microsoft_graph_unified_role_eligibility_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/directory/roleEligibilityScheduleInstances")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create roleEligibilityScheduleRequest
  In PIM, request for a role eligibility for a principal through the unifiedRoleEligibilityScheduleRequest object. This operation allows both admins and eligible users to add, revoke, or extend eligible assignments. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_eligibility_schedule_request` (MicrosoftGraphUnifiedRoleEligibilityScheduleRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_create_role_eligibility_schedule_requests(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t} | {:error, Tesla.Env.t}
  def role_management_directory_create_role_eligibility_schedule_requests(connection, microsoft_graph_unified_role_eligibility_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/directory/roleEligibilityScheduleRequests")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roleEligibilitySchedules for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_eligibility_schedule` (MicrosoftGraphUnifiedRoleEligibilitySchedule): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_create_role_eligibility_schedules(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_create_role_eligibility_schedules(connection, microsoft_graph_unified_role_eligibility_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/directory/roleEligibilitySchedules")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resourceNamespaces for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_delete_resource_namespaces(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_delete_resource_namespaces(connection, unified_rbac_resource_namespace_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/resourceNamespaces/#{unified_rbac_resource_namespace_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleAssignmentScheduleInstances for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_delete_role_assignment_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_delete_role_assignment_schedule_instances(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleAssignmentScheduleRequests for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_delete_role_assignment_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_delete_role_assignment_schedule_requests(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleAssignmentSchedules for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_delete_role_assignment_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_delete_role_assignment_schedules(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete unifiedRoleAssignment
  Delete a unifiedRoleAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_delete_role_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_delete_role_assignments(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/roleAssignments/#{unified_role_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete unifiedRoleDefinition
  Delete a unifiedRoleDefinition object. You can't delete built-in roles. This feature requires a Microsoft Entra ID P1 or P2 license. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_delete_role_definitions(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_delete_role_definitions(connection, unified_role_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/roleDefinitions/#{unified_role_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleEligibilityScheduleInstances for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_delete_role_eligibility_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_delete_role_eligibility_schedule_instances(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleEligibilityScheduleRequests for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_delete_role_eligibility_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_delete_role_eligibility_schedule_requests(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleEligibilitySchedules for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_delete_role_eligibility_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_delete_role_eligibility_schedules(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceNamespaces from roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_get_resource_namespaces(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_get_resource_namespaces(connection, unified_rbac_resource_namespace_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/resourceNamespaces/#{unified_rbac_resource_namespace_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleAssignmentScheduleInstance
  Get the instance of an active role assignment. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_get_role_assignment_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_directory_get_role_assignment_schedule_instances(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleAssignmentScheduleRequest
  In PIM, read the details of a request for an active and persistent role assignment made through the unifiedRoleAssignmentScheduleRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_get_role_assignment_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_get_role_assignment_schedule_requests(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleAssignmentSchedule
  Retrieve the schedule for an active role assignment operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_get_role_assignment_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t} | {:error, Tesla.Env.t}
  def role_management_directory_get_role_assignment_schedules(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleAssignment
  Retrieve the properties and relationships of a unifiedRoleAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_get_role_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t} | {:error, Tesla.Env.t}
  def role_management_directory_get_role_assignments(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignments/#{unified_role_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleDefinition
  Read the properties and relationships of a unifiedRoleDefinition object. The following role-based access control (RBAC) providers are currently supported: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_get_role_definitions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_get_role_definitions(connection, unified_role_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleDefinitions/#{unified_role_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleEligibilityScheduleInstance
  Get the instance of a role eligibility. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_get_role_eligibility_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_directory_get_role_eligibility_schedule_instances(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleEligibilityScheduleRequest
  In PIM, read the details of a request for for a role eligibility request made through the unifiedRoleEligibilityScheduleRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_get_role_eligibility_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t} | {:error, Tesla.Env.t}
  def role_management_directory_get_role_eligibility_schedule_requests(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleEligibilitySchedule
  Retrieve the schedule for a role eligibility operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_get_role_eligibility_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_get_role_eligibility_schedules(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceNamespaces from roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespaceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_list_resource_namespaces(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespaceCollectionResponse.t} | {:error, Tesla.Env.t}
  def role_management_directory_list_resource_namespaces(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/resourceNamespaces")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespaceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleAssignmentScheduleInstances
  Get the instances of active role assignments in your tenant. The active assignments include those made through assignments and activation requests, and directly through the role assignments API. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstanceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_list_role_assignment_schedule_instances(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstanceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_list_role_assignment_schedule_instances(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleInstances")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstanceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleAssignmentScheduleRequests
  Retrieve the requests for active role assignments to principals. The active assignments include those made through assignments and activation requests, and directly through the role assignments API. The role assignments can be permanently active with or without an expiry date, or temporarily active after user activation of eligible assignments. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_list_role_assignment_schedule_requests(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequestCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_list_role_assignment_schedule_requests(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleAssignmentSchedules
  Get the schedules for active role assignment operations. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_list_role_assignment_schedules(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_list_role_assignment_schedules(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentSchedules")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List unifiedRoleAssignments
  Get a list of unifiedRoleAssignment objects for the RBAC provider. The following RBAC providers are currently supported: - directory (Microsoft Entra ID) - entitlement management (Microsoft Entra Entitlement Management) This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_list_role_assignments(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_list_role_assignments(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleDefinitions
  Get a list of unifiedRoleDefinition objects for the provider. The following RBAC providers are currently supported: - directory (Microsoft Entra ID) - entitlement management (Microsoft Entra Entitlement Management) This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_list_role_definitions(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_list_role_definitions(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleDefinitions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleEligibilityScheduleInstances
  Get the instances of role eligibilities. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstanceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_list_role_eligibility_schedule_instances(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstanceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_list_role_eligibility_schedule_instances(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleInstances")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstanceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleEligibilityScheduleRequests
  In PIM, retrieve the requests for role eligibilities for principals made through the unifiedRoleEligibilityScheduleRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_list_role_eligibility_schedule_requests(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequestCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_list_role_eligibility_schedule_requests(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleEligibilitySchedules
  Get the unifiedRoleEligibilitySchedule resources from the roleEligibilitySchedules navigation property. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_list_role_eligibility_schedules(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_list_role_eligibility_schedules(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilitySchedules")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resourceActions for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `microsoft_graph_unified_rbac_resource_action` (MicrosoftGraphUnifiedRbacResourceAction): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_resource_namespaces_create_resource_actions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t} | {:error, Tesla.Env.t}
  def role_management_directory_resource_namespaces_create_resource_actions(connection, unified_rbac_resource_namespace_id, microsoft_graph_unified_rbac_resource_action, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/directory/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions")
      |> add_param(:body, :body, microsoft_graph_unified_rbac_resource_action)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resourceActions for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `unified_rbac_resource_action_id` (String.t): The unique identifier of unifiedRbacResourceAction
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_resource_namespaces_delete_resource_actions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_resource_namespaces_delete_resource_actions(connection, unified_rbac_resource_namespace_id, unified_rbac_resource_action_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions/#{unified_rbac_resource_action_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_resource_namespaces_get_count2247(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_resource_namespaces_get_count2247(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/resourceNamespaces/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceActions from roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `unified_rbac_resource_action_id` (String.t): The unique identifier of unifiedRbacResourceAction
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_resource_namespaces_get_resource_actions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t} | {:error, Tesla.Env.t}
  def role_management_directory_resource_namespaces_get_resource_actions(connection, unified_rbac_resource_namespace_id, unified_rbac_resource_action_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions/#{unified_rbac_resource_action_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceActions from roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceActionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_resource_namespaces_list_resource_actions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceActionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_resource_namespaces_list_resource_actions(connection, unified_rbac_resource_namespace_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceActionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_resource_namespaces_resource_actions_get_count1b0d(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_resource_namespaces_resource_actions_get_count1b0d(connection, unified_rbac_resource_namespace_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceActions in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `unified_rbac_resource_action_id` (String.t): The unique identifier of unifiedRbacResourceAction
  - `microsoft_graph_unified_rbac_resource_action` (MicrosoftGraphUnifiedRbacResourceAction): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_resource_namespaces_update_resource_actions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t} | {:error, Tesla.Env.t}
  def role_management_directory_resource_namespaces_update_resource_actions(connection, unified_rbac_resource_namespace_id, unified_rbac_resource_action_id, microsoft_graph_unified_rbac_resource_action, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions/#{unified_rbac_resource_action_id}")
      |> add_param(:body, :body, microsoft_graph_unified_rbac_resource_action)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activatedUsing from roleManagement
  If the request is from an eligible administrator to activate a role, this parameter will show the related eligible assignment for that activation. Otherwise, it is null. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_instances_get_activated_using(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_instances_get_activated_using(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}/activatedUsing")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the assignment or role eligibility is scoped to an app. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_instances_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_instances_get_app_scope(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_instances_get_count_e055(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_instances_get_count_e055(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleInstances/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the assignment or role eligibility. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_instances_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_instances_get_directory_scope(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role assignment or role eligibility through the request.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_instances_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_instances_get_principal(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_instances_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_instances_get_role_definition(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activatedUsing from roleManagement
  If the request is from an eligible administrator to activate a role, this parameter will show the related eligible assignment for that activation. Otherwise, it's null. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_requests_get_activated_using(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_requests_get_activated_using(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/activatedUsing")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the assignment is scoped to an app. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_requests_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_requests_get_app_scope(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_requests_get_count6fe6(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_requests_get_count6fe6(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the assignment. Read-only. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_requests_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_requests_get_directory_scope(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role assignment through the request. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_requests_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_requests_get_principal(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the unifiedRoleDefinition object that is referenced through the roleDefinitionId property. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_requests_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_requests_get_role_definition(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get targetSchedule from roleManagement
  The schedule for an eligible role assignment that is referenced through the targetScheduleId property. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_requests_get_target_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedule_requests_get_target_schedule(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/targetSchedule")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activatedUsing from roleManagement
  If the request is from an eligible administrator to activate a role, this parameter will show the related eligible assignment for that activation. Otherwise, it is null. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedules_get_activated_using(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedules_get_activated_using(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}/activatedUsing")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the role eligibility or assignment is scoped to an app. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedules_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedules_get_app_scope(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedules_get_count6f04(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedules_get_count6f04(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentSchedules/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the role eligibility or assignment. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedules_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedules_get_directory_scope(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role assignment or that's eligible for a role through the request.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedules_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedules_get_principal(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedules_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignment_schedules_get_role_definition(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property appScope for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignments_delete_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignments_delete_app_scope(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/roleAssignments/#{unified_role_assignment_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app specific scope when the assignment scope is app specific. Containment entity. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignments_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignments_get_app_scope(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignments/#{unified_role_assignment_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignments_get_count_bd5b(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignments_get_count_bd5b(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the assignment. Read-only. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignments_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignments_get_directory_scope(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignments/#{unified_role_assignment_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  Referencing the assigned principal. Read-only. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignments_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignments_get_principal(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignments/#{unified_role_assignment_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  The roleDefinition the assignment is for.  Supports $expand. roleDefinition.Id will be auto expanded.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignments_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignments_get_role_definition(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleAssignments/#{unified_role_assignment_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property appScope in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `microsoft_graph_app_scope` (MicrosoftGraphAppScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignments_update_app_scope(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAppScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_assignments_update_app_scope(connection, unified_role_assignment_id, microsoft_graph_app_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/roleAssignments/#{unified_role_assignment_id}/appScope")
      |> add_param(:body, :body, microsoft_graph_app_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to inheritsPermissionsFrom for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `microsoft_graph_unified_role_definition` (MicrosoftGraphUnifiedRoleDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_definitions_create_inherits_permissions_from(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_definitions_create_inherits_permissions_from(connection, unified_role_definition_id, microsoft_graph_unified_role_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/directory/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom")
      |> add_param(:body, :body, microsoft_graph_unified_role_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property inheritsPermissionsFrom for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `unified_role_definition_id1` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_definitions_delete_inherits_permissions_from(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_definitions_delete_inherits_permissions_from(connection, unified_role_definition_id, unified_role_definition_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/directory/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom/#{unified_role_definition_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_definitions_get_count0578(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_definitions_get_count0578(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleDefinitions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get inheritsPermissionsFrom from roleManagement
  Read-only collection of role definitions that the given role definition inherits from. Only Microsoft Entra built-in roles (isBuiltIn is true) support this attribute. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `unified_role_definition_id1` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_definitions_get_inherits_permissions_from(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_definitions_get_inherits_permissions_from(connection, unified_role_definition_id, unified_role_definition_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom/#{unified_role_definition_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_definitions_inherits_permissions_from_get_count_f7ad(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_definitions_inherits_permissions_from_get_count_f7ad(connection, unified_role_definition_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get inheritsPermissionsFrom from roleManagement
  Read-only collection of role definitions that the given role definition inherits from. Only Microsoft Entra built-in roles (isBuiltIn is true) support this attribute. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_definitions_list_inherits_permissions_from(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_definitions_list_inherits_permissions_from(connection, unified_role_definition_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property inheritsPermissionsFrom in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `unified_role_definition_id1` (String.t): The unique identifier of unifiedRoleDefinition
  - `microsoft_graph_unified_role_definition` (MicrosoftGraphUnifiedRoleDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_definitions_update_inherits_permissions_from(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_definitions_update_inherits_permissions_from(connection, unified_role_definition_id, unified_role_definition_id1, microsoft_graph_unified_role_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom/#{unified_role_definition_id1}")
      |> add_param(:body, :body, microsoft_graph_unified_role_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the assignment or role eligibility is scoped to an app. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_instances_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedule_instances_get_app_scope(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_instances_get_count7642(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedule_instances_get_count7642(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleInstances/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the assignment or role eligibility. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_instances_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedule_instances_get_directory_scope(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role assignment or role eligibility through the request.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_instances_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedule_instances_get_principal(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_instances_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedule_instances_get_role_definition(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the role eligibility is scoped to an app. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_requests_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedule_requests_get_app_scope(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_requests_get_count68f0(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedule_requests_get_count68f0(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the role eligibility. Read-only. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_requests_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedule_requests_get_directory_scope(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role eligibility through the request. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_requests_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedule_requests_get_principal(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the unifiedRoleDefinition object that is referenced through the roleDefinitionId property. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_requests_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedule_requests_get_role_definition(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get targetSchedule from roleManagement
  The schedule for a role eligibility that is referenced through the targetScheduleId property. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_requests_get_target_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedule_requests_get_target_schedule(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}/targetSchedule")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the role eligibility or assignment is scoped to an app. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedules_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedules_get_app_scope(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedules_get_count_b25d(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedules_get_count_b25d(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilitySchedules/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the role eligibility or assignment. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedules_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedules_get_directory_scope(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role assignment or that's eligible for a role through the request.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedules_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedules_get_principal(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedules_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_role_eligibility_schedules_get_role_definition(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceNamespaces in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `microsoft_graph_unified_rbac_resource_namespace` (MicrosoftGraphUnifiedRbacResourceNamespace): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_update_resource_namespaces(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_update_resource_namespaces(connection, unified_rbac_resource_namespace_id, microsoft_graph_unified_rbac_resource_namespace, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/resourceNamespaces/#{unified_rbac_resource_namespace_id}")
      |> add_param(:body, :body, microsoft_graph_unified_rbac_resource_namespace)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleAssignmentScheduleInstances in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `microsoft_graph_unified_role_assignment_schedule_instance` (MicrosoftGraphUnifiedRoleAssignmentScheduleInstance): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_update_role_assignment_schedule_instances(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_directory_update_role_assignment_schedule_instances(connection, unified_role_assignment_schedule_instance_id, microsoft_graph_unified_role_assignment_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleAssignmentScheduleRequests in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `microsoft_graph_unified_role_assignment_schedule_request` (MicrosoftGraphUnifiedRoleAssignmentScheduleRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_update_role_assignment_schedule_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_update_role_assignment_schedule_requests(connection, unified_role_assignment_schedule_request_id, microsoft_graph_unified_role_assignment_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleAssignmentSchedules in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `microsoft_graph_unified_role_assignment_schedule` (MicrosoftGraphUnifiedRoleAssignmentSchedule): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_update_role_assignment_schedules(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t} | {:error, Tesla.Env.t}
  def role_management_directory_update_role_assignment_schedules(connection, unified_role_assignment_schedule_id, microsoft_graph_unified_role_assignment_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleAssignments in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `microsoft_graph_unified_role_assignment` (MicrosoftGraphUnifiedRoleAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_update_role_assignments(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t} | {:error, Tesla.Env.t}
  def role_management_directory_update_role_assignments(connection, unified_role_assignment_id, microsoft_graph_unified_role_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/roleAssignments/#{unified_role_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update unifiedRoleDefinition
  Update the properties of a unifiedRoleDefinition object. You cannot update built-in roles. This feature requires a Microsoft Entra ID P1 or P2 license. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `microsoft_graph_unified_role_definition` (MicrosoftGraphUnifiedRoleDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_update_role_definitions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_directory_update_role_definitions(connection, unified_role_definition_id, microsoft_graph_unified_role_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/roleDefinitions/#{unified_role_definition_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleEligibilityScheduleInstances in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `microsoft_graph_unified_role_eligibility_schedule_instance` (MicrosoftGraphUnifiedRoleEligibilityScheduleInstance): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_update_role_eligibility_schedule_instances(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_directory_update_role_eligibility_schedule_instances(connection, unified_role_eligibility_schedule_instance_id, microsoft_graph_unified_role_eligibility_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleEligibilityScheduleRequests in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `microsoft_graph_unified_role_eligibility_schedule_request` (MicrosoftGraphUnifiedRoleEligibilityScheduleRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_update_role_eligibility_schedule_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t} | {:error, Tesla.Env.t}
  def role_management_directory_update_role_eligibility_schedule_requests(connection, unified_role_eligibility_schedule_request_id, microsoft_graph_unified_role_eligibility_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleEligibilitySchedules in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `microsoft_graph_unified_role_eligibility_schedule` (MicrosoftGraphUnifiedRoleEligibilitySchedule): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_update_role_eligibility_schedules(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_directory_update_role_eligibility_schedules(connection, unified_role_eligibility_schedule_id, microsoft_graph_unified_role_eligibility_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resourceNamespaces for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_rbac_resource_namespace` (MicrosoftGraphUnifiedRbacResourceNamespace): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_create_resource_namespaces(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_create_resource_namespaces(connection, microsoft_graph_unified_rbac_resource_namespace, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces")
      |> add_param(:body, :body, microsoft_graph_unified_rbac_resource_namespace)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roleAssignmentScheduleInstances for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_assignment_schedule_instance` (MicrosoftGraphUnifiedRoleAssignmentScheduleInstance): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_create_role_assignment_schedule_instances(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_create_role_assignment_schedule_instances(connection, microsoft_graph_unified_role_assignment_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleInstances")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create roleAssignmentScheduleRequests
  In PIM, carry out the following operations through the unifiedRoleAssignmentScheduleRequest object: To call this API to update, renew, and extend assignments for yourself, you must have multifactor authentication (MFA) enforced, and running the query in a session in which they were challenged for MFA. See Enable per-user Microsoft Entra multifactor authentication to secure sign-in events. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_assignment_schedule_request` (MicrosoftGraphUnifiedRoleAssignmentScheduleRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_create_role_assignment_schedule_requests(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_create_role_assignment_schedule_requests(connection, microsoft_graph_unified_role_assignment_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roleAssignmentSchedules for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_assignment_schedule` (MicrosoftGraphUnifiedRoleAssignmentSchedule): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_create_role_assignment_schedules(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_create_role_assignment_schedules(connection, microsoft_graph_unified_role_assignment_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/entitlementManagement/roleAssignmentSchedules")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create unifiedRoleAssignment
  Create a new unifiedRoleAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_assignment` (MicrosoftGraphUnifiedRoleAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_create_role_assignments(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_create_role_assignments(connection, microsoft_graph_unified_role_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/entitlementManagement/roleAssignments")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create roleDefinitions
  Create a new custom unifiedRoleDefinition object. This feature requires a Microsoft Entra ID P1 or P2 license. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_definition` (MicrosoftGraphUnifiedRoleDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_create_role_definitions(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_create_role_definitions(connection, microsoft_graph_unified_role_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/entitlementManagement/roleDefinitions")
      |> add_param(:body, :body, microsoft_graph_unified_role_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roleEligibilityScheduleInstances for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_eligibility_schedule_instance` (MicrosoftGraphUnifiedRoleEligibilityScheduleInstance): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_create_role_eligibility_schedule_instances(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_create_role_eligibility_schedule_instances(connection, microsoft_graph_unified_role_eligibility_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleInstances")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create roleEligibilityScheduleRequest
  In PIM, request for a role eligibility for a principal through the unifiedRoleEligibilityScheduleRequest object. This operation allows both admins and eligible users to add, revoke, or extend eligible assignments. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_eligibility_schedule_request` (MicrosoftGraphUnifiedRoleEligibilityScheduleRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_create_role_eligibility_schedule_requests(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_create_role_eligibility_schedule_requests(connection, microsoft_graph_unified_role_eligibility_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleRequests")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roleEligibilitySchedules for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_unified_role_eligibility_schedule` (MicrosoftGraphUnifiedRoleEligibilitySchedule): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_create_role_eligibility_schedules(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_create_role_eligibility_schedules(connection, microsoft_graph_unified_role_eligibility_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/entitlementManagement/roleEligibilitySchedules")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resourceNamespaces for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_delete_resource_namespaces(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_delete_resource_namespaces(connection, unified_rbac_resource_namespace_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces/#{unified_rbac_resource_namespace_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleAssignmentScheduleInstances for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_delete_role_assignment_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_delete_role_assignment_schedule_instances(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleAssignmentScheduleRequests for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_delete_role_assignment_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_delete_role_assignment_schedule_requests(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleAssignmentSchedules for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_delete_role_assignment_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_delete_role_assignment_schedules(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete unifiedRoleAssignment
  Delete a unifiedRoleAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_delete_role_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_delete_role_assignments(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/roleAssignments/#{unified_role_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete unifiedRoleDefinition
  Delete a unifiedRoleDefinition object. You can't delete built-in roles. This feature requires a Microsoft Entra ID P1 or P2 license. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_delete_role_definitions(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_delete_role_definitions(connection, unified_role_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/roleDefinitions/#{unified_role_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleEligibilityScheduleInstances for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_delete_role_eligibility_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_delete_role_eligibility_schedule_instances(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleEligibilityScheduleRequests for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_delete_role_eligibility_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_delete_role_eligibility_schedule_requests(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roleEligibilitySchedules for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_delete_role_eligibility_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_delete_role_eligibility_schedules(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceNamespaces from roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_get_resource_namespaces(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_get_resource_namespaces(connection, unified_rbac_resource_namespace_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces/#{unified_rbac_resource_namespace_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleAssignmentScheduleInstance
  Get the instance of an active role assignment. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_get_role_assignment_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_get_role_assignment_schedule_instances(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleAssignmentScheduleRequest
  In PIM, read the details of a request for an active and persistent role assignment made through the unifiedRoleAssignmentScheduleRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_get_role_assignment_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_get_role_assignment_schedule_requests(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleAssignmentSchedule
  Retrieve the schedule for an active role assignment operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_get_role_assignment_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_get_role_assignment_schedules(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleAssignment
  Retrieve the properties and relationships of a unifiedRoleAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_get_role_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_get_role_assignments(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignments/#{unified_role_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleDefinition
  Read the properties and relationships of a unifiedRoleDefinition object. The following role-based access control (RBAC) providers are currently supported: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_get_role_definitions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_get_role_definitions(connection, unified_role_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleDefinitions/#{unified_role_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleEligibilityScheduleInstance
  Get the instance of a role eligibility. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_get_role_eligibility_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_get_role_eligibility_schedule_instances(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleEligibilityScheduleRequest
  In PIM, read the details of a request for for a role eligibility request made through the unifiedRoleEligibilityScheduleRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_get_role_eligibility_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_get_role_eligibility_schedule_requests(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedRoleEligibilitySchedule
  Retrieve the schedule for a role eligibility operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_get_role_eligibility_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_get_role_eligibility_schedules(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceNamespaces from roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespaceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_list_resource_namespaces(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespaceCollectionResponse.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_list_resource_namespaces(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespaceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleAssignmentScheduleInstances
  Get the instances of active role assignments in your tenant. The active assignments include those made through assignments and activation requests, and directly through the role assignments API. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstanceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_list_role_assignment_schedule_instances(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstanceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_list_role_assignment_schedule_instances(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleInstances")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstanceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleAssignmentScheduleRequests
  Retrieve the requests for active role assignments to principals. The active assignments include those made through assignments and activation requests, and directly through the role assignments API. The role assignments can be permanently active with or without an expiry date, or temporarily active after user activation of eligible assignments. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_list_role_assignment_schedule_requests(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequestCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_list_role_assignment_schedule_requests(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleAssignmentSchedules
  Get the schedules for active role assignment operations. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_list_role_assignment_schedules(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_list_role_assignment_schedules(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentSchedules")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List unifiedRoleAssignments
  Get a list of unifiedRoleAssignment objects for the RBAC provider. The following RBAC providers are currently supported: - directory (Microsoft Entra ID) - entitlement management (Microsoft Entra Entitlement Management) This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_list_role_assignments(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_list_role_assignments(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleDefinitions
  Get a list of unifiedRoleDefinition objects for the provider. The following RBAC providers are currently supported: - directory (Microsoft Entra ID) - entitlement management (Microsoft Entra Entitlement Management) This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_list_role_definitions(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_list_role_definitions(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleDefinitions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleEligibilityScheduleInstances
  Get the instances of role eligibilities. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstanceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_list_role_eligibility_schedule_instances(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstanceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_list_role_eligibility_schedule_instances(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleInstances")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstanceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleEligibilityScheduleRequests
  In PIM, retrieve the requests for role eligibilities for principals made through the unifiedRoleEligibilityScheduleRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_list_role_eligibility_schedule_requests(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequestCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_list_role_eligibility_schedule_requests(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List roleEligibilitySchedules
  Get the unifiedRoleEligibilitySchedule resources from the roleEligibilitySchedules navigation property. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_list_role_eligibility_schedules(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_list_role_eligibility_schedules(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilitySchedules")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resourceActions for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `microsoft_graph_unified_rbac_resource_action` (MicrosoftGraphUnifiedRbacResourceAction): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_resource_namespaces_create_resource_actions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_resource_namespaces_create_resource_actions(connection, unified_rbac_resource_namespace_id, microsoft_graph_unified_rbac_resource_action, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions")
      |> add_param(:body, :body, microsoft_graph_unified_rbac_resource_action)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resourceActions for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `unified_rbac_resource_action_id` (String.t): The unique identifier of unifiedRbacResourceAction
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_resource_namespaces_delete_resource_actions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_resource_namespaces_delete_resource_actions(connection, unified_rbac_resource_namespace_id, unified_rbac_resource_action_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions/#{unified_rbac_resource_action_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_resource_namespaces_get_count1f5d(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_resource_namespaces_get_count1f5d(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceActions from roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `unified_rbac_resource_action_id` (String.t): The unique identifier of unifiedRbacResourceAction
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_resource_namespaces_get_resource_actions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_resource_namespaces_get_resource_actions(connection, unified_rbac_resource_namespace_id, unified_rbac_resource_action_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions/#{unified_rbac_resource_action_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceActions from roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceActionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_resource_namespaces_list_resource_actions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceActionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_resource_namespaces_list_resource_actions(connection, unified_rbac_resource_namespace_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceActionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_resource_namespaces_resource_actions_get_count_e4ec(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_resource_namespaces_resource_actions_get_count_e4ec(connection, unified_rbac_resource_namespace_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceActions in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `unified_rbac_resource_action_id` (String.t): The unique identifier of unifiedRbacResourceAction
  - `microsoft_graph_unified_rbac_resource_action` (MicrosoftGraphUnifiedRbacResourceAction): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_resource_namespaces_update_resource_actions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_resource_namespaces_update_resource_actions(connection, unified_rbac_resource_namespace_id, unified_rbac_resource_action_id, microsoft_graph_unified_rbac_resource_action, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces/#{unified_rbac_resource_namespace_id}/resourceActions/#{unified_rbac_resource_action_id}")
      |> add_param(:body, :body, microsoft_graph_unified_rbac_resource_action)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceAction},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activatedUsing from roleManagement
  If the request is from an eligible administrator to activate a role, this parameter will show the related eligible assignment for that activation. Otherwise, it is null. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_instances_get_activated_using(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_instances_get_activated_using(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}/activatedUsing")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the assignment or role eligibility is scoped to an app. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_instances_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_instances_get_app_scope(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_instances_get_count2c0d(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_instances_get_count2c0d(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleInstances/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the assignment or role eligibility. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_instances_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_instances_get_directory_scope(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role assignment or role eligibility through the request.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_instances_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_instances_get_principal(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_instances_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_instances_get_role_definition(connection, unified_role_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activatedUsing from roleManagement
  If the request is from an eligible administrator to activate a role, this parameter will show the related eligible assignment for that activation. Otherwise, it's null. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_requests_get_activated_using(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_requests_get_activated_using(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/activatedUsing")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the assignment is scoped to an app. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_requests_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_requests_get_app_scope(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_requests_get_count9503(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_requests_get_count9503(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the assignment. Read-only. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_requests_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_requests_get_directory_scope(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role assignment through the request. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_requests_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_requests_get_principal(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the unifiedRoleDefinition object that is referenced through the roleDefinitionId property. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_requests_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_requests_get_role_definition(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get targetSchedule from roleManagement
  The schedule for an eligible role assignment that is referenced through the targetScheduleId property. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_requests_get_target_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedule_requests_get_target_schedule(connection, unified_role_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}/targetSchedule")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activatedUsing from roleManagement
  If the request is from an eligible administrator to activate a role, this parameter will show the related eligible assignment for that activation. Otherwise, it is null. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedules_get_activated_using(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedules_get_activated_using(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}/activatedUsing")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the role eligibility or assignment is scoped to an app. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedules_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedules_get_app_scope(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedules_get_count61d0(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedules_get_count61d0(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentSchedules/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the role eligibility or assignment. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedules_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedules_get_directory_scope(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role assignment or that's eligible for a role through the request.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedules_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedules_get_principal(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedules_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignment_schedules_get_role_definition(connection, unified_role_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property appScope for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignments_delete_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignments_delete_app_scope(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/roleAssignments/#{unified_role_assignment_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app specific scope when the assignment scope is app specific. Containment entity. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignments_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignments_get_app_scope(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignments/#{unified_role_assignment_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignments_get_count_ca1d(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignments_get_count_ca1d(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the assignment. Read-only. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignments_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignments_get_directory_scope(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignments/#{unified_role_assignment_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  Referencing the assigned principal. Read-only. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignments_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignments_get_principal(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignments/#{unified_role_assignment_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  The roleDefinition the assignment is for.  Supports $expand. roleDefinition.Id will be auto expanded.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignments_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignments_get_role_definition(connection, unified_role_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleAssignments/#{unified_role_assignment_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property appScope in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `microsoft_graph_app_scope` (MicrosoftGraphAppScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignments_update_app_scope(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAppScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_assignments_update_app_scope(connection, unified_role_assignment_id, microsoft_graph_app_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/roleAssignments/#{unified_role_assignment_id}/appScope")
      |> add_param(:body, :body, microsoft_graph_app_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to inheritsPermissionsFrom for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `microsoft_graph_unified_role_definition` (MicrosoftGraphUnifiedRoleDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_definitions_create_inherits_permissions_from(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_definitions_create_inherits_permissions_from(connection, unified_role_definition_id, microsoft_graph_unified_role_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/roleManagement/entitlementManagement/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom")
      |> add_param(:body, :body, microsoft_graph_unified_role_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property inheritsPermissionsFrom for roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `unified_role_definition_id1` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_definitions_delete_inherits_permissions_from(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_definitions_delete_inherits_permissions_from(connection, unified_role_definition_id, unified_role_definition_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/roleManagement/entitlementManagement/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom/#{unified_role_definition_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_definitions_get_count_d1b3(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_definitions_get_count_d1b3(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleDefinitions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get inheritsPermissionsFrom from roleManagement
  Read-only collection of role definitions that the given role definition inherits from. Only Microsoft Entra built-in roles (isBuiltIn is true) support this attribute. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `unified_role_definition_id1` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_definitions_get_inherits_permissions_from(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_definitions_get_inherits_permissions_from(connection, unified_role_definition_id, unified_role_definition_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom/#{unified_role_definition_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_definitions_inherits_permissions_from_get_count_eda5(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_definitions_inherits_permissions_from_get_count_eda5(connection, unified_role_definition_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get inheritsPermissionsFrom from roleManagement
  Read-only collection of role definitions that the given role definition inherits from. Only Microsoft Entra built-in roles (isBuiltIn is true) support this attribute. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_definitions_list_inherits_permissions_from(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_definitions_list_inherits_permissions_from(connection, unified_role_definition_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property inheritsPermissionsFrom in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `unified_role_definition_id1` (String.t): The unique identifier of unifiedRoleDefinition
  - `microsoft_graph_unified_role_definition` (MicrosoftGraphUnifiedRoleDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_definitions_update_inherits_permissions_from(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_definitions_update_inherits_permissions_from(connection, unified_role_definition_id, unified_role_definition_id1, microsoft_graph_unified_role_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/roleDefinitions/#{unified_role_definition_id}/inheritsPermissionsFrom/#{unified_role_definition_id1}")
      |> add_param(:body, :body, microsoft_graph_unified_role_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the assignment or role eligibility is scoped to an app. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_instances_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedule_instances_get_app_scope(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_instances_get_count4687(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedule_instances_get_count4687(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleInstances/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the assignment or role eligibility. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_instances_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedule_instances_get_directory_scope(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role assignment or role eligibility through the request.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_instances_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedule_instances_get_principal(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_instances_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedule_instances_get_role_definition(connection, unified_role_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the role eligibility is scoped to an app. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_requests_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedule_requests_get_app_scope(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_requests_get_count0523(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedule_requests_get_count0523(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the role eligibility. Read-only. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_requests_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedule_requests_get_directory_scope(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role eligibility through the request. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_requests_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedule_requests_get_principal(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the unifiedRoleDefinition object that is referenced through the roleDefinitionId property. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_requests_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedule_requests_get_role_definition(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get targetSchedule from roleManagement
  The schedule for a role eligibility that is referenced through the targetScheduleId property. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_requests_get_target_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedule_requests_get_target_schedule(connection, unified_role_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}/targetSchedule")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appScope from roleManagement
  Read-only property with details of the app-specific scope when the role eligibility or assignment is scoped to an app. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedules_get_app_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedules_get_app_scope(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}/appScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedules_get_count_cd69(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedules_get_count_cd69(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilitySchedules/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directoryScope from roleManagement
  The directory object that is the scope of the role eligibility or assignment. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedules_get_directory_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedules_get_directory_scope(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}/directoryScope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from roleManagement
  The principal that's getting a role assignment or that's eligible for a role through the request.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedules_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedules_get_principal(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roleDefinition from roleManagement
  Detailed information for the roleDefinition object that is referenced through the roleDefinitionId property.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedules_get_role_definition(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_role_eligibility_schedules_get_role_definition(connection, unified_role_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}/roleDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceNamespaces in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_rbac_resource_namespace_id` (String.t): The unique identifier of unifiedRbacResourceNamespace
  - `microsoft_graph_unified_rbac_resource_namespace` (MicrosoftGraphUnifiedRbacResourceNamespace): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_update_resource_namespaces(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_update_resource_namespaces(connection, unified_rbac_resource_namespace_id, microsoft_graph_unified_rbac_resource_namespace, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/resourceNamespaces/#{unified_rbac_resource_namespace_id}")
      |> add_param(:body, :body, microsoft_graph_unified_rbac_resource_namespace)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRbacResourceNamespace},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleAssignmentScheduleInstances in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_instance_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleInstance
  - `microsoft_graph_unified_role_assignment_schedule_instance` (MicrosoftGraphUnifiedRoleAssignmentScheduleInstance): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_update_role_assignment_schedule_instances(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_update_role_assignment_schedule_instances(connection, unified_role_assignment_schedule_instance_id, microsoft_graph_unified_role_assignment_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleInstances/#{unified_role_assignment_schedule_instance_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleAssignmentScheduleRequests in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_request_id` (String.t): The unique identifier of unifiedRoleAssignmentScheduleRequest
  - `microsoft_graph_unified_role_assignment_schedule_request` (MicrosoftGraphUnifiedRoleAssignmentScheduleRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_update_role_assignment_schedule_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_update_role_assignment_schedule_requests(connection, unified_role_assignment_schedule_request_id, microsoft_graph_unified_role_assignment_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/roleAssignmentScheduleRequests/#{unified_role_assignment_schedule_request_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleAssignmentSchedules in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_schedule_id` (String.t): The unique identifier of unifiedRoleAssignmentSchedule
  - `microsoft_graph_unified_role_assignment_schedule` (MicrosoftGraphUnifiedRoleAssignmentSchedule): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_update_role_assignment_schedules(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_update_role_assignment_schedules(connection, unified_role_assignment_schedule_id, microsoft_graph_unified_role_assignment_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/roleAssignmentSchedules/#{unified_role_assignment_schedule_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleAssignments in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_assignment_id` (String.t): The unique identifier of unifiedRoleAssignment
  - `microsoft_graph_unified_role_assignment` (MicrosoftGraphUnifiedRoleAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_update_role_assignments(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_update_role_assignments(connection, unified_role_assignment_id, microsoft_graph_unified_role_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/roleAssignments/#{unified_role_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update unifiedRoleDefinition
  Update the properties of a unifiedRoleDefinition object. You cannot update built-in roles. This feature requires a Microsoft Entra ID P1 or P2 license. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_definition_id` (String.t): The unique identifier of unifiedRoleDefinition
  - `microsoft_graph_unified_role_definition` (MicrosoftGraphUnifiedRoleDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_update_role_definitions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_update_role_definitions(connection, unified_role_definition_id, microsoft_graph_unified_role_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/roleDefinitions/#{unified_role_definition_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleEligibilityScheduleInstances in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_instance_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleInstance
  - `microsoft_graph_unified_role_eligibility_schedule_instance` (MicrosoftGraphUnifiedRoleEligibilityScheduleInstance): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_update_role_eligibility_schedule_instances(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_update_role_eligibility_schedule_instances(connection, unified_role_eligibility_schedule_instance_id, microsoft_graph_unified_role_eligibility_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleInstances/#{unified_role_eligibility_schedule_instance_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleEligibilityScheduleRequests in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_request_id` (String.t): The unique identifier of unifiedRoleEligibilityScheduleRequest
  - `microsoft_graph_unified_role_eligibility_schedule_request` (MicrosoftGraphUnifiedRoleEligibilityScheduleRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_update_role_eligibility_schedule_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_update_role_eligibility_schedule_requests(connection, unified_role_eligibility_schedule_request_id, microsoft_graph_unified_role_eligibility_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/roleEligibilityScheduleRequests/#{unified_role_eligibility_schedule_request_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roleEligibilitySchedules in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `unified_role_eligibility_schedule_id` (String.t): The unique identifier of unifiedRoleEligibilitySchedule
  - `microsoft_graph_unified_role_eligibility_schedule` (MicrosoftGraphUnifiedRoleEligibilitySchedule): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_update_role_eligibility_schedules(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_entitlement_management_update_role_eligibility_schedules(connection, unified_role_eligibility_schedule_id, microsoft_graph_unified_role_eligibility_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement/roleEligibilitySchedules/#{unified_role_eligibility_schedule_id}")
      |> add_param(:body, :body, microsoft_graph_unified_role_eligibility_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get directory from roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRbacApplication.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_get_directory(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRbacApplication.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_get_directory(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/directory")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRbacApplication},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get entitlementManagement from roleManagement
  Container for roles and assignments for entitlement management resources.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRbacApplication.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_get_entitlement_management(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRbacApplication.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_get_entitlement_management(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/roleManagement/entitlementManagement")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRbacApplication},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property directory in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_rbac_application` (MicrosoftGraphRbacApplication): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRbacApplication.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_update_directory(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphRbacApplication.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRbacApplication.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_update_directory(connection, microsoft_graph_rbac_application, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/directory")
      |> add_param(:body, :body, microsoft_graph_rbac_application)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRbacApplication},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property entitlementManagement in roleManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_rbac_application` (MicrosoftGraphRbacApplication): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRbacApplication.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_update_entitlement_management(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphRbacApplication.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRbacApplication.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def role_management_update_entitlement_management(connection, microsoft_graph_rbac_application, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/roleManagement/entitlementManagement")
      |> add_param(:body, :body, microsoft_graph_rbac_application)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRbacApplication},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
