# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.OrganizationOrganizationalBranding do
  @moduledoc """
  API calls for all endpoints tagged `OrganizationOrganizationalBranding`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create organizationalBrandingLocalization
  Create a new organizationalBrandingLocalization object. This creates a localized branding and at the same time, the default branding if it doesn't exist. The default branding is created only once. It's loaded when a localized branding isn't configured for the user's browser language. To retrieve the default branding, see Get branding. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `microsoft_graph_organizational_branding_localization` (MicrosoftGraphOrganizationalBrandingLocalization): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_create_localizations(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalization.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalization.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_create_localizations(connection, organization_id, microsoft_graph_organizational_branding_localization, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/organization/#{organization_id}/branding/localizations")
      |> add_param(:body, :body, microsoft_graph_organizational_branding_localization)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete organizationalBrandingLocalization
  Delete a localized branding object. To delete the organizationalBrandingLocalization object, all images (Stream types) must first be removed from the object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_delete_localizations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_delete_localizations(connection, organization_id, organizational_branding_localization_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get organizationalBrandingLocalization
  Read the properties and relationships of an organizationalBrandingLocalization object. To retrieve a localization branding object, specify the value of id in the URL. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_get_localizations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalization.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_get_localizations(connection, organization_id, organizational_branding_localization_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get backgroundImage for the navigation property localizations from organization
  Image that appears as the background of the sign-in page. The allowed types are PNG or JPEG not smaller than 300 KB and not larger than 1920 × 1080 pixels. A smaller image will reduce bandwidth requirements and make the page load faster.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_get_localizations_background_image(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_branding_get_localizations_background_image(connection, organization_id, organizational_branding_localization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/backgroundImage")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get bannerLogo for the navigation property localizations from organization
  A banner version of your company logo that appears on the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_get_localizations_banner_logo(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_branding_get_localizations_banner_logo(connection, organization_id, organizational_branding_localization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/bannerLogo")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get customCSS for the navigation property localizations from organization
  CSS styling that appears on the sign-in page. The allowed format is .css format only and not larger than 25 KB.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_get_localizations_custom_css(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_branding_get_localizations_custom_css(connection, organization_id, organizational_branding_localization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/customCSS")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get favicon for the navigation property localizations from organization
  A custom icon (favicon) to replace a default Microsoft product favicon on a Microsoft Entra tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_get_localizations_favicon(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_branding_get_localizations_favicon(connection, organization_id, organizational_branding_localization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/favicon")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get headerLogo for the navigation property localizations from organization
  A company logo that appears in the header of the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_get_localizations_header_logo(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_branding_get_localizations_header_logo(connection, organization_id, organizational_branding_localization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/headerLogo")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get squareLogo for the navigation property localizations from organization
  A square version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_get_localizations_square_logo(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_branding_get_localizations_square_logo(connection, organization_id, organizational_branding_localization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/squareLogo")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get squareLogoDark for the navigation property localizations from organization
  A square dark version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_get_localizations_square_logo_dark(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_branding_get_localizations_square_logo_dark(connection, organization_id, organizational_branding_localization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/squareLogoDark")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List localizations
  Retrieve all localization branding objects, including the default branding. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalizationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_list_localizations(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalizationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_list_localizations(connection, organization_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/localizations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalizationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_localizations_get_count_e39f(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_localizations_get_count_e39f(connection, organization_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/localizations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update organizationalBrandingLocalization
  Update the properties of an organizationalBrandingLocalization object for a specific localization. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `microsoft_graph_organizational_branding_localization` (MicrosoftGraphOrganizationalBrandingLocalization): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_update_localizations(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalization.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalization.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_update_localizations(connection, organization_id, organizational_branding_localization_id, microsoft_graph_organizational_branding_localization, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}")
      |> add_param(:body, :body, microsoft_graph_organizational_branding_localization)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOrganizationalBrandingLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update backgroundImage for the navigation property localizations in organization
  Image that appears as the background of the sign-in page. The allowed types are PNG or JPEG not smaller than 300 KB and not larger than 1920 × 1080 pixels. A smaller image will reduce bandwidth requirements and make the page load faster.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_update_localizations_background_image(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_update_localizations_background_image(connection, organization_id, organizational_branding_localization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/backgroundImage")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update bannerLogo for the navigation property localizations in organization
  A banner version of your company logo that appears on the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_update_localizations_banner_logo(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_update_localizations_banner_logo(connection, organization_id, organizational_branding_localization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/bannerLogo")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update customCSS for the navigation property localizations in organization
  CSS styling that appears on the sign-in page. The allowed format is .css format only and not larger than 25 KB.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_update_localizations_custom_css(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_update_localizations_custom_css(connection, organization_id, organizational_branding_localization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/customCSS")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update favicon for the navigation property localizations in organization
  A custom icon (favicon) to replace a default Microsoft product favicon on a Microsoft Entra tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_update_localizations_favicon(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_update_localizations_favicon(connection, organization_id, organizational_branding_localization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/favicon")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update headerLogo for the navigation property localizations in organization
  A company logo that appears in the header of the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_update_localizations_header_logo(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_update_localizations_header_logo(connection, organization_id, organizational_branding_localization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/headerLogo")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update squareLogo for the navigation property localizations in organization
  A square version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_update_localizations_square_logo(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_update_localizations_square_logo(connection, organization_id, organizational_branding_localization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/squareLogo")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update squareLogoDark for the navigation property localizations in organization
  A square dark version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `organizational_branding_localization_id` (String.t): The unique identifier of organizationalBrandingLocalization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_branding_update_localizations_square_logo_dark(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_branding_update_localizations_square_logo_dark(connection, organization_id, organizational_branding_localization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/localizations/#{organizational_branding_localization_id}/squareLogoDark")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete organizationalBranding
  Delete the default organizational branding object. To delete the organizationalBranding object, all images (Stream types) must first be removed from the object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_delete_branding(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_delete_branding(connection, organization_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/organization/#{organization_id}/branding")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get organizationalBranding
  Retrieve the default organizational branding object, if the Accept-Language header is set to 0 or default. If no default organizational branding object exists, this method returns a 404 Not Found error. If the Accept-Language header is set to an existing locale identified by the value of its id, this method retrieves the branding for the specified locale. This method retrieves only non-Stream properties, for example, usernameHintText and signInPageText. To retrieve Stream types of the default branding, for example, bannerLogo and backgroundImage, use the GET organizationalBrandingLocalization method. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBranding.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_get_branding(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBranding.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_get_branding(connection, organization_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOrganizationalBranding},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get backgroundImage for the navigation property branding from organization
  Image that appears as the background of the sign-in page. The allowed types are PNG or JPEG not smaller than 300 KB and not larger than 1920 × 1080 pixels. A smaller image will reduce bandwidth requirements and make the page load faster.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_get_branding_background_image(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_get_branding_background_image(connection, organization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/backgroundImage")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get bannerLogo for the navigation property branding from organization
  A banner version of your company logo that appears on the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_get_branding_banner_logo(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_get_branding_banner_logo(connection, organization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/bannerLogo")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get customCSS for the navigation property branding from organization
  CSS styling that appears on the sign-in page. The allowed format is .css format only and not larger than 25 KB.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_get_branding_custom_css(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_get_branding_custom_css(connection, organization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/customCSS")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get favicon for the navigation property branding from organization
  A custom icon (favicon) to replace a default Microsoft product favicon on a Microsoft Entra tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_get_branding_favicon(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_get_branding_favicon(connection, organization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/favicon")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get headerLogo for the navigation property branding from organization
  A company logo that appears in the header of the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_get_branding_header_logo(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_get_branding_header_logo(connection, organization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/headerLogo")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get squareLogo for the navigation property branding from organization
  A square version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_get_branding_square_logo(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_get_branding_square_logo(connection, organization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/squareLogo")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get squareLogoDark for the navigation property branding from organization
  A square dark version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_get_branding_square_logo_dark(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def organization_get_branding_square_logo_dark(connection, organization_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/organization/#{organization_id}/branding/squareLogoDark")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update organizationalBranding
  Update the properties of the default branding object specified by the organizationalBranding resource. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `microsoft_graph_organizational_branding` (MicrosoftGraphOrganizationalBranding): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBranding.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_update_branding(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBranding.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOrganizationalBranding.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_update_branding(connection, organization_id, microsoft_graph_organizational_branding, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/organization/#{organization_id}/branding")
      |> add_param(:body, :body, microsoft_graph_organizational_branding)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOrganizationalBranding},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update backgroundImage for the navigation property branding in organization
  Image that appears as the background of the sign-in page. The allowed types are PNG or JPEG not smaller than 300 KB and not larger than 1920 × 1080 pixels. A smaller image will reduce bandwidth requirements and make the page load faster.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_update_branding_background_image(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_update_branding_background_image(connection, organization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/backgroundImage")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update bannerLogo for the navigation property branding in organization
  A banner version of your company logo that appears on the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_update_branding_banner_logo(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_update_branding_banner_logo(connection, organization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/bannerLogo")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update customCSS for the navigation property branding in organization
  CSS styling that appears on the sign-in page. The allowed format is .css format only and not larger than 25 KB.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_update_branding_custom_css(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_update_branding_custom_css(connection, organization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/customCSS")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update favicon for the navigation property branding in organization
  A custom icon (favicon) to replace a default Microsoft product favicon on a Microsoft Entra tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_update_branding_favicon(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_update_branding_favicon(connection, organization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/favicon")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update headerLogo for the navigation property branding in organization
  A company logo that appears in the header of the sign-in page. The allowed types are PNG or JPEG not larger than 36 × 245 pixels. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_update_branding_header_logo(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_update_branding_header_logo(connection, organization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/headerLogo")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update squareLogo for the navigation property branding in organization
  A square version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_update_branding_square_logo(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_update_branding_square_logo(connection, organization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/squareLogo")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update squareLogoDark for the navigation property branding in organization
  A square dark version of your company logo that appears in Windows 10 out-of-box experiences (OOBE) and when Windows Autopilot is enabled for deployment. Allowed types are PNG or JPEG not larger than 240 x 240 pixels and not more than 10 KB in size. We recommend using a transparent image with no padding around the logo.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `organization_id` (String.t): The unique identifier of organization
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec organization_update_branding_square_logo_dark(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def organization_update_branding_square_logo_dark(connection, organization_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/organization/#{organization_id}/branding/squareLogoDark")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
