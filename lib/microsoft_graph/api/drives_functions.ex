# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DrivesFunctions do
  @moduledoc """
  API calls for all endpoints tagged `DrivesFunctions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke function delta

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `token` (String.t): Usage: token='{token}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_delta9846(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_delta9846(connection, drive_id, drive_item_id, token, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/delta(token&#x3D;&#39;#{token}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function delta

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_delta_fa14(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_delta_fa14(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/delta()")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getActivitiesByInterval

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_get_activities_by_interval4c35(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfItemActivityStat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_get_activities_by_interval4c35(connection, drive_id, drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/getActivitiesByInterval()")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getActivitiesByInterval

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `start_date_time` (String.t): Usage: startDateTime='{startDateTime}'
  - `end_date_time` (String.t): Usage: endDateTime='{endDateTime}'
  - `interval` (String.t): Usage: interval='{interval}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_get_activities_by_interval_ad27(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfItemActivityStat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_get_activities_by_interval_ad27(connection, drive_id, drive_item_id, start_date_time, end_date_time, interval, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/getActivitiesByInterval(startDateTime&#x3D;&#39;#{start_date_time}&#39;,endDateTime&#x3D;&#39;#{end_date_time}&#39;,interval&#x3D;&#39;#{interval}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function search

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `q` (String.t): Usage: q='{q}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDriveItem1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_search(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfDriveItem1.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_search(connection, drive_id, drive_item_id, q, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/search(q&#x3D;&#39;#{q}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDriveItem1},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function range
  Retrieve the properties and relationships of range object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_named_item_id` (String.t): The unique identifier of workbookNamedItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_names_workbook_named_item_range(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_names_workbook_named_item_range(connection, drive_id, drive_item_id, workbook_named_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/names/#{workbook_named_item_id}/range()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function sessionInfoResource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `key` (String.t): Usage: key='{key}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookCreateSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_session_info_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookCreateSession2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_session_info_resource(connection, drive_id, drive_item_id, key, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/sessionInfoResource(key&#x3D;&#39;#{key}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookCreateSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function tableRowOperationResult

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `key` (String.t): Usage: key='{key}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_table_row_operation_result(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_table_row_operation_result(connection, drive_id, drive_item_id, key, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tableRowOperationResult(key&#x3D;&#39;#{key}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function count

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_count(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_count(connection, drive_id, drive_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/count()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function itemAt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `index` (integer()): Usage: index={index}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_item_at(Tesla.Env.client, String.t, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_item_at(connection, drive_id, drive_item_id, index, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/itemAt(index&#x3D;#{index})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function count

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_count(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_count(connection, drive_id, drive_item_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/count()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function itemAt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `index` (integer()): Usage: index={index}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_item_at(Tesla.Env.client, String.t, String.t, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_item_at(connection, drive_id, drive_item_id, workbook_table_id, index, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/itemAt(index&#x3D;#{index})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function dataBodyRange
  Gets the range object associated with the data body of the column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_data_body_range(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_data_body_range(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/dataBodyRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function headerRowRange
  Gets the range object associated with the header row of the column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_header_row_range(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_header_row_range(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/headerRowRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function range
  Gets the range object associated with the entire column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_range(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_range(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/range()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function totalRowRange
  Gets the range object associated with the totals row of the column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_total_row_range(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_columns_workbook_table_column_total_row_range(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_column_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/totalRowRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function dataBodyRange
  Gets the range object associated with the data body of the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_data_body_range(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_data_body_range(connection, drive_id, drive_item_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/dataBodyRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function headerRowRange
  Gets the range object associated with header row of the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_header_row_range(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_header_row_range(connection, drive_id, drive_item_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/headerRowRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function range
  Get the range object associated with the entire table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_range(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_range(connection, drive_id, drive_item_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/range()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function count

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_rows_count(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_rows_count(connection, drive_id, drive_item_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/rows/count()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function itemAt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `index` (integer()): Usage: index={index}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_rows_item_at(Tesla.Env.client, String.t, String.t, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_rows_item_at(connection, drive_id, drive_item_id, workbook_table_id, index, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/rows/itemAt(index&#x3D;#{index})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function range

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_row_id` (String.t): The unique identifier of workbookTableRow
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_rows_workbook_table_row_range(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_rows_workbook_table_row_range(connection, drive_id, drive_item_id, workbook_table_id, workbook_table_row_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/rows/#{workbook_table_row_id}/range()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function totalRowRange
  Gets the range object associated with totals row of the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_tables_workbook_table_total_row_range(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_tables_workbook_table_total_row_range(connection, drive_id, drive_item_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/tables/#{workbook_table_id}/totalRowRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function cell

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `row` (integer()): Usage: row={row}
  - `column` (integer()): Usage: column={column}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_cell(Tesla.Env.client, String.t, String.t, String.t, integer(), integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_cell(connection, drive_id, drive_item_id, workbook_worksheet_id, row, column, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/cell(row&#x3D;#{row},column&#x3D;#{column})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function count

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_count(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_count(connection, drive_id, drive_item_id, workbook_worksheet_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/count()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function item

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `name` (String.t): Usage: name='{name}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_item(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_item(connection, drive_id, drive_item_id, workbook_worksheet_id, name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/item(name&#x3D;&#39;#{name}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function itemAt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `index` (integer()): Usage: index={index}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_item_at(Tesla.Env.client, String.t, String.t, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_item_at(connection, drive_id, drive_item_id, workbook_worksheet_id, index, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/itemAt(index&#x3D;#{index})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function image

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `width` (integer()): Usage: width={width}
  - `height` (integer()): Usage: height={height}
  - `fitting_mode` (String.t): Usage: fittingMode='{fittingMode}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_image4f04(Tesla.Env.client, String.t, String.t, String.t, String.t, integer(), integer(), String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_image4f04(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, width, height, fitting_mode, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/image(width&#x3D;#{width},height&#x3D;#{height},fittingMode&#x3D;&#39;#{fitting_mode}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function image

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `width` (integer()): Usage: width={width}
  - `height` (integer()): Usage: height={height}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_image664c(Tesla.Env.client, String.t, String.t, String.t, String.t, integer(), integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_image664c(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, width, height, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/image(width&#x3D;#{width},height&#x3D;#{height})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function image

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_image8f13(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_image8f13(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/image()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function image

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `width` (integer()): Usage: width={width}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_image9795(Tesla.Env.client, String.t, String.t, String.t, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_image9795(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, width, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/image(width&#x3D;#{width})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function count

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_count(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_count(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/count()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function itemAt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `index` (integer()): Usage: index={index}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAt2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_item_at(Tesla.Env.client, String.t, String.t, String.t, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAt2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_item_at(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, index, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/itemAt(index&#x3D;#{index})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAt2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function count

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_points_count(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_points_count(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/count()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function itemAt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_chart_id` (String.t): The unique identifier of workbookChart
  - `workbook_chart_series_id` (String.t): The unique identifier of workbookChartSeries
  - `index` (integer()): Usage: index={index}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_points_item_at(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_charts_workbook_chart_series_workbook_chart_series_points_item_at(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_chart_id, workbook_chart_series_id, index, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/charts/#{workbook_chart_id}/series/#{workbook_chart_series_id}/points/itemAt(index&#x3D;#{index})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function range
  Retrieve the properties and relationships of range object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_named_item_id` (String.t): The unique identifier of workbookNamedItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_names_workbook_named_item_range(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_names_workbook_named_item_range(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_named_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/names/#{workbook_named_item_id}/range()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function range

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `address` (String.t): Usage: address='{address}'
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_range_b0fa(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_range_b0fa(connection, drive_id, drive_item_id, workbook_worksheet_id, address, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/range(address&#x3D;&#39;#{address}&#39;)")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function range

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_range_bc5e(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_range_bc5e(connection, drive_id, drive_item_id, workbook_worksheet_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/range()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function count

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_count(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_count(connection, drive_id, drive_item_id, workbook_worksheet_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/count()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function itemAt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `index` (integer()): Usage: index={index}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_item_at(Tesla.Env.client, String.t, String.t, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_item_at(connection, drive_id, drive_item_id, workbook_worksheet_id, index, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/itemAt(index&#x3D;#{index})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesItemAt2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function count

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_count(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_count(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/count()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function itemAt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `index` (integer()): Usage: index={index}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_item_at(Tesla.Env.client, String.t, String.t, String.t, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_item_at(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, index, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/itemAt(index&#x3D;#{index})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function dataBodyRange
  Gets the range object associated with the data body of the column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_data_body_range(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_data_body_range(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/dataBodyRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function headerRowRange
  Gets the range object associated with the header row of the column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_header_row_range(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_header_row_range(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/headerRowRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function range
  Gets the range object associated with the entire column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_range(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_range(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/range()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function totalRowRange
  Gets the range object associated with the totals row of the column. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_column_id` (String.t): The unique identifier of workbookTableColumn
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_total_row_range(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_columns_workbook_table_column_total_row_range(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_column_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/columns/#{workbook_table_column_id}/totalRowRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function dataBodyRange
  Gets the range object associated with the data body of the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_data_body_range(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_data_body_range(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/dataBodyRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function headerRowRange
  Gets the range object associated with header row of the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_header_row_range(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_header_row_range(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/headerRowRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function range
  Get the range object associated with the entire table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_range(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_range(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/range()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function count

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_count(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_count(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/rows/count()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTablesCount2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function itemAt

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `index` (integer()): Usage: index={index}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_item_at(Tesla.Env.client, String.t, String.t, String.t, String.t, integer(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_item_at(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, index, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/rows/itemAt(index&#x3D;#{index})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookTableRowOperationResult2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function range

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `workbook_table_row_id` (String.t): The unique identifier of workbookTableRow
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_workbook_table_row_range(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_rows_workbook_table_row_range(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, workbook_table_row_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/rows/#{workbook_table_row_id}/range()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function totalRowRange
  Gets the range object associated with totals row of the table. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `workbook_table_id` (String.t): The unique identifier of workbookTable
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_total_row_range(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_tables_workbook_table_total_row_range(connection, drive_id, drive_item_id, workbook_worksheet_id, workbook_table_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/tables/#{workbook_table_id}/totalRowRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function usedRange

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_used_range5ff6(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_used_range5ff6(connection, drive_id, drive_item_id, workbook_worksheet_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/usedRange()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function usedRange

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `drive_item_id` (String.t): The unique identifier of driveItem
  - `workbook_worksheet_id` (String.t): The unique identifier of workbookWorksheet
  - `values_only` (boolean()): Usage: valuesOnly={valuesOnly}
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_used_range63c8(Tesla.Env.client, String.t, String.t, String.t, boolean(), keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse.t} | {:error, Tesla.Env.t}
  def drives_drive_items_drive_item_workbook_worksheets_workbook_worksheet_used_range63c8(connection, drive_id, drive_item_id, workbook_worksheet_id, values_only, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/items/#{drive_item_id}/workbook/worksheets/#{workbook_worksheet_id}/usedRange(valuesOnly&#x3D;#{values_only})")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function isPublished

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveListContentTypesContentTypeIsPublished2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_content_types_content_type_is_published(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DrivesDriveListContentTypesContentTypeIsPublished2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_list_content_types_content_type_is_published(connection, drive_id, content_type_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/list/contentTypes/#{content_type_id}/isPublished()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveListContentTypesContentTypeIsPublished2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getCompatibleHubContentTypes

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_content_types_get_compatible_hub_content_types(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_list_content_types_get_compatible_hub_content_types(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/list/contentTypes/getCompatibleHubContentTypes()")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getActivitiesByInterval

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_items_list_item_get_activities_by_interval4c35(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfItemActivityStat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_list_items_list_item_get_activities_by_interval4c35(connection, drive_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/list/items/#{list_item_id}/getActivitiesByInterval()")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getActivitiesByInterval

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `list_item_id` (String.t): The unique identifier of listItem
  - `start_date_time` (String.t): Usage: startDateTime='{startDateTime}'
  - `end_date_time` (String.t): Usage: endDateTime='{endDateTime}'
  - `interval` (String.t): Usage: interval='{interval}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_list_items_list_item_get_activities_by_interval_ad27(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfItemActivityStat.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_list_items_list_item_get_activities_by_interval_ad27(connection, drive_id, list_item_id, start_date_time, end_date_time, interval, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/list/items/#{list_item_id}/getActivitiesByInterval(startDateTime&#x3D;&#39;#{start_date_time}&#39;,endDateTime&#x3D;&#39;#{end_date_time}&#39;,interval&#x3D;&#39;#{interval}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function recent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDriveItem1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_recent(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfDriveItem1.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_recent(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/recent()")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDriveItem1},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function search

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `q` (String.t): Usage: q='{q}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDriveItem1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_search(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfDriveItem1.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_search(connection, drive_id, q, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/search(q&#x3D;&#39;#{q}&#39;)")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDriveItem1},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function sharedWithMe

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDriveItem1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec drives_drive_shared_with_me(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfDriveItem1.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def drives_drive_shared_with_me(connection, drive_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/drives/#{drive_id}/sharedWithMe()")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDriveItem1},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
