# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.PoliciesFeatureRolloutPolicy do
  @moduledoc """
  API calls for all endpoints tagged `PoliciesFeatureRolloutPolicy`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create featureRolloutPolicy
  Create a new featureRolloutPolicy object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_feature_rollout_policy` (MicrosoftGraphFeatureRolloutPolicy): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_create_feature_rollout_policies(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicy.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicy.t()}
          | {:error, Tesla.Env.t()}
  def policies_create_feature_rollout_policies(
        connection,
        microsoft_graph_feature_rollout_policy,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/policies/featureRolloutPolicies")
      |> add_param(:body, :body, microsoft_graph_feature_rollout_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete featureRolloutPolicy
  Delete a featureRolloutPolicy object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `feature_rollout_policy_id` (String.t): The unique identifier of featureRolloutPolicy
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_delete_feature_rollout_policies(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_delete_feature_rollout_policies(connection, feature_rollout_policy_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/policies/featureRolloutPolicies/#{feature_rollout_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `feature_rollout_policy_id` (String.t): The unique identifier of featureRolloutPolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_feature_rollout_policies_applies_to_get_count_b7fc(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_feature_rollout_policies_applies_to_get_count_b7fc(
        connection,
        feature_rollout_policy_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/featureRolloutPolicies/#{feature_rollout_policy_id}/appliesTo/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Assign appliesTo on a featureRolloutPolicy
  Add an appliesTo on a featureRolloutPolicy object to specify the directoryObject to which the featureRolloutPolicy should be applied. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `feature_rollout_policy_id` (String.t): The unique identifier of featureRolloutPolicy
  - `microsoft_graph_directory_object` (MicrosoftGraphDirectoryObject): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_feature_rollout_policies_create_applies_to(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_feature_rollout_policies_create_applies_to(
        connection,
        feature_rollout_policy_id,
        microsoft_graph_directory_object,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/policies/featureRolloutPolicies/#{feature_rollout_policy_id}/appliesTo")
      |> add_param(:body, :body, microsoft_graph_directory_object)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Assign appliesTo on a featureRolloutPolicy
  Add an appliesTo on a featureRolloutPolicy object to specify the directoryObject to which the featureRolloutPolicy should be applied. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `feature_rollout_policy_id` (String.t): The unique identifier of featureRolloutPolicy
  - `request_body` (%{optional(String.t) => map()}): New navigation property ref value
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_feature_rollout_policies_create_ref_applies_to(
          Tesla.Env.client(),
          String.t(),
          %{optional(String.t()) => Map.t()},
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_feature_rollout_policies_create_ref_applies_to(
        connection,
        feature_rollout_policy_id,
        request_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/policies/featureRolloutPolicies/#{feature_rollout_policy_id}/appliesTo/$ref")
      |> add_param(:body, :body, request_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove appliesTo on a featureRolloutPolicy
  Remove an appliesTo on a featureRolloutPolicy object to remove the directoryObject from feature rollout. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `feature_rollout_policy_id` (String.t): The unique identifier of featureRolloutPolicy
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag
    - `:"@id"` (String.t): Delete Uri

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_feature_rollout_policies_delete_ref_applies_to(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_feature_rollout_policies_delete_ref_applies_to(
        connection,
        feature_rollout_policy_id,
        directory_object_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers,
      :"@id" => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/policies/featureRolloutPolicies/#{feature_rollout_policy_id}/appliesTo/#{directory_object_id}/$ref"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_feature_rollout_policies_get_count_bb08(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_feature_rollout_policies_get_count_bb08(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/featureRolloutPolicies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appliesTo from policies
  Nullable. Specifies a list of directoryObjects that feature is enabled for.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `feature_rollout_policy_id` (String.t): The unique identifier of featureRolloutPolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_feature_rollout_policies_list_applies_to(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def policies_feature_rollout_policies_list_applies_to(
        connection,
        feature_rollout_policy_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/featureRolloutPolicies/#{feature_rollout_policy_id}/appliesTo")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ref of appliesTo from policies
  Nullable. Specifies a list of directoryObjects that feature is enabled for.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `feature_rollout_policy_id` (String.t): The unique identifier of featureRolloutPolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.StringCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_feature_rollout_policies_list_ref_applies_to(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.StringCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_feature_rollout_policies_list_ref_applies_to(
        connection,
        feature_rollout_policy_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/featureRolloutPolicies/#{feature_rollout_policy_id}/appliesTo/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.StringCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get featureRolloutPolicy
  Retrieve the properties and relationships of a featureRolloutPolicy object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `feature_rollout_policy_id` (String.t): The unique identifier of featureRolloutPolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_get_feature_rollout_policies(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicy.t()}
          | {:error, Tesla.Env.t()}
  def policies_get_feature_rollout_policies(connection, feature_rollout_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/featureRolloutPolicies/#{feature_rollout_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List featureRolloutPolicies
  Retrieve a list of featureRolloutPolicy objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicyCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_list_feature_rollout_policies(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicyCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_list_feature_rollout_policies(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/featureRolloutPolicies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicyCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update featurerolloutpolicy
  Update the properties of featureRolloutPolicy object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `feature_rollout_policy_id` (String.t): The unique identifier of featureRolloutPolicy
  - `microsoft_graph_feature_rollout_policy` (MicrosoftGraphFeatureRolloutPolicy): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_update_feature_rollout_policies(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicy.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicy.t()}
          | {:error, Tesla.Env.t()}
  def policies_update_feature_rollout_policies(
        connection,
        feature_rollout_policy_id,
        microsoft_graph_feature_rollout_policy,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/policies/featureRolloutPolicies/#{feature_rollout_policy_id}")
      |> add_param(:body, :body, microsoft_graph_feature_rollout_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFeatureRolloutPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
