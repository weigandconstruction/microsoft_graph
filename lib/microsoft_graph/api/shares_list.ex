# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.SharesList do
  @moduledoc """
  API calls for all endpoints tagged `SharesList`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property list for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_delete_list(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_delete_list(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get list from shares
  Used to access the underlying list

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_get_list(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphList.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_get_list(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphList},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_columns_get_count_b936(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_columns_get_count_b936(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/columns/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sourceColumn from shares
  The source column for the content type column.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_columns_get_source_column(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_columns_get_source_column(connection, shared_drive_item_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/columns/#{column_definition_id}/sourceColumn")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_base_types_get_count_f23a(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_base_types_get_count_f23a(connection, shared_drive_item_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/baseTypes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_column_links_get_count_a211(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_column_links_get_count_a211(connection, shared_drive_item_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columnLinks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_column_positions_get_count1b55(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_column_positions_get_count1b55(connection, shared_drive_item_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columnPositions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_columns_get_count_db38(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_columns_get_count_db38(connection, shared_drive_item_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columns/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sourceColumn from shares
  The source column for the content type column.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_columns_get_source_column(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_columns_get_source_column(connection, shared_drive_item_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columns/#{column_definition_id}/sourceColumn")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to columnLinks for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_column_link` (MicrosoftGraphColumnLink): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_create_column_links(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_create_column_links(connection, shared_drive_item_id, content_type_id, microsoft_graph_column_link, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columnLinks")
      |> add_param(:body, :body, microsoft_graph_column_link)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a columnDefinition in a content type
  Add a column to a content type][contentType] in a site, or a list with a request that specifies a [columnDefinition][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_create_columns(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_create_columns(connection, shared_drive_item_id, content_type_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columns")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property columnLinks for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_delete_column_links(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_delete_column_links(connection, shared_drive_item_id, content_type_id, column_link_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete columnDefinition
  Remove a column][columndefinition] from a [site][], a [list][], or a [content type][contentType]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_delete_columns(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_delete_columns(connection, shared_drive_item_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get base from shares
  Parent contentType from which this content type is derived.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_get_base(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_get_base(connection, shared_drive_item_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/base")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get baseTypes from shares
  The collection of content types that are ancestors of this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `content_type_id1` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_get_base_types(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_get_base_types(connection, shared_drive_item_id, content_type_id, content_type_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/baseTypes/#{content_type_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnLinks from shares
  The collection of columns that are required by this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_get_column_links(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_get_column_links(connection, shared_drive_item_id, content_type_id, column_link_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnPositions from shares
  Column order information in a content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_get_column_positions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_get_column_positions(connection, shared_drive_item_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columnPositions/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnDefinition
  Retrieve the metadata for a site][], a [list][], or a [contentType][] [column][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_get_columns(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_get_columns(connection, shared_drive_item_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_get_count70f5(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_get_count70f5(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get baseTypes from shares
  The collection of content types that are ancestors of this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_list_base_types(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_list_base_types(connection, shared_drive_item_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/baseTypes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnLinks from shares
  The collection of columns that are required by this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_list_column_links(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_list_column_links(connection, shared_drive_item_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columnLinks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnPositions from shares
  Column order information in a content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_list_column_positions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_list_column_positions(connection, shared_drive_item_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columnPositions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List columnDefinitions in a content type
  Get the collection of columns represented as columnDefinition][columnDefinition] resources in a [content type][contentType]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_list_columns(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_list_columns(connection, shared_drive_item_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columns")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property columnLinks in shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `microsoft_graph_column_link` (MicrosoftGraphColumnLink): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_update_column_links(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_update_column_links(connection, shared_drive_item_id, content_type_id, column_link_id, microsoft_graph_column_link, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_param(:body, :body, microsoft_graph_column_link)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update columnDefinition
  Update a site][], a [list][], or a [content type][contentType] [column][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_content_types_update_columns(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_content_types_update_columns(connection, shared_drive_item_id, content_type_id, column_definition_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a columnDefinition in a list
  Create a column for a list][list] with a request that specifies a [columnDefinition][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_create_columns(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_create_columns(connection, shared_drive_item_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/columns")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentTypes for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `microsoft_graph_content_type` (MicrosoftGraphContentType): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_create_content_types(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphContentType.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_create_content_types(connection, shared_drive_item_id, microsoft_graph_content_type, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes")
      |> add_param(:body, :body, microsoft_graph_content_type)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a new item in a list
  Create a new listItem][] in a [list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `microsoft_graph_list_item` (MicrosoftGraphListItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_create_items(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphListItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t} | {:error, Tesla.Env.t}
  def shares_list_create_items(connection, shared_drive_item_id, microsoft_graph_list_item, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/items")
      |> add_param(:body, :body, microsoft_graph_list_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to operations for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `microsoft_graph_rich_long_running_operation` (MicrosoftGraphRichLongRunningOperation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_create_operations(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_create_operations(connection, shared_drive_item_id, microsoft_graph_rich_long_running_operation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/operations")
      |> add_param(:body, :body, microsoft_graph_rich_long_running_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to subscriptions for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `microsoft_graph_subscription` (MicrosoftGraphSubscription): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_create_subscriptions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSubscription.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_create_subscriptions(connection, shared_drive_item_id, microsoft_graph_subscription, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/subscriptions")
      |> add_param(:body, :body, microsoft_graph_subscription)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscription},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_created_by_user_get_mailbox_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def shares_list_created_by_user_get_mailbox_settings(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/createdByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_created_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_created_by_user_list_service_provisioning_errors(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/createdByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_created_by_user_service_provisioning_errors_get_count7658(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_created_by_user_service_provisioning_errors_get_count7658(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/createdByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_created_by_user_update_mailbox_settings(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def shares_list_created_by_user_update_mailbox_settings(connection, shared_drive_item_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/createdByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property columns for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_delete_columns(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_delete_columns(connection, shared_drive_item_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentTypes for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_delete_content_types(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_delete_content_types(connection, shared_drive_item_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete an item from a list
  Removes an item from a list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_delete_items(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_delete_items(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property operations for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `rich_long_running_operation_id` (String.t): The unique identifier of richLongRunningOperation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_delete_operations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_delete_operations(connection, shared_drive_item_id, rich_long_running_operation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/operations/#{rich_long_running_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property subscriptions for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `subscription_id` (String.t): The unique identifier of subscription
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_delete_subscriptions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_delete_subscriptions(connection, shared_drive_item_id, subscription_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/subscriptions/#{subscription_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columns from shares
  The collection of field definitions for this list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_get_columns(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_get_columns(connection, shared_drive_item_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentTypes from shares
  The collection of content types present in this list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_get_content_types(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_get_content_types(connection, shared_drive_item_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get createdByUser from shares
  Identity of the user who created the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_get_created_by_user(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_get_created_by_user(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/createdByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get drive from shares
  Allows access to the list as a drive resource with driveItems. Only present on document libraries.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDrive.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_get_drive(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDrive.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_get_drive(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/drive")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDrive},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get listItem
  Returns the metadata for an item][] in a [list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_get_items(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t} | {:error, Tesla.Env.t}
  def shares_list_get_items(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastModifiedByUser from shares
  Identity of the user who last modified the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_get_last_modified_by_user(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_get_last_modified_by_user(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/lastModifiedByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get operations from shares
  The collection of long-running operations on the list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `rich_long_running_operation_id` (String.t): The unique identifier of richLongRunningOperation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_get_operations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_get_operations(connection, shared_drive_item_id, rich_long_running_operation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/operations/#{rich_long_running_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subscriptions from shares
  The set of subscriptions on the list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `subscription_id` (String.t): The unique identifier of subscription
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_get_subscriptions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_get_subscriptions(connection, shared_drive_item_id, subscription_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/subscriptions/#{subscription_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscription},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create documentSetVersion
  Create a new version of a document set item in a list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_document_set_version` (MicrosoftGraphDocumentSetVersion): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_create_document_set_versions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_create_document_set_versions(connection, shared_drive_item_id, list_item_id, microsoft_graph_document_set_version, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/documentSetVersions")
      |> add_param(:body, :body, microsoft_graph_document_set_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to versions for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_list_item_version` (MicrosoftGraphListItemVersion): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_create_versions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t} | {:error, Tesla.Env.t}
  def shares_list_items_create_versions(connection, shared_drive_item_id, list_item_id, microsoft_graph_list_item_version, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/versions")
      |> add_param(:body, :body, microsoft_graph_list_item_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItemVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_created_by_user_get_mailbox_settings(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def shares_list_items_created_by_user_get_mailbox_settings(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/createdByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_created_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_created_by_user_list_service_provisioning_errors(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/createdByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_created_by_user_service_provisioning_errors_get_count1b79(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_created_by_user_service_provisioning_errors_get_count1b79(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/createdByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_created_by_user_update_mailbox_settings(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def shares_list_items_created_by_user_update_mailbox_settings(connection, shared_drive_item_id, list_item_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/createdByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete documentSetVersion
  Delete a version of a document set in a list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_delete_document_set_versions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_delete_document_set_versions(connection, shared_drive_item_id, list_item_id, document_set_version_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fields for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_delete_fields(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_delete_fields(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property versions for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_delete_versions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_delete_versions(connection, shared_drive_item_id, list_item_id, list_item_version_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/versions/#{list_item_version_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fields for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_document_set_versions_delete_fields(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_document_set_versions_delete_fields(connection, shared_drive_item_id, list_item_id, document_set_version_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_document_set_versions_get_count172d(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_document_set_versions_get_count172d(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/documentSetVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fields from shares
  A collection of the fields and values for this version of the list item.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_document_set_versions_get_fields(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def shares_list_items_document_set_versions_get_fields(connection, shared_drive_item_id, list_item_id, document_set_version_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property fields in shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `microsoft_graph_field_value_set` (MicrosoftGraphFieldValueSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_document_set_versions_update_fields(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def shares_list_items_document_set_versions_update_fields(connection, shared_drive_item_id, list_item_id, document_set_version_id, microsoft_graph_field_value_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}/fields")
      |> add_param(:body, :body, microsoft_graph_field_value_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get analytics from shares
  Analytics about the view activities that took place on this item.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_get_analytics(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_get_analytics(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/analytics")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemAnalytics},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get createdByUser from shares
  Identity of the user who created the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_get_created_by_user(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_get_created_by_user(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/createdByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get documentSetVersion
  Read the properties and relationships of a documentSetVersion object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_get_document_set_versions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_get_document_set_versions(connection, shared_drive_item_id, list_item_id, document_set_version_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get driveItem from shares
  For document libraries, the driveItem relationship exposes the listItem as a [driveItem][]

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_get_drive_item(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_get_drive_item(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/driveItem")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property driveItem from shares
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_get_drive_item_content(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def shares_list_items_get_drive_item_content(connection, shared_drive_item_id, list_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/driveItem/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fields from shares
  The values of the columns set on this list item.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_get_fields(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def shares_list_items_get_fields(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastModifiedByUser from shares
  Identity of the user who last modified the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_get_last_modified_by_user(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_get_last_modified_by_user(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/lastModifiedByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get a ListItemVersion resource
  Retrieve the metadata for a specific version of a ListItem. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_get_versions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t} | {:error, Tesla.Env.t}
  def shares_list_items_get_versions(connection, shared_drive_item_id, list_item_id, list_item_version_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/versions/#{list_item_version_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItemVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_last_modified_by_user_get_mailbox_settings(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def shares_list_items_last_modified_by_user_get_mailbox_settings(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/lastModifiedByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_last_modified_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_last_modified_by_user_list_service_provisioning_errors(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/lastModifiedByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_last_modified_by_user_service_provisioning_errors_get_count401d(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_last_modified_by_user_service_provisioning_errors_get_count401d(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/lastModifiedByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_last_modified_by_user_update_mailbox_settings(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def shares_list_items_last_modified_by_user_update_mailbox_settings(connection, shared_drive_item_id, list_item_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/lastModifiedByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List documentSetVersions
  Get a list of the versions of a document set item in a list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_list_document_set_versions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersionCollectionResponse.t} | {:error, Tesla.Env.t}
  def shares_list_items_list_document_set_versions(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/documentSetVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Listing versions of a ListItem
  SharePoint can be configured to retain the history for list items. Previous versions may be retained for a finite period of time depending on admin settings which may be unique per user or location. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_list_versions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_list_versions(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/versions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItemVersionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property documentSetVersions in shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `microsoft_graph_document_set_version` (MicrosoftGraphDocumentSetVersion): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_update_document_set_versions(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_update_document_set_versions(connection, shared_drive_item_id, list_item_id, document_set_version_id, microsoft_graph_document_set_version, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}")
      |> add_param(:body, :body, microsoft_graph_document_set_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property driveItem in shares
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_update_drive_item_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_update_drive_item_content(connection, shared_drive_item_id, list_item_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/driveItem/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update listItem
  Update the properties on a listItem][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_field_value_set` (MicrosoftGraphFieldValueSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_update_fields(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def shares_list_items_update_fields(connection, shared_drive_item_id, list_item_id, microsoft_graph_field_value_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/fields")
      |> add_param(:body, :body, microsoft_graph_field_value_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property versions in shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `microsoft_graph_list_item_version` (MicrosoftGraphListItemVersion): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_update_versions(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t} | {:error, Tesla.Env.t}
  def shares_list_items_update_versions(connection, shared_drive_item_id, list_item_id, list_item_version_id, microsoft_graph_list_item_version, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/versions/#{list_item_version_id}")
      |> add_param(:body, :body, microsoft_graph_list_item_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItemVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fields for shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_versions_delete_fields(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_versions_delete_fields(connection, shared_drive_item_id, list_item_id, list_item_version_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/versions/#{list_item_version_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_versions_get_count0c45(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_items_versions_get_count0c45(connection, shared_drive_item_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/versions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fields from shares
  A collection of the fields and values for this version of the list item.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_versions_get_fields(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def shares_list_items_versions_get_fields(connection, shared_drive_item_id, list_item_id, list_item_version_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/versions/#{list_item_version_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property fields in shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `microsoft_graph_field_value_set` (MicrosoftGraphFieldValueSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_items_versions_update_fields(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def shares_list_items_versions_update_fields(connection, shared_drive_item_id, list_item_id, list_item_version_id, microsoft_graph_field_value_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/versions/#{list_item_version_id}/fields")
      |> add_param(:body, :body, microsoft_graph_field_value_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_last_modified_by_user_get_mailbox_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def shares_list_last_modified_by_user_get_mailbox_settings(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/lastModifiedByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_last_modified_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_last_modified_by_user_list_service_provisioning_errors(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/lastModifiedByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_last_modified_by_user_service_provisioning_errors_get_count8cfb(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_last_modified_by_user_service_provisioning_errors_get_count8cfb(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/lastModifiedByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_last_modified_by_user_update_mailbox_settings(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def shares_list_last_modified_by_user_update_mailbox_settings(connection, shared_drive_item_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/lastModifiedByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List columnDefinitions in a list
  Get the collection of columns represented as columnDefinition][columnDefinition] resources in a [list][list]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_list_columns(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def shares_list_list_columns(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/columns")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List contentTypes in a list
  Get the collection of contentType][contentType] resources in a [list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_list_content_types(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_list_content_types(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Enumerate items in a list
  Get the collection of items][item] in a [list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_list_items(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphListItemCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_list_items(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/items")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get operations from shares
  The collection of long-running operations on the list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_list_operations(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperationCollectionResponse.t} | {:error, Tesla.Env.t}
  def shares_list_list_operations(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/operations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subscriptions from shares
  The set of subscriptions on the list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscriptionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_list_subscriptions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscriptionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_list_subscriptions(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/subscriptions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscriptionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_operations_get_count5f90(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_operations_get_count5f90(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/operations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_subscriptions_get_count4363(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_subscriptions_get_count4363(connection, shared_drive_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/shares/#{shared_drive_item_id}/list/subscriptions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property columns in shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_update_columns(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_update_columns(connection, shared_drive_item_id, column_definition_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/columns/#{column_definition_id}")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentTypes in shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_content_type` (MicrosoftGraphContentType): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_update_content_types(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphContentType.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_update_content_types(connection, shared_drive_item_id, content_type_id, microsoft_graph_content_type, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}")
      |> add_param(:body, :body, microsoft_graph_content_type)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property items in shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_list_item` (MicrosoftGraphListItem): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_update_items(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphListItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t} | {:error, Tesla.Env.t}
  def shares_list_update_items(connection, shared_drive_item_id, list_item_id, microsoft_graph_list_item, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/items/#{list_item_id}")
      |> add_param(:body, :body, microsoft_graph_list_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property operations in shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `rich_long_running_operation_id` (String.t): The unique identifier of richLongRunningOperation
  - `microsoft_graph_rich_long_running_operation` (MicrosoftGraphRichLongRunningOperation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_update_operations(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_update_operations(connection, shared_drive_item_id, rich_long_running_operation_id, microsoft_graph_rich_long_running_operation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/operations/#{rich_long_running_operation_id}")
      |> add_param(:body, :body, microsoft_graph_rich_long_running_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property subscriptions in shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `subscription_id` (String.t): The unique identifier of subscription
  - `microsoft_graph_subscription` (MicrosoftGraphSubscription): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_list_update_subscriptions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSubscription.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_list_update_subscriptions(connection, shared_drive_item_id, subscription_id, microsoft_graph_subscription, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list/subscriptions/#{subscription_id}")
      |> add_param(:body, :body, microsoft_graph_subscription)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscription},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property list in shares

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `microsoft_graph_list` (MicrosoftGraphList): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_update_list(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphList.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphList.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def shares_update_list(connection, shared_drive_item_id, microsoft_graph_list, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/shares/#{shared_drive_item_id}/list")
      |> add_param(:body, :body, microsoft_graph_list)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphList},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
