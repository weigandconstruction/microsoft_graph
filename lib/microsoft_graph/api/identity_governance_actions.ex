# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.IdentityGovernanceActions do
  @moduledoc """
  API calls for all endpoints tagged `IdentityGovernanceActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action acceptRecommendations
  Allows the acceptance of recommendations on all accessReviewInstanceDecisionItem objects that haven't been reviewed on an accessReviewInstance object for which the calling user is a reviewer. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_accept_recommendations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_accept_recommendations(connection, access_review_schedule_definition_id, access_review_instance_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/acceptRecommendations")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action applyDecisions
  Apply review decisions on an accessReviewInstance if the decisions were not applied automatically because the autoApplyDecisionsEnabled property is false in the review's accessReviewScheduleSettings. The status of the accessReviewInstance must be Completed to call this method. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_apply_decisions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_apply_decisions(connection, access_review_schedule_definition_id, access_review_instance_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/applyDecisions")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action batchRecordDecisions
  Enables reviewers to review all accessReviewInstanceDecisionItem objects in batches by using principalId, resourceId, or neither. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_batch_record_decisions_request` (IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceBatchRecordDecisionsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_batch_record_decisions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceAccessReviewsDefinitionsAccessReviewScheduleDefinitionInstancesAccessReviewInstanceBatchRecordDecisionsRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_batch_record_decisions(connection, access_review_schedule_definition_id, access_review_instance_id, identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_batch_record_decisions_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/batchRecordDecisions")
      |> add_param(:body, :body, identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_batch_record_decisions_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resetDecisions
  Resets all accessReviewInstanceDecisionItem objects on an accessReviewInstance to notReviewed. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_reset_decisions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_reset_decisions(connection, access_review_schedule_definition_id, access_review_instance_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/resetDecisions")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sendReminder
  Send a reminder to the reviewers of an active accessReviewInstance. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_send_reminder(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_send_reminder(connection, access_review_schedule_definition_id, access_review_instance_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/sendReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action stop
  Stop an access review stage that is inProgress. After the access review stage stops, the stage status will be Completed and the reviewers can no longer give input. If there are subsequent stages that depend on the completed stage, the next stage will be created.  The accessReviewInstanceDecisionItem objects will always reflect the last decisions recorded across all stages at that given time, regardless of the status of the stages. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_stages_access_review_stage_stop(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_stages_access_review_stage_stop(connection, access_review_schedule_definition_id, access_review_instance_id, access_review_stage_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/stop")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action stop
  Stop a currently active accessReviewInstance. After the access review instance stops, the instance status is marked as Completed, the reviewers can no longer give input, and the access review decisions are applied. Stopping an instance will not stop future instances. To prevent a recurring access review from starting future instances, update the schedule definition to change its scheduled end date. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_stop(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_instances_access_review_instance_stop(connection, access_review_schedule_definition_id, access_review_instance_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stop")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action stop

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_access_review_schedule_definition_stop(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_definitions_access_review_schedule_definition_stop(connection, access_review_schedule_definition_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/stop")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action generateDownloadUri
  Generates a URI for an accessReviewHistoryInstance object the status for which is done. Each URI can be used to retrieve the instance's review history data. Each URI is valid for 24 hours and can be retrieved by fetching the downloadUri property from the accessReviewHistoryInstance object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_history_definition_id` (String.t): The unique identifier of accessReviewHistoryDefinition
  - `access_review_history_instance_id` (String.t): The unique identifier of accessReviewHistoryInstance
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceAccessReviewsHistoryDefinitionsAccessReviewHistoryDefinitionInstancesAccessReviewHistoryInstanceGenerateDownloadUri2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_history_definitions_access_review_history_definition_instances_access_review_history_instance_generate_download_uri(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.IdentityGovernanceAccessReviewsHistoryDefinitionsAccessReviewHistoryDefinitionInstancesAccessReviewHistoryInstanceGenerateDownloadUri2XxResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_access_reviews_history_definitions_access_review_history_definition_instances_access_review_history_instance_generate_download_uri(connection, access_review_history_definition_id, access_review_history_instance_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/accessReviews/historyDefinitions/#{access_review_history_definition_id}/instances/#{access_review_history_instance_id}/generateDownloadUri")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceAccessReviewsHistoryDefinitionsAccessReviewHistoryDefinitionInstancesAccessReviewHistoryInstanceGenerateDownloadUri2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getApplicablePolicyRequirements
  In Microsoft Entra entitlement management, this action retrieves a list of accessPackageAssignmentRequestRequirements objects that the currently signed-in user can use to create an accessPackageAssignmentRequest.  Each requirement object corresponds to an access package assignment policy that the currently signed-in user is allowed to request an assignment for. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceEntitlementManagementAccessPackagesAccessPackageGetApplicablePolicyRequirements2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_access_package_get_applicable_policy_requirements(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.IdentityGovernanceEntitlementManagementAccessPackagesAccessPackageGetApplicablePolicyRequirements2XxResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_access_package_get_applicable_policy_requirements(connection, access_package_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/getApplicablePolicyRequirements")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceEntitlementManagementAccessPackagesAccessPackageGetApplicablePolicyRequirements2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  In Microsoft Entra Entitlement Management, cancel accessPackageAssignmentRequest objects that are in a cancellable state: accepted, pendingApproval, pendingNotBefore, pendingApprovalEscalated. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_request_id` (String.t): The unique identifier of accessPackageAssignmentRequest
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_requests_access_package_assignment_request_cancel(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_requests_access_package_assignment_request_cancel(connection, access_package_assignment_request_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests/#{access_package_assignment_request_id}/cancel")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reprocess
  In Microsoft Entra entitlement management, callers can automatically retry a user's request for access to an access package. It's performed on an accessPackageAssignmentRequest object whose requestState is in a DeliveryFailed or PartiallyDelivered state.  You can only reprocess a request within 14 days from the time the original request was completed. For requests completed more than 14 days, you will need to ask the users to cancel the request(s) and make a new request in the MyAccess portal. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_request_id` (String.t): The unique identifier of accessPackageAssignmentRequest
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_requests_access_package_assignment_request_reprocess(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_requests_access_package_assignment_request_reprocess(connection, access_package_assignment_request_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests/#{access_package_assignment_request_id}/reprocess")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  In Microsoft Entra entitlement management, when an access package policy has been enabled to call out a custom extension and the request processing is waiting for the callback from the customer, the customer can initiate a resume action. It is performed on an accessPackageAssignmentRequest object whose requestStatus is in a WaitingForCallback state. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_request_id` (String.t): The unique identifier of accessPackageAssignmentRequest
  - `identity_governance_entitlement_management_assignment_requests_access_package_assignment_request_resume_request` (IdentityGovernanceEntitlementManagementAssignmentRequestsAccessPackageAssignmentRequestResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_requests_access_package_assignment_request_resume(Tesla.Env.client, String.t, MicrosoftGraph.Model.IdentityGovernanceEntitlementManagementAssignmentRequestsAccessPackageAssignmentRequestResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_requests_access_package_assignment_request_resume(connection, access_package_assignment_request_id, identity_governance_entitlement_management_assignment_requests_access_package_assignment_request_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests/#{access_package_assignment_request_id}/resume")
      |> add_param(:body, :body, identity_governance_entitlement_management_assignment_requests_access_package_assignment_request_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reprocess
  In Microsoft Entra entitlement management, callers can automatically reevaluate and enforce an accessPackageAssignment object of a user’s assignments for a specific access package. The state of the access package assignment must be Delivered for the administrator to reprocess the user's assignment. Only admins with the Access Package Assignment Manager role, or higher, in Microsoft Entra entitlement management can perform this action. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_id` (String.t): The unique identifier of accessPackageAssignment
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignments_access_package_assignment_reprocess(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignments_access_package_assignment_reprocess(connection, access_package_assignment_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/assignments/#{access_package_assignment_id}/reprocess")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action activate
  Run a workflow object on-demand. You can run any workflow on-demand, including scheduled workflows. Workflows created from the 'Real-time employee termination' template are run on-demand only. When you run a workflow on demand, the tasks are executed regardless of whether the user state matches the scope and trigger execution conditions. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_activate_request` (IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowActivateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_activate(Tesla.Env.client, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowActivateRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_activate(connection, workflow_id, identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_activate_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/microsoft.graph.identityGovernance.activate")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_activate_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createNewVersion
  Create a new version of the workflow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `identity_governance_lifecycle_workflows_workflows_workflow_create_new_version_request` (IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_create_new_version(Tesla.Env.client, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_create_new_version(connection, workflow_id, identity_governance_lifecycle_workflows_workflows_workflow_create_new_version_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/microsoft.graph.identityGovernance.createNewVersion")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflows_workflow_create_new_version_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restore
  Restore a workflow that has been deleted. You can only restore a workflow that was deleted within the last 30 days before Microsoft Entra ID automatically permanently deletes it. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_restore(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_restore(connection, workflow_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/microsoft.graph.identityGovernance.restore")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_runs_run_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_runs_run_task_processing_results_task_processing_result_resume(connection, workflow_id, run_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_runs_run_user_processing_results_user_processing_result_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_runs_run_user_processing_results_user_processing_result_task_processing_results_task_processing_result_resume(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_task_reports_task_report_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_task_reports_task_report_task_processing_results_task_processing_result_resume(connection, workflow_id, task_report_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_tasks_task_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_tasks_task_task_processing_results_task_processing_result_resume(connection, workflow_id, task_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_user_processing_results_user_processing_result_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_user_processing_results_user_processing_result_task_processing_results_task_processing_result_resume(connection, workflow_id, user_processing_result_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_versions_workflow_version_tasks_task_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, integer(), String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_versions_workflow_version_tasks_task_task_processing_results_task_processing_result_resume(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/deletedItems/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_template_id` (String.t): The unique identifier of workflowTemplate
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume(connection, workflow_template_id, task_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflowTemplates/#{workflow_template_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action activate
  Run a workflow object on-demand. You can run any workflow on-demand, including scheduled workflows. Workflows created from the 'Real-time employee termination' template are run on-demand only. When you run a workflow on demand, the tasks are executed regardless of whether the user state matches the scope and trigger execution conditions. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_activate_request` (IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowActivateRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_activate(Tesla.Env.client, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowActivateRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_activate(connection, workflow_id, identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_activate_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/microsoft.graph.identityGovernance.activate")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_deleted_items_workflows_workflow_activate_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createNewVersion
  Create a new version of the workflow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `identity_governance_lifecycle_workflows_workflows_workflow_create_new_version_request` (IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_create_new_version(Tesla.Env.client, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_create_new_version(connection, workflow_id, identity_governance_lifecycle_workflows_workflows_workflow_create_new_version_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/microsoft.graph.identityGovernance.createNewVersion")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflows_workflow_create_new_version_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restore
  Restore a workflow that has been deleted. You can only restore a workflow that was deleted within the last 30 days before Microsoft Entra ID automatically permanently deletes it. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_restore(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_restore(connection, workflow_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/microsoft.graph.identityGovernance.restore")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowsWorkflowCreateNewVersionRequestWorkflow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_runs_run_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_runs_run_task_processing_results_task_processing_result_resume(connection, workflow_id, run_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `run_id` (String.t): The unique identifier of run
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_runs_run_user_processing_results_user_processing_result_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_runs_run_user_processing_results_user_processing_result_task_processing_results_task_processing_result_resume(connection, workflow_id, run_id, user_processing_result_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/runs/#{run_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_report_id` (String.t): The unique identifier of taskReport
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_task_reports_task_report_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_task_reports_task_report_task_processing_results_task_processing_result_resume(connection, workflow_id, task_report_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/taskReports/#{task_report_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_tasks_task_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_tasks_task_task_processing_results_task_processing_result_resume(connection, workflow_id, task_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `user_processing_result_id` (String.t): The unique identifier of userProcessingResult
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_user_processing_results_user_processing_result_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_user_processing_results_user_processing_result_task_processing_results_task_processing_result_resume(connection, workflow_id, user_processing_result_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/userProcessingResults/#{user_processing_result_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resume
  Resume a task processing result that's inProgress. In the default case an Azure Logic Apps system-assigned managed identity calls this API. For more information, see: Lifecycle Workflows extensibility approach. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `workflow_id` (String.t): The unique identifier of workflow
  - `workflow_version_version_number` (integer()): The unique identifier of workflowVersion
  - `task_id` (String.t): The unique identifier of task
  - `task_processing_result_id` (String.t): The unique identifier of taskProcessingResult
  - `identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request` (IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_lifecycle_workflows_workflows_workflow_versions_workflow_version_tasks_task_task_processing_results_task_processing_result_resume(Tesla.Env.client, String.t, integer(), String.t, String.t, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsWorkflowTemplatesWorkflowTemplateTasksTaskTaskProcessingResultsTaskProcessingResultResumeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_lifecycle_workflows_workflows_workflow_versions_workflow_version_tasks_task_task_processing_results_task_processing_result_resume(connection, workflow_id, workflow_version_version_number, task_id, task_processing_result_id, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/lifecycleWorkflows/workflows/#{workflow_id}/versions/#{workflow_version_version_number}/tasks/#{task_id}/taskProcessingResults/#{task_processing_result_id}/microsoft.graph.identityGovernance.resume")
      |> add_param(:body, :body, identity_governance_lifecycle_workflows_workflow_templates_workflow_template_tasks_task_task_processing_results_task_processing_result_resume_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  Cancel an access assignment request to a group whose membership and ownership are governed by PIM. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_requests_privileged_access_group_assignment_schedule_request_cancel(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_requests_privileged_access_group_assignment_schedule_request_cancel(connection, privileged_access_group_assignment_schedule_request_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/#{privileged_access_group_assignment_schedule_request_id}/cancel")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  Cancel an eligibility assignment request to a group whose membership and ownership are governed by PIM. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_requests_privileged_access_group_eligibility_schedule_request_cancel(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_requests_privileged_access_group_eligibility_schedule_request_cancel(connection, privileged_access_group_eligibility_schedule_request_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests/#{privileged_access_group_eligibility_schedule_request_id}/cancel")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
