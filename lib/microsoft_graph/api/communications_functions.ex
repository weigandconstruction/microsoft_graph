# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.CommunicationsFunctions do
  @moduledoc """
  API calls for all endpoints tagged `CommunicationsFunctions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke function getDirectRoutingCalls

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `from_date_time` (DateTime.t): Usage: fromDateTime={fromDateTime}
  - `to_date_time` (DateTime.t): Usage: toDateTime={toDateTime}
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CommunicationsCallRecordsGetDirectRoutingCalls2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec communications_call_records_get_direct_routing_calls(Tesla.Env.client, DateTime.t, DateTime.t, keyword()) :: {:ok, MicrosoftGraph.Model.CommunicationsCallRecordsGetDirectRoutingCalls2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def communications_call_records_get_direct_routing_calls(connection, from_date_time, to_date_time, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/communications/callRecords/microsoft.graph.callRecords.getDirectRoutingCalls(fromDateTime&#x3D;#{from_date_time},toDateTime&#x3D;#{to_date_time})")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CommunicationsCallRecordsGetDirectRoutingCalls2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getPstnCalls

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `from_date_time` (DateTime.t): Usage: fromDateTime={fromDateTime}
  - `to_date_time` (DateTime.t): Usage: toDateTime={toDateTime}
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CommunicationsCallRecordsGetPstnCalls2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec communications_call_records_get_pstn_calls(Tesla.Env.client, DateTime.t, DateTime.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.CommunicationsCallRecordsGetPstnCalls2XxResponse.t} | {:error, Tesla.Env.t}
  def communications_call_records_get_pstn_calls(connection, from_date_time, to_date_time, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/communications/callRecords/microsoft.graph.callRecords.getPstnCalls(fromDateTime&#x3D;#{from_date_time},toDateTime&#x3D;#{to_date_time})")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CommunicationsCallRecordsGetPstnCalls2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function getVirtualAppointmentJoinWebUrl

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `online_meeting_id` (String.t): The unique identifier of onlineMeeting
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec communications_online_meetings_online_meeting_get_virtual_appointment_join_web_url(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t} | {:error, Tesla.Env.t}
  def communications_online_meetings_online_meeting_get_virtual_appointment_join_web_url(connection, online_meeting_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/communications/onlineMeetings/#{online_meeting_id}/getVirtualAppointmentJoinWebUrl()")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
