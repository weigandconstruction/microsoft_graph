# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceManagementActions do
  @moduledoc """
  API calls for all endpoints tagged `DeviceManagementActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action assign
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_management_device_compliance_policies_device_compliance_policy_assign_request` (DeviceManagementDeviceCompliancePoliciesDeviceCompliancePolicyAssignRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDeviceCompliancePolicyAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_device_compliance_policy_assign(Tesla.Env.client, String.t, MicrosoftGraph.Model.DeviceManagementDeviceCompliancePoliciesDeviceCompliancePolicyAssignRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfDeviceCompliancePolicyAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_device_compliance_policy_assign(connection, device_compliance_policy_id, device_management_device_compliance_policies_device_compliance_policy_assign_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/assign")
      |> add_param(:body, :body, device_management_device_compliance_policies_device_compliance_policy_assign_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDeviceCompliancePolicyAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action scheduleActionsForRules
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_management_device_compliance_policies_device_compliance_policy_schedule_actions_for_rules_request` (DeviceManagementDeviceCompliancePoliciesDeviceCompliancePolicyScheduleActionsForRulesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_device_compliance_policy_schedule_actions_for_rules(Tesla.Env.client, String.t, MicrosoftGraph.Model.DeviceManagementDeviceCompliancePoliciesDeviceCompliancePolicyScheduleActionsForRulesRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_device_compliance_policy_schedule_actions_for_rules(connection, device_compliance_policy_id, device_management_device_compliance_policies_device_compliance_policy_schedule_actions_for_rules_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduleActionsForRules")
      |> add_param(:body, :body, device_management_device_compliance_policies_device_compliance_policy_schedule_actions_for_rules_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action assign
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `device_management_device_configurations_device_configuration_assign_request` (DeviceManagementDeviceConfigurationsDeviceConfigurationAssignRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDeviceConfigurationAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_device_configuration_assign(Tesla.Env.client, String.t, MicrosoftGraph.Model.DeviceManagementDeviceConfigurationsDeviceConfigurationAssignRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfDeviceConfigurationAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_configurations_device_configuration_assign(connection, device_configuration_id, device_management_device_configurations_device_configuration_assign_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceConfigurations/#{device_configuration_id}/assign")
      |> add_param(:body, :body, device_management_device_configurations_device_configuration_assign_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDeviceConfigurationAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action assign
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_enrollment_configuration_id` (String.t): The unique identifier of deviceEnrollmentConfiguration
  - `device_management_device_enrollment_configurations_device_enrollment_configuration_assign_request` (DeviceManagementDeviceEnrollmentConfigurationsDeviceEnrollmentConfigurationAssignRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_enrollment_configurations_device_enrollment_configuration_assign(Tesla.Env.client, String.t, MicrosoftGraph.Model.DeviceManagementDeviceEnrollmentConfigurationsDeviceEnrollmentConfigurationAssignRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_enrollment_configurations_device_enrollment_configuration_assign(connection, device_enrollment_configuration_id, device_management_device_enrollment_configurations_device_enrollment_configuration_assign_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/#{device_enrollment_configuration_id}/assign")
      |> add_param(:body, :body, device_management_device_enrollment_configurations_device_enrollment_configuration_assign_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setPriority
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_enrollment_configuration_id` (String.t): The unique identifier of deviceEnrollmentConfiguration
  - `device_management_device_enrollment_configurations_device_enrollment_configuration_set_priority_request` (DeviceManagementDeviceEnrollmentConfigurationsDeviceEnrollmentConfigurationSetPriorityRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_enrollment_configurations_device_enrollment_configuration_set_priority(Tesla.Env.client, String.t, MicrosoftGraph.Model.DeviceManagementDeviceEnrollmentConfigurationsDeviceEnrollmentConfigurationSetPriorityRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_enrollment_configurations_device_enrollment_configuration_set_priority(connection, device_enrollment_configuration_id, device_management_device_enrollment_configurations_device_enrollment_configuration_set_priority_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceEnrollmentConfigurations/#{device_enrollment_configuration_id}/setPriority")
      |> add_param(:body, :body, device_management_device_enrollment_configurations_device_enrollment_configuration_set_priority_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action terminate
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_partner_id` (String.t): The unique identifier of deviceManagementPartner
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_management_partners_device_management_partner_terminate(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_management_partners_device_management_partner_terminate(connection, device_management_partner_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceManagementPartners/#{device_management_partner_id}/terminate")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sync
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_exchange_connector_id` (String.t): The unique identifier of deviceManagementExchangeConnector
  - `device_management_exchange_connectors_device_management_exchange_connector_sync_request` (DeviceManagementExchangeConnectorsDeviceManagementExchangeConnectorSyncRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_exchange_connectors_device_management_exchange_connector_sync(Tesla.Env.client, String.t, MicrosoftGraph.Model.DeviceManagementExchangeConnectorsDeviceManagementExchangeConnectorSyncRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_exchange_connectors_device_management_exchange_connector_sync(connection, device_management_exchange_connector_id, device_management_exchange_connectors_device_management_exchange_connector_sync_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/exchangeConnectors/#{device_management_exchange_connector_id}/sync")
      |> add_param(:body, :body, device_management_exchange_connectors_device_management_exchange_connector_sync_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action import
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_imported_windows_autopilot_device_identities_import_request` (DeviceManagementImportedWindowsAutopilotDeviceIdentitiesImportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfImportedWindowsAutopilotDeviceIdentity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_imported_windows_autopilot_device_identities_import(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementImportedWindowsAutopilotDeviceIdentitiesImportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.CollectionOfImportedWindowsAutopilotDeviceIdentity.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_imported_windows_autopilot_device_identities_import(connection, device_management_imported_windows_autopilot_device_identities_import_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/importedWindowsAutopilotDeviceIdentities/import")
      |> add_param(:body, :body, device_management_imported_windows_autopilot_device_identities_import_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfImportedWindowsAutopilotDeviceIdentity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action bypassActivationLock
  Bypass activation lock

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_bypass_activation_lock(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_bypass_activation_lock(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/bypassActivationLock")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cleanWindowsDevice
  Clean Windows device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_management_managed_devices_managed_device_clean_windows_device_request` (DeviceManagementManagedDevicesManagedDeviceCleanWindowsDeviceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_clean_windows_device(Tesla.Env.client, String.t, MicrosoftGraph.Model.DeviceManagementManagedDevicesManagedDeviceCleanWindowsDeviceRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_clean_windows_device(connection, managed_device_id, device_management_managed_devices_managed_device_clean_windows_device_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/cleanWindowsDevice")
      |> add_param(:body, :body, device_management_managed_devices_managed_device_clean_windows_device_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action deleteUserFromSharedAppleDevice
  Delete user from shared Apple device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `users_user_managed_devices_managed_device_delete_user_from_shared_apple_device_request` (UsersUserManagedDevicesManagedDeviceDeleteUserFromSharedAppleDeviceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_delete_user_from_shared_apple_device(Tesla.Env.client, String.t, MicrosoftGraph.Model.UsersUserManagedDevicesManagedDeviceDeleteUserFromSharedAppleDeviceRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_delete_user_from_shared_apple_device(connection, managed_device_id, users_user_managed_devices_managed_device_delete_user_from_shared_apple_device_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/deleteUserFromSharedAppleDevice")
      |> add_param(:body, :body, users_user_managed_devices_managed_device_delete_user_from_shared_apple_device_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action disableLostMode
  Disable lost mode

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_disable_lost_mode(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_disable_lost_mode(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/disableLostMode")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action locateDevice
  Locate a device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_locate_device(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_locate_device(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/locateDevice")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createDownloadUrl

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_log_collection_response_id` (String.t): The unique identifier of deviceLogCollectionResponse
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_log_collection_requests_device_log_collection_response_create_download_url(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_log_collection_requests_device_log_collection_response_create_download_url(connection, managed_device_id, device_log_collection_response_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/logCollectionRequests/#{device_log_collection_response_id}/createDownloadUrl")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action logoutSharedAppleDeviceActiveUser
  Logout shared Apple device active user

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_logout_shared_apple_device_active_user(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_logout_shared_apple_device_active_user(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/logoutSharedAppleDeviceActiveUser")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action rebootNow
  Reboot device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_reboot_now(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_reboot_now(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/rebootNow")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action recoverPasscode
  Recover passcode

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_recover_passcode(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_recover_passcode(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/recoverPasscode")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action remoteLock
  Remote lock

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_remote_lock(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_remote_lock(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/remoteLock")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action requestRemoteAssistance
  Request remote assistance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_request_remote_assistance(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_request_remote_assistance(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/requestRemoteAssistance")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resetPasscode
  Reset passcode

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_reset_passcode(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_reset_passcode(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/resetPasscode")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action retire
  Retire a device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_retire(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_retire(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/retire")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action shutDown
  Shut down device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_shut_down(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_shut_down(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/shutDown")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action syncDevice
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_sync_device(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_sync_device(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/syncDevice")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action updateWindowsDeviceAccount
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `users_user_managed_devices_managed_device_update_windows_device_account_request` (UsersUserManagedDevicesManagedDeviceUpdateWindowsDeviceAccountRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_update_windows_device_account(Tesla.Env.client, String.t, MicrosoftGraph.Model.UsersUserManagedDevicesManagedDeviceUpdateWindowsDeviceAccountRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_update_windows_device_account(connection, managed_device_id, users_user_managed_devices_managed_device_update_windows_device_account_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/updateWindowsDeviceAccount")
      |> add_param(:body, :body, users_user_managed_devices_managed_device_update_windows_device_account_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action windowsDefenderScan
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `users_user_managed_devices_managed_device_windows_defender_scan_request` (UsersUserManagedDevicesManagedDeviceWindowsDefenderScanRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_windows_defender_scan(Tesla.Env.client, String.t, MicrosoftGraph.Model.UsersUserManagedDevicesManagedDeviceWindowsDefenderScanRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_windows_defender_scan(connection, managed_device_id, users_user_managed_devices_managed_device_windows_defender_scan_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/windowsDefenderScan")
      |> add_param(:body, :body, users_user_managed_devices_managed_device_windows_defender_scan_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action windowsDefenderUpdateSignatures
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_windows_defender_update_signatures(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_windows_defender_update_signatures(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/windowsDefenderUpdateSignatures")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action wipe
  Wipe a device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `users_user_managed_devices_managed_device_wipe_request` (UsersUserManagedDevicesManagedDeviceWipeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_managed_devices_managed_device_wipe(Tesla.Env.client, String.t, MicrosoftGraph.Model.UsersUserManagedDevicesManagedDeviceWipeRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_managed_devices_managed_device_wipe(connection, managed_device_id, users_user_managed_devices_managed_device_wipe_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/managedDevices/#{managed_device_id}/wipe")
      |> add_param(:body, :body, users_user_managed_devices_managed_device_wipe_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createDownloadUrl
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_troubleshooting_event_id` (String.t): The unique identifier of mobileAppTroubleshootingEvent
  - `app_log_collection_request_id` (String.t): The unique identifier of appLogCollectionRequest
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementMobileAppTroubleshootingEventsMobileAppTroubleshootingEventAppLogCollectionRequestsAppLogCollectionRequestCreateDownloadUrl2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_mobile_app_troubleshooting_events_mobile_app_troubleshooting_event_app_log_collection_requests_app_log_collection_request_create_download_url(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementMobileAppTroubleshootingEventsMobileAppTroubleshootingEventAppLogCollectionRequestsAppLogCollectionRequestCreateDownloadUrl2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_mobile_app_troubleshooting_events_mobile_app_troubleshooting_event_app_log_collection_requests_app_log_collection_request_create_download_url(connection, mobile_app_troubleshooting_event_id, app_log_collection_request_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents/#{mobile_app_troubleshooting_event_id}/appLogCollectionRequests/#{app_log_collection_request_id}/createDownloadUrl")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementMobileAppTroubleshootingEventsMobileAppTroubleshootingEventAppLogCollectionRequestsAppLogCollectionRequestCreateDownloadUrl2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sendTestMessage
  Sends test message using the specified notificationMessageTemplate in the default locale

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notification_message_template_id` (String.t): The unique identifier of notificationMessageTemplate
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_notification_message_templates_notification_message_template_send_test_message(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_notification_message_templates_notification_message_template_send_test_message(connection, notification_message_template_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/notificationMessageTemplates/#{notification_message_template_id}/sendTestMessage")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action beginOnboarding
  A request to start onboarding.  Must be coupled with the appropriate TeamViewer account information

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `remote_assistance_partner_id` (String.t): The unique identifier of remoteAssistancePartner
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_remote_assistance_partners_remote_assistance_partner_begin_onboarding(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_remote_assistance_partners_remote_assistance_partner_begin_onboarding(connection, remote_assistance_partner_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/remoteAssistancePartners/#{remote_assistance_partner_id}/beginOnboarding")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action disconnect
  A request to remove the active TeamViewer connector

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `remote_assistance_partner_id` (String.t): The unique identifier of remoteAssistancePartner
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_remote_assistance_partners_remote_assistance_partner_disconnect(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_remote_assistance_partners_remote_assistance_partner_disconnect(connection, remote_assistance_partner_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/remoteAssistancePartners/#{remote_assistance_partner_id}/disconnect")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getCachedReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_cached_report_request` (DeviceManagementReportsGetCachedReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_cached_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetCachedReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_cached_report(connection, device_management_reports_get_cached_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getCachedReport")
      |> add_param(:body, :body, device_management_reports_get_cached_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getCompliancePolicyNonComplianceReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_compliance_policy_non_compliance_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_compliance_policy_non_compliance_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getCompliancePolicyNonComplianceReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getCompliancePolicyNonComplianceSummaryReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_compliance_policy_non_compliance_summary_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_compliance_policy_non_compliance_summary_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getCompliancePolicyNonComplianceSummaryReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getComplianceSettingNonComplianceReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_compliance_setting_non_compliance_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_compliance_setting_non_compliance_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getComplianceSettingNonComplianceReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getConfigurationPolicyNonComplianceReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_configuration_policy_non_compliance_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_configuration_policy_non_compliance_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getConfigurationPolicyNonComplianceReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getConfigurationPolicyNonComplianceSummaryReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_configuration_policy_non_compliance_summary_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_configuration_policy_non_compliance_summary_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getConfigurationPolicyNonComplianceSummaryReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getConfigurationSettingNonComplianceReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_configuration_setting_non_compliance_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_configuration_setting_non_compliance_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getConfigurationSettingNonComplianceReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getDeviceManagementIntentPerSettingContributingProfiles
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_device_management_intent_per_setting_contributing_profiles(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_device_management_intent_per_setting_contributing_profiles(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getDeviceManagementIntentPerSettingContributingProfiles")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getDeviceManagementIntentSettingsReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_device_management_intent_settings_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_device_management_intent_settings_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getDeviceManagementIntentSettingsReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getDeviceNonComplianceReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_device_non_compliance_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_device_non_compliance_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getDeviceNonComplianceReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getDevicesWithoutCompliancePolicyReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_devices_without_compliance_policy_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_devices_without_compliance_policy_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getDevicesWithoutCompliancePolicyReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getHistoricalReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_historical_report_request` (DeviceManagementReportsGetHistoricalReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_historical_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetHistoricalReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_historical_report(connection, device_management_reports_get_historical_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getHistoricalReport")
      |> add_param(:body, :body, device_management_reports_get_historical_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getNoncompliantDevicesAndSettingsReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_noncompliant_devices_and_settings_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_noncompliant_devices_and_settings_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getNoncompliantDevicesAndSettingsReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getPolicyNonComplianceMetadata
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_policy_non_compliance_metadata(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_policy_non_compliance_metadata(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getPolicyNonComplianceMetadata")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getPolicyNonComplianceReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_policy_non_compliance_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_policy_non_compliance_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getPolicyNonComplianceReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getPolicyNonComplianceSummaryReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_policy_non_compliance_summary_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_policy_non_compliance_summary_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getPolicyNonComplianceSummaryReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getReportFilters
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_report_filters(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_report_filters(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getReportFilters")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getSettingNonComplianceReport
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_management_reports_get_devices_without_compliance_policy_report_request` (DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_reports_get_setting_non_compliance_report(Tesla.Env.client, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_reports_get_setting_non_compliance_report(connection, device_management_reports_get_devices_without_compliance_policy_report_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/reports/getSettingNonComplianceReport")
      |> add_param(:body, :body, device_management_reports_get_devices_without_compliance_policy_report_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DeviceManagementReportsGetDevicesWithoutCompliancePolicyReport2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action assignUserToDevice
  Assigns user to Autopilot devices.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_autopilot_device_identity_id` (String.t): The unique identifier of windowsAutopilotDeviceIdentity
  - `device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_assign_user_to_device_request` (DeviceManagementWindowsAutopilotDeviceIdentitiesWindowsAutopilotDeviceIdentityAssignUserToDeviceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_assign_user_to_device(Tesla.Env.client, String.t, MicrosoftGraph.Model.DeviceManagementWindowsAutopilotDeviceIdentitiesWindowsAutopilotDeviceIdentityAssignUserToDeviceRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_assign_user_to_device(connection, windows_autopilot_device_identity_id, device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_assign_user_to_device_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/windowsAutopilotDeviceIdentities/#{windows_autopilot_device_identity_id}/assignUserToDevice")
      |> add_param(:body, :body, device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_assign_user_to_device_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unassignUserFromDevice
  Unassigns the user from an Autopilot device.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_autopilot_device_identity_id` (String.t): The unique identifier of windowsAutopilotDeviceIdentity
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_unassign_user_from_device(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_unassign_user_from_device(connection, windows_autopilot_device_identity_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/windowsAutopilotDeviceIdentities/#{windows_autopilot_device_identity_id}/unassignUserFromDevice")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action updateDeviceProperties
  Updates properties on Autopilot devices.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `windows_autopilot_device_identity_id` (String.t): The unique identifier of windowsAutopilotDeviceIdentity
  - `device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_update_device_properties_request` (DeviceManagementWindowsAutopilotDeviceIdentitiesWindowsAutopilotDeviceIdentityUpdateDevicePropertiesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_update_device_properties(Tesla.Env.client, String.t, MicrosoftGraph.Model.DeviceManagementWindowsAutopilotDeviceIdentitiesWindowsAutopilotDeviceIdentityUpdateDevicePropertiesRequest.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_update_device_properties(connection, windows_autopilot_device_identity_id, device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_update_device_properties_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/windowsAutopilotDeviceIdentities/#{windows_autopilot_device_identity_id}/updateDeviceProperties")
      |> add_param(:body, :body, device_management_windows_autopilot_device_identities_windows_autopilot_device_identity_update_device_properties_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
