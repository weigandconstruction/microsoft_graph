# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.GroupsActions do
  @moduledoc """
  API calls for all endpoints tagged `GroupsActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action getAvailableExtensionProperties
  Return all directory extension definitions that have been registered in a directory, including through multi-tenant apps. The following entities support extension properties: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `directory_deleted_items_get_available_extension_properties_request` (DirectoryDeletedItemsGetAvailableExtensionPropertiesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfExtensionProperty.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_get_available_extension_properties(
          Tesla.Env.client(),
          MicrosoftGraph.Model.DirectoryDeletedItemsGetAvailableExtensionPropertiesRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfExtensionProperty.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_get_available_extension_properties(
        connection,
        directory_deleted_items_get_available_extension_properties_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/getAvailableExtensionProperties")
      |> add_param(
        :body,
        :body,
        directory_deleted_items_get_available_extension_properties_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfExtensionProperty},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getByIds
  Return the directory objects specified in a list of IDs. Only a subset of user properties are returned by default in v1.0. Some common uses for this function are to: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contacts_get_by_ids_request` (ContactsGetByIdsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_get_by_ids(
          Tesla.Env.client(),
          MicrosoftGraph.Model.ContactsGetByIdsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.CollectionOfDirectoryObject.t()}
          | {:error, Tesla.Env.t()}
  def groups_get_by_ids(connection, contacts_get_by_ids_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/getByIds")
      |> add_param(:body, :body, contacts_get_by_ids_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addFavorite
  Add the group to the list of the current user's favorite groups. Supported for Microsoft 365 groups only. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_add_favorite(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_add_favorite(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/addFavorite")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action assignLicense
  Add or remove licenses on the group. Licenses assigned to the group will be assigned to all users in the group. To learn more about group-based licensing, see What is group-based licensing in Microsoft Entra ID. To get the subscriptions available in the directory, perform a GET subscribedSkus request. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `users_user_assign_license_request` (UsersUserAssignLicenseRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfGroupAllOfValueInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_assign_license(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserAssignLicenseRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfGroupAllOfValueInner.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_assign_license(
        connection,
        group_id,
        users_user_assign_license_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/assignLicense")
      |> add_param(:body, :body, users_user_assign_license_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfGroupAllOfValueInner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_accept(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/calendarView/#{event_id}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_attachments_create_upload_session(
        connection,
        group_id,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/calendarView/#{event_id}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_cancel(
        connection,
        group_id,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/calendarView/#{event_id}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_decline(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/calendarView/#{event_id}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_dismiss_reminder(
        connection,
        group_id,
        event_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/calendarView/#{event_id}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_forward(
        connection,
        group_id,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/calendarView/#{event_id}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_instances_event_accept(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/calendarView/#{event_id}/instances/#{event_id1}/accept"
      )
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_instances_event_attachments_create_upload_session(
        connection,
        group_id,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/calendarView/#{event_id}/instances/#{event_id1}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_instances_event_cancel(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/calendarView/#{event_id}/instances/#{event_id1}/cancel"
      )
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_instances_event_decline(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/calendarView/#{event_id}/instances/#{event_id1}/decline"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_instances_event_dismiss_reminder(
        connection,
        group_id,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/calendarView/#{event_id}/instances/#{event_id1}/dismissReminder"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_instances_event_forward(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/calendarView/#{event_id}/instances/#{event_id1}/forward"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_instances_event_snooze_reminder(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/calendarView/#{event_id}/instances/#{event_id1}/snoozeReminder"
      )
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_instances_event_tentatively_accept(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/calendarView/#{event_id}/instances/#{event_id1}/tentativelyAccept"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_snooze_reminder(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/calendarView/#{event_id}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_calendar_view_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_calendar_view_event_tentatively_accept(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/calendarView/#{event_id}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_accept(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_attachments_create_upload_session(
        connection,
        group_id,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/attachments/createUploadSession")
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_cancel(
        connection,
        group_id,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_decline(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_dismiss_reminder(
        connection,
        group_id,
        event_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_forward(
        connection,
        group_id,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_instances_event_accept(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/instances/#{event_id1}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_instances_event_attachments_create_upload_session(
        connection,
        group_id,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/events/#{event_id}/instances/#{event_id1}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_instances_event_cancel(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/instances/#{event_id1}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_instances_event_decline(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/instances/#{event_id1}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_instances_event_dismiss_reminder(
        connection,
        group_id,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/events/#{event_id}/instances/#{event_id1}/dismissReminder"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_instances_event_forward(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/instances/#{event_id1}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_instances_event_snooze_reminder(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/events/#{event_id}/instances/#{event_id1}/snoozeReminder"
      )
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_instances_event_tentatively_accept(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendar/events/#{event_id}/instances/#{event_id1}/tentativelyAccept"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_snooze_reminder(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_events_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_events_event_tentatively_accept(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/events/#{event_id}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getSchedule
  Get the free/busy availability information for a collection of users, distributions lists, or resources (rooms or equipment) for a specified time period. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarGetScheduleRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_get_schedule(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetScheduleRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_get_schedule(
        connection,
        group_id,
        me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendar/getSchedule")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_accept(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_attachments_create_upload_session(
        connection,
        group_id,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/attachments/createUploadSession")
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_cancel(
        connection,
        group_id,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_decline(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_dismiss_reminder(
        connection,
        group_id,
        event_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_forward(
        connection,
        group_id,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_instances_event_accept(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/instances/#{event_id1}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_instances_event_attachments_create_upload_session(
        connection,
        group_id,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendarView/#{event_id}/instances/#{event_id1}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_instances_event_cancel(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/instances/#{event_id1}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_instances_event_decline(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/instances/#{event_id1}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_instances_event_dismiss_reminder(
        connection,
        group_id,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendarView/#{event_id}/instances/#{event_id1}/dismissReminder"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_instances_event_forward(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/instances/#{event_id1}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_instances_event_snooze_reminder(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/instances/#{event_id1}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_instances_event_tentatively_accept(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/calendarView/#{event_id}/instances/#{event_id1}/tentativelyAccept"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_snooze_reminder(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_calendar_view_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_calendar_view_event_tentatively_accept(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/calendarView/#{event_id}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action checkGrantedPermissionsForApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfResourceSpecificPermissionGrant.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_check_granted_permissions_for_app(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.CollectionOfResourceSpecificPermissionGrant.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_check_granted_permissions_for_app(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/checkGrantedPermissionsForApp")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfResourceSpecificPermissionGrant},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action checkMemberGroups
  Check for membership in a specified list of group IDs, and return from that list those groups (identified by IDs) of which the specified user, group, service principal, organizational contact, device, or directory object is a member. This function is transitive. You can check up to a maximum of 20 groups per request. This function supports all groups provisioned in Microsoft Entra ID. Because Microsoft 365 groups cannot contain other groups, membership in a Microsoft 365 group is always direct. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `contracts_contract_check_member_groups_request` (ContractsContractCheckMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_check_member_groups(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ContractsContractCheckMemberGroupsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_check_member_groups(
        connection,
        group_id,
        contracts_contract_check_member_groups_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/checkMemberGroups")
      |> add_param(:body, :body, contracts_contract_check_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action checkMemberObjects

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `directory_role_templates_directory_role_template_check_member_objects_request` (DirectoryRoleTemplatesDirectoryRoleTemplateCheckMemberObjectsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_check_member_objects(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.DirectoryRoleTemplatesDirectoryRoleTemplateCheckMemberObjectsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_check_member_objects(
        connection,
        group_id,
        directory_role_templates_directory_role_template_check_member_objects_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/checkMemberObjects")
      |> add_param(
        :body,
        :body,
        directory_role_templates_directory_role_template_check_member_objects_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_id` (String.t): The unique identifier of conversation
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_conversations_conversation_threads_conversation_thread_posts_post_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_conversations_conversation_threads_conversation_thread_posts_post_attachments_create_upload_session(
        connection,
        group_id,
        conversation_id,
        conversation_thread_id,
        post_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/conversations/#{conversation_id}/threads/#{conversation_thread_id}/posts/#{post_id}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  Forward a post to a recipient. You can specify both the parent conversation and thread in the request,  or, you can specify just the parent thread without the parent conversation.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_id` (String.t): The unique identifier of conversation
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request` (GroupsGroupThreadsConversationThreadPostsPostInReplyToForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_conversations_conversation_threads_conversation_thread_posts_post_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupThreadsConversationThreadPostsPostInReplyToForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_conversations_conversation_threads_conversation_thread_posts_post_forward(
        connection,
        group_id,
        conversation_id,
        conversation_thread_id,
        post_id,
        groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/conversations/#{conversation_id}/threads/#{conversation_thread_id}/posts/#{post_id}/forward"
      )
      |> add_param(
        :body,
        :body,
        groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_id` (String.t): The unique identifier of conversation
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_conversations_conversation_threads_conversation_thread_posts_post_in_reply_to_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_conversations_conversation_threads_conversation_thread_posts_post_in_reply_to_attachments_create_upload_session(
        connection,
        group_id,
        conversation_id,
        conversation_thread_id,
        post_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/conversations/#{conversation_id}/threads/#{conversation_thread_id}/posts/#{post_id}/inReplyTo/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  Forward a post to a recipient. You can specify both the parent conversation and thread in the request,  or, you can specify just the parent thread without the parent conversation.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_id` (String.t): The unique identifier of conversation
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request` (GroupsGroupThreadsConversationThreadPostsPostInReplyToForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_conversations_conversation_threads_conversation_thread_posts_post_in_reply_to_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupThreadsConversationThreadPostsPostInReplyToForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_conversations_conversation_threads_conversation_thread_posts_post_in_reply_to_forward(
        connection,
        group_id,
        conversation_id,
        conversation_thread_id,
        post_id,
        groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/conversations/#{conversation_id}/threads/#{conversation_thread_id}/posts/#{post_id}/inReplyTo/forward"
      )
      |> add_param(
        :body,
        :body,
        groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reply
  Reply to a post and add a new post to the specified thread in a group conversation.  You can specify both the parent conversation and thread in the request, or, you can specify just the parent thread without the parent conversation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_id` (String.t): The unique identifier of conversation
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `groups_group_threads_conversation_thread_reply_request` (GroupsGroupThreadsConversationThreadReplyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_conversations_conversation_threads_conversation_thread_posts_post_in_reply_to_reply(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupThreadsConversationThreadReplyRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_conversations_conversation_threads_conversation_thread_posts_post_in_reply_to_reply(
        connection,
        group_id,
        conversation_id,
        conversation_thread_id,
        post_id,
        groups_group_threads_conversation_thread_reply_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/conversations/#{conversation_id}/threads/#{conversation_thread_id}/posts/#{post_id}/inReplyTo/reply"
      )
      |> add_param(:body, :body, groups_group_threads_conversation_thread_reply_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reply
  Reply to a post and add a new post to the specified thread in a group conversation.  You can specify both the parent conversation and thread in the request, or, you can specify just the parent thread without the parent conversation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_id` (String.t): The unique identifier of conversation
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `groups_group_threads_conversation_thread_reply_request` (GroupsGroupThreadsConversationThreadReplyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_conversations_conversation_threads_conversation_thread_posts_post_reply(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupThreadsConversationThreadReplyRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_conversations_conversation_threads_conversation_thread_posts_post_reply(
        connection,
        group_id,
        conversation_id,
        conversation_thread_id,
        post_id,
        groups_group_threads_conversation_thread_reply_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/conversations/#{conversation_id}/threads/#{conversation_thread_id}/posts/#{post_id}/reply"
      )
      |> add_param(:body, :body, groups_group_threads_conversation_thread_reply_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reply
  Reply to a thread in a group conversation and add a new post to it. You can specify the parent conversation  in the request, or, you can specify just the thread without the parent conversation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_id` (String.t): The unique identifier of conversation
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `groups_group_threads_conversation_thread_reply_request` (GroupsGroupThreadsConversationThreadReplyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_conversations_conversation_threads_conversation_thread_reply(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupThreadsConversationThreadReplyRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_conversations_conversation_threads_conversation_thread_reply(
        connection,
        group_id,
        conversation_id,
        conversation_thread_id,
        groups_group_threads_conversation_thread_reply_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/conversations/#{conversation_id}/threads/#{conversation_thread_id}/reply"
      )
      |> add_param(:body, :body, groups_group_threads_conversation_thread_reply_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_accept(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_attachments_create_upload_session(
        connection,
        group_id,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/attachments/createUploadSession")
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_cancel(
        connection,
        group_id,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_decline(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_dismiss_reminder(connection, group_id, event_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_forward(
        connection,
        group_id,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_instances_event_accept(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/instances/#{event_id1}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_instances_event_attachments_create_upload_session(
        connection,
        group_id,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/events/#{event_id}/instances/#{event_id1}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_instances_event_cancel(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/instances/#{event_id1}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_instances_event_decline(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/instances/#{event_id1}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_instances_event_dismiss_reminder(
        connection,
        group_id,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/instances/#{event_id1}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_instances_event_forward(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/instances/#{event_id1}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_instances_event_snooze_reminder(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/instances/#{event_id1}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_instances_event_tentatively_accept(
        connection,
        group_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/instances/#{event_id1}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_snooze_reminder(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_events_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_events_event_tentatively_accept(
        connection,
        group_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/events/#{event_id}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getMemberGroups
  Return all the group IDs for the groups that the specified user, group, service principal, organizational contact, device, or directory object is a member of. This function is transitive. This API returns up to 11,000 group IDs. If more than 11,000 results are available, it returns a 400 Bad Request error with the Directory_ResultSizeLimitExceeded error code. As a workaround, use the List group transitive memberOf API. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `contacts_org_contact_get_member_groups_request` (ContactsOrgContactGetMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_get_member_groups(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ContactsOrgContactGetMemberGroupsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_get_member_groups(
        connection,
        group_id,
        contacts_org_contact_get_member_groups_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/getMemberGroups")
      |> add_param(:body, :body, contacts_org_contact_get_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getMemberObjects
  Return all IDs for the groups, administrative units, and directory roles that a user, group, service principal, organizational contact, device, or directory object is a member of. This function is transitive. Note: Only users and role-enabled groups can be members of directory roles. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `contacts_org_contact_get_member_groups_request` (ContactsOrgContactGetMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_get_member_objects(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ContactsOrgContactGetMemberGroupsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_get_member_objects(
        connection,
        group_id,
        contacts_org_contact_get_member_groups_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/getMemberObjects")
      |> add_param(:body, :body, contacts_org_contact_get_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addGroup
  Adds specific groups to a lifecycle policy. This action limits the group lifecycle policy to a set of groups only if the managedGroupTypes property of groupLifecyclePolicy is set to Selected. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `group_lifecycle_policy_id` (String.t): The unique identifier of groupLifecyclePolicy
  - `group_lifecycle_policies_group_lifecycle_policy_add_group_request` (GroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveListContentTypesContentTypeIsPublished2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_group_lifecycle_policies_group_lifecycle_policy_add_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.DrivesDriveListContentTypesContentTypeIsPublished2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_group_lifecycle_policies_group_lifecycle_policy_add_group(
        connection,
        group_id,
        group_lifecycle_policy_id,
        group_lifecycle_policies_group_lifecycle_policy_add_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/groupLifecyclePolicies/#{group_lifecycle_policy_id}/addGroup")
      |> add_param(
        :body,
        :body,
        group_lifecycle_policies_group_lifecycle_policy_add_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveListContentTypesContentTypeIsPublished2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action removeGroup
  Removes a group from a lifecycle policy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `group_lifecycle_policy_id` (String.t): The unique identifier of groupLifecyclePolicy
  - `group_lifecycle_policies_group_lifecycle_policy_add_group_request` (GroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveListContentTypesContentTypeIsPublished2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_group_lifecycle_policies_group_lifecycle_policy_remove_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupLifecyclePoliciesGroupLifecyclePolicyAddGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.DrivesDriveListContentTypesContentTypeIsPublished2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_group_lifecycle_policies_group_lifecycle_policy_remove_group(
        connection,
        group_id,
        group_lifecycle_policy_id,
        group_lifecycle_policies_group_lifecycle_policy_add_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/groupLifecyclePolicies/#{group_lifecycle_policy_id}/removeGroup"
      )
      |> add_param(
        :body,
        :body,
        group_lifecycle_policies_group_lifecycle_policy_add_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.DrivesDriveListContentTypesContentTypeIsPublished2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getNotebookFromWebUrl
  Retrieve the properties and relationships of a notebook object by using its URL path. The location can be user notebooks on Microsoft 365, group notebooks, or SharePoint site-hosted team notebooks on Microsoft 365. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `users_user_onenote_notebooks_get_notebook_from_web_url_request` (UsersUserOnenoteNotebooksGetNotebookFromWebUrlRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrl2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_notebooks_get_notebook_from_web_url(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrlRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrl2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_notebooks_get_notebook_from_web_url(
        connection,
        group_id,
        users_user_onenote_notebooks_get_notebook_from_web_url_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/onenote/notebooks/getNotebookFromWebUrl")
      |> add_param(:body, :body, users_user_onenote_notebooks_get_notebook_from_web_url_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrl2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `notebook_id` (String.t): The unique identifier of notebook
  - `me_onenote_notebooks_notebook_copy_notebook_request` (MeOnenoteNotebooksNotebookCopyNotebookRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_notebooks_notebook_copy_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteNotebooksNotebookCopyNotebookRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_notebooks_notebook_copy_notebook(
        connection,
        group_id,
        notebook_id,
        me_onenote_notebooks_notebook_copy_notebook_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/onenote/notebooks/#{notebook_id}/copyNotebook")
      |> add_param(:body, :body, me_onenote_notebooks_notebook_copy_notebook_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        connection,
        group_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToNotebook"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        connection,
        group_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToSectionGroup"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        group_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        group_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(
        connection,
        group_id,
        notebook_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/copyToNotebook"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(
        connection,
        group_id,
        notebook_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/copyToSectionGroup"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        group_id,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        group_id,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_pages_onenote_page_copy_to_section(
        connection,
        group_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/onenote/pages/#{onenote_page_id}/copyToSection")
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_pages_onenote_page_onenote_patch_content(
        connection,
        group_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/onenote/pages/#{onenote_page_id}/onenotePatchContent")
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        connection,
        group_id,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToNotebook"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        connection,
        group_id,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToSectionGroup"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        group_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        group_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_sections_onenote_section_copy_to_notebook(
        connection,
        group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/onenote/sections/#{onenote_section_id}/copyToNotebook")
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_sections_onenote_section_copy_to_section_group(
        connection,
        group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/onenote/sections/#{onenote_section_id}/copyToSectionGroup")
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        group_id,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        group_id,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action removeFavorite
  Remove the group from the list of the current user's favorite groups. Supported for Microsoft 365 groups only. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_remove_favorite(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_remove_favorite(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/removeFavorite")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action renew
  Renews a group's expiration. When a group is renewed, the group expiration is extended by the number of days defined in the policy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_renew(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_renew(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/renew")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resetUnseenCount
  Reset the unseenCount of all the posts that the current user hasn't seen since their last visit. Supported for Microsoft 365 groups only. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_reset_unseen_count(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_reset_unseen_count(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/resetUnseenCount")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restore
  Restore a recently deleted application, group, servicePrincipal, administrative unit, or user object from deleted items. If an item was accidentally deleted, you can fully restore the item. However, security groups cannot be restored. A recently deleted item remains available for up to 30 days. After 30 days, the item is permanently deleted. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_restore(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_restore(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/restore")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action retryServiceProvisioning

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_retry_service_provisioning(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_retry_service_provisioning(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/retryServiceProvisioning")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Follow a user's site or multiple sites.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `groups_group_sites_remove_request` (GroupsGroupSitesRemoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfSite1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_add(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupSitesRemoveRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfSite1.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_add(connection, group_id, groups_group_sites_remove_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/add")
      |> add_param(:body, :body, groups_group_sites_remove_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfSite1},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action remove
  Unfollow a user's site or multiple sites.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `groups_group_sites_remove_request` (GroupsGroupSitesRemoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfSite1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_remove(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupSitesRemoveRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfSite1.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_remove(
        connection,
        group_id,
        groups_group_sites_remove_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/remove")
      |> add_param(:body, :body, groups_group_sites_remove_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfSite1},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addCopy
  Add a copy of a content type][contentType] from a [site][site] to a [list][list]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `sites_site_content_types_add_copy_request` (SitesSiteContentTypesAddCopyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_content_types_add_copy(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.SitesSiteContentTypesAddCopyRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_content_types_add_copy(
        connection,
        group_id,
        site_id,
        sites_site_content_types_add_copy_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/addCopy")
      |> add_param(:body, :body, sites_site_content_types_add_copy_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addCopyFromContentTypeHub
  Add or sync a copy of a published content type from the content type hub to a target site or a list. This method is part of the content type publishing changes to optimize the syncing of published content types to sites and lists, effectively switching from a 'push everywhere' to 'pull as needed' approach. The method allows users to pull content types directly from the content type hub to a site or list. For more information, see contentType: getCompatibleHubContentTypes and the blog post Syntex Product Updates – August 2021. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `sites_site_content_types_add_copy_from_content_type_hub_request` (SitesSiteContentTypesAddCopyFromContentTypeHubRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_content_types_add_copy_from_content_type_hub(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHubRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_content_types_add_copy_from_content_type_hub(
        connection,
        group_id,
        site_id,
        sites_site_content_types_add_copy_from_content_type_hub_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/addCopyFromContentTypeHub")
      |> add_param(:body, :body, sites_site_content_types_add_copy_from_content_type_hub_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action associateWithHubSites
  Associate a published content type][contentType] present in a content type hub with a list of hub sites. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request` (SitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_content_types_content_type_associate_with_hub_sites(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.SitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_content_types_content_type_associate_with_hub_sites(
        connection,
        group_id,
        site_id,
        content_type_id,
        sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/associateWithHubSites"
      )
      |> add_param(
        :body,
        :body,
        sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToDefaultContentLocation
  Copy a file to a default content location in a content type][contentType]. The file can then be added as a default file or template via a POST operation. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request` (GroupsGroupSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_content_types_content_type_copy_to_default_content_location(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_content_types_content_type_copy_to_default_content_location(
        connection,
        group_id,
        site_id,
        content_type_id,
        groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/copyToDefaultContentLocation"
      )
      |> add_param(
        :body,
        :body,
        groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action publish
  Publishes a contentType][] present in the content type hub site. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_content_types_content_type_publish(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_content_types_content_type_publish(
        connection,
        group_id,
        site_id,
        content_type_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/publish")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unpublish
  Unpublish a contentType][] from a content type hub site. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_content_types_content_type_unpublish(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_content_types_content_type_unpublish(
        connection,
        group_id,
        site_id,
        content_type_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/unpublish")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addCopy
  Add a copy of a content type][contentType] from a [site][site] to a [list][list]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `sites_site_content_types_add_copy_request` (SitesSiteContentTypesAddCopyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_lists_list_content_types_add_copy(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.SitesSiteContentTypesAddCopyRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_lists_list_content_types_add_copy(
        connection,
        group_id,
        site_id,
        list_id,
        sites_site_content_types_add_copy_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/addCopy")
      |> add_param(:body, :body, sites_site_content_types_add_copy_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addCopyFromContentTypeHub
  Add or sync a copy of a published content type from the content type hub to a target site or a list. This method is part of the content type publishing changes to optimize the syncing of published content types to sites and lists, effectively switching from a 'push everywhere' to 'pull as needed' approach. The method allows users to pull content types directly from the content type hub to a site or list. For more information, see contentType: getCompatibleHubContentTypes and the blog post Syntex Product Updates – August 2021. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `sites_site_content_types_add_copy_from_content_type_hub_request` (SitesSiteContentTypesAddCopyFromContentTypeHubRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_lists_list_content_types_add_copy_from_content_type_hub(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHubRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_lists_list_content_types_add_copy_from_content_type_hub(
        connection,
        group_id,
        site_id,
        list_id,
        sites_site_content_types_add_copy_from_content_type_hub_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/addCopyFromContentTypeHub"
      )
      |> add_param(:body, :body, sites_site_content_types_add_copy_from_content_type_hub_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action associateWithHubSites
  Associate a published content type][contentType] present in a content type hub with a list of hub sites. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request` (SitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_lists_list_content_types_content_type_associate_with_hub_sites(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.SitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_lists_list_content_types_content_type_associate_with_hub_sites(
        connection,
        group_id,
        site_id,
        list_id,
        content_type_id,
        sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/associateWithHubSites"
      )
      |> add_param(
        :body,
        :body,
        sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToDefaultContentLocation
  Copy a file to a default content location in a content type][contentType]. The file can then be added as a default file or template via a POST operation. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request` (GroupsGroupSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_lists_list_content_types_content_type_copy_to_default_content_location(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_lists_list_content_types_content_type_copy_to_default_content_location(
        connection,
        group_id,
        site_id,
        list_id,
        content_type_id,
        groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/copyToDefaultContentLocation"
      )
      |> add_param(
        :body,
        :body,
        groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action publish
  Publishes a contentType][] present in the content type hub site. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_lists_list_content_types_content_type_publish(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_lists_list_content_types_content_type_publish(
        connection,
        group_id,
        site_id,
        list_id,
        content_type_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/publish"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unpublish
  Unpublish a contentType][] from a content type hub site. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_lists_list_content_types_content_type_unpublish(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_lists_list_content_types_content_type_unpublish(
        connection,
        group_id,
        site_id,
        list_id,
        content_type_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/unpublish"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restore
  Restore a document set version. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_lists_list_items_list_item_document_set_versions_document_set_version_restore(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_lists_list_items_list_item_document_set_versions_document_set_version_restore(
        connection,
        group_id,
        site_id,
        list_id,
        list_item_id,
        document_set_version_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}/restore"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restoreVersion
  Restore a previous version of a ListItem to be the current version. This will create a new version with the contents of the previous version, but preserves all existing versions of the item. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_lists_list_items_list_item_versions_list_item_version_restore_version(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_lists_list_items_list_item_versions_list_item_version_restore_version(
        connection,
        group_id,
        site_id,
        list_id,
        list_item_id,
        list_item_version_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/versions/#{list_item_version_id}/restoreVersion"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reauthorize
  Reauthorize a subscription when you receive a reauthorizationRequired challenge. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `subscription_id` (String.t): The unique identifier of subscription
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_lists_list_subscriptions_subscription_reauthorize(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_lists_list_subscriptions_subscription_reauthorize(
        connection,
        group_id,
        site_id,
        list_id,
        subscription_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/subscriptions/#{subscription_id}/reauthorize"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getNotebookFromWebUrl
  Retrieve the properties and relationships of a notebook object by using its URL path. The location can be user notebooks on Microsoft 365, group notebooks, or SharePoint site-hosted team notebooks on Microsoft 365. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `users_user_onenote_notebooks_get_notebook_from_web_url_request` (UsersUserOnenoteNotebooksGetNotebookFromWebUrlRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrl2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_notebooks_get_notebook_from_web_url(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrlRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrl2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_notebooks_get_notebook_from_web_url(
        connection,
        group_id,
        site_id,
        users_user_onenote_notebooks_get_notebook_from_web_url_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/getNotebookFromWebUrl")
      |> add_param(:body, :body, users_user_onenote_notebooks_get_notebook_from_web_url_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrl2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `me_onenote_notebooks_notebook_copy_notebook_request` (MeOnenoteNotebooksNotebookCopyNotebookRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_notebooks_notebook_copy_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteNotebooksNotebookCopyNotebookRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_notebooks_notebook_copy_notebook(
        connection,
        group_id,
        site_id,
        notebook_id,
        me_onenote_notebooks_notebook_copy_notebook_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/copyNotebook")
      |> add_param(:body, :body, me_onenote_notebooks_notebook_copy_notebook_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        connection,
        group_id,
        site_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToNotebook"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        connection,
        group_id,
        site_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToSectionGroup"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        group_id,
        site_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        group_id,
        site_id,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(
        connection,
        group_id,
        site_id,
        notebook_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/copyToNotebook"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(
        connection,
        group_id,
        site_id,
        notebook_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/copyToSectionGroup"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        group_id,
        site_id,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        group_id,
        site_id,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_pages_onenote_page_copy_to_section(
        connection,
        group_id,
        site_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_pages_onenote_page_onenote_patch_content(
        connection,
        group_id,
        site_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        connection,
        group_id,
        site_id,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToNotebook"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        connection,
        group_id,
        site_id,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToSectionGroup"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        group_id,
        site_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        group_id,
        site_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_sections_onenote_section_copy_to_notebook(
        connection,
        group_id,
        site_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/copyToNotebook"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_sections_onenote_section_copy_to_section_group(
        connection,
        group_id,
        site_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/copyToSectionGroup"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        group_id,
        site_id,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        group_id,
        site_id,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action grant
  Grant users access to a link represented by a permission][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `permission_id` (String.t): The unique identifier of permission
  - `sites_site_permissions_permission_grant_request` (SitesSitePermissionsPermissionGrantRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_sites_site_permissions_permission_grant(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.SitesSitePermissionsPermissionGrantRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.CollectionOfPermission.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_sites_site_permissions_permission_grant(
        connection,
        group_id,
        site_id,
        permission_id,
        sites_site_permissions_permission_grant_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/permissions/#{permission_id}/grant")
      |> add_param(:body, :body, sites_site_permissions_permission_grant_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action subscribeByMail
  Calling this method will enable the current user to receive email notifications for this group, about new posts, events, and files in that group. Supported for Microsoft 365 groups only. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_subscribe_by_mail(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_subscribe_by_mail(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/subscribeByMail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action archive
  Archive the specified team.  When a team is archived, users can no longer send or like messages on any channel in the team, edit the team's name, description, or other settings, or in general make most changes to the team. Membership changes to the team continue to be allowed. Archiving is an async operation. A team is archived once the async operation completes successfully, which may occur subsequent to a response from this API. To archive a team, the team and group must have an owner. To restore a team from its archived state, use the API to unarchive. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `groups_group_team_archive_request` (GroupsGroupTeamArchiveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_archive(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamArchiveRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_archive(
        connection,
        group_id,
        groups_group_team_archive_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/archive")
      |> add_param(:body, :body, groups_group_team_archive_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action completeMigration
  Complete the message migration process by removing migration mode from a channel in a team. Migration mode is a special state that prevents certain operations, like sending messages and adding members, during the data migration process. After a completeMigration request is made, you can't import additional messages into the team. You can add members to the team after the request returns a successful response. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_complete_migration(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_complete_migration(
        connection,
        group_id,
        channel_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/completeMigration")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Add multiple members in a single request to a team. The response provides details about which memberships could and couldn't be created. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `me_joined_teams_team_members_add_request` (MeJoinedTeamsTeamMembersAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_members_add(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAddRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_members_add(
        connection,
        group_id,
        channel_id,
        me_joined_teams_team_members_add_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/members/add")
      |> add_param(:body, :body, me_joined_teams_team_members_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_messages_chat_message_replies_chat_message_set_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_messages_chat_message_replies_chat_message_set_reaction(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/setReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_messages_chat_message_replies_chat_message_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_messages_chat_message_replies_chat_message_soft_delete(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/softDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_messages_chat_message_replies_chat_message_undo_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_messages_chat_message_replies_chat_message_undo_soft_delete(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/undoSoftDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_messages_chat_message_replies_chat_message_unset_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_messages_chat_message_replies_chat_message_unset_reaction(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/unsetReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_messages_chat_message_set_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_messages_chat_message_set_reaction(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/setReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_messages_chat_message_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_messages_chat_message_soft_delete(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/softDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_messages_chat_message_undo_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_messages_chat_message_undo_soft_delete(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/undoSoftDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_messages_chat_message_unset_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_messages_chat_message_unset_reaction(
        connection,
        group_id,
        channel_id,
        chat_message_id,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/channels/#{channel_id}/messages/#{chat_message_id}/unsetReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action provisionEmail
  Provision an email address for a channel. Microsoft Teams doesn't automatically provision an email address for a channel by default. To have Teams provision an email address, you can call provisionEmail, or through the Teams user interface, select Get email address, which triggers Teams to generate an email address if it has not already provisioned one. To remove the email address of a channel, use the removeEmail method. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_provision_email(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_provision_email(
        connection,
        group_id,
        channel_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/provisionEmail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action removeEmail
  Remove the email address of a channel. You can remove an email address only if it was provisioned using the provisionEmail method or through the Microsoft Teams client. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_channels_channel_remove_email(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_channels_channel_remove_email(
        connection,
        group_id,
        channel_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/channels/#{channel_id}/removeEmail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clone
  Create a copy of a team. This operation also creates a copy of the corresponding group. You can specify which parts of the team to clone: When tabs are cloned, they aren't configured. The tabs are displayed on the tab bar in Microsoft Teams, and the first time a user opens them, they must go through the configuration screen.  If the user who opens the tab doesn't have permission to configure apps, they'll see a message that says that the tab isn't configured. Cloning is a long-running operation. After the POST clone returns, you need to GET the operation returned by the Location: header to see if it's running, succeeded, or failed. You should continue to GET until the status isn't running. The recommended delay between GETs is 5 seconds. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_team_clone_request` (TeamsTeamCloneRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_clone(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.TeamsTeamCloneRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_clone(connection, group_id, teams_team_clone_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/clone")
      |> add_param(:body, :body, teams_team_clone_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action completeMigration
  Complete the message migration process by removing migration mode from a team. Migration mode is a special state where certain operations are barred, like message POST and membership operations during the data migration process. After a completeMigration request is made, you can't import additional messages into the team. You can add members to the team after the request returns a successful response. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_complete_migration(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_complete_migration(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/completeMigration")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action upgrade
  Upgrade an app installation within a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request` (UsersUserChatsChatInstalledAppsTeamsAppInstallationUpgradeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_installed_apps_teams_app_installation_upgrade(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserChatsChatInstalledAppsTeamsAppInstallationUpgradeRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_installed_apps_teams_app_installation_upgrade(
        connection,
        group_id,
        teams_app_installation_id,
        users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/installedApps/#{teams_app_installation_id}/upgrade")
      |> add_param(
        :body,
        :body,
        users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Add multiple members in a single request to a team. The response provides details about which memberships could and couldn't be created. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `me_joined_teams_team_members_add_request` (MeJoinedTeamsTeamMembersAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_members_add(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAddRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_members_add(
        connection,
        group_id,
        me_joined_teams_team_members_add_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/members/add")
      |> add_param(:body, :body, me_joined_teams_team_members_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action completeMigration
  Complete the message migration process by removing migration mode from a channel in a team. Migration mode is a special state that prevents certain operations, like sending messages and adding members, during the data migration process. After a completeMigration request is made, you can't import additional messages into the team. You can add members to the team after the request returns a successful response. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_complete_migration(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_complete_migration(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/completeMigration")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Add multiple members in a single request to a team. The response provides details about which memberships could and couldn't be created. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `me_joined_teams_team_members_add_request` (MeJoinedTeamsTeamMembersAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_members_add(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAddRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_members_add(
        connection,
        group_id,
        me_joined_teams_team_members_add_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/members/add")
      |> add_param(:body, :body, me_joined_teams_team_members_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_messages_chat_message_replies_chat_message_set_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_messages_chat_message_replies_chat_message_set_reaction(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/setReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_messages_chat_message_replies_chat_message_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_messages_chat_message_replies_chat_message_soft_delete(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/softDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_messages_chat_message_replies_chat_message_undo_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_messages_chat_message_replies_chat_message_undo_soft_delete(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/undoSoftDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_messages_chat_message_replies_chat_message_unset_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_messages_chat_message_replies_chat_message_unset_reaction(
        connection,
        group_id,
        chat_message_id,
        chat_message_id1,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/unsetReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_messages_chat_message_set_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_messages_chat_message_set_reaction(
        connection,
        group_id,
        chat_message_id,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/setReaction")
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_messages_chat_message_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_messages_chat_message_soft_delete(
        connection,
        group_id,
        chat_message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/softDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_messages_chat_message_undo_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_messages_chat_message_undo_soft_delete(
        connection,
        group_id,
        chat_message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/undoSoftDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_messages_chat_message_unset_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_messages_chat_message_unset_reaction(
        connection,
        group_id,
        chat_message_id,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/messages/#{chat_message_id}/unsetReaction")
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action provisionEmail
  Provision an email address for a channel. Microsoft Teams doesn't automatically provision an email address for a channel by default. To have Teams provision an email address, you can call provisionEmail, or through the Teams user interface, select Get email address, which triggers Teams to generate an email address if it has not already provisioned one. To remove the email address of a channel, use the removeEmail method. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_provision_email(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_provision_email(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/provisionEmail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action removeEmail
  Remove the email address of a channel. You can remove an email address only if it was provisioned using the provisionEmail method or through the Microsoft Teams client. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_primary_channel_remove_email(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_primary_channel_remove_email(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/primaryChannel/removeEmail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action share
  Share a schedule time range with schedule members. Make the collections of shift, openshift and timeOff items in the specified time range of the schedule viewable by the specified team members, including employees and managers. Each shift, openshift and timeOff instance in a schedule supports a draft version and a shared version of the item. The draft version is viewable by only managers, and the shared version is viewable by employees and managers. For each shift, openshift and timeOff instance in the specified time range, the share action updates the shared version from the draft version, so that in addition to managers, employees can also view the most current information about the item. The notifyTeam parameter further specifies which employees can view the item. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `groups_group_team_schedule_share_request` (GroupsGroupTeamScheduleShareRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_schedule_share(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamScheduleShareRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_schedule_share(
        connection,
        group_id,
        groups_group_team_schedule_share_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/schedule/share")
      |> add_param(:body, :body, groups_group_team_schedule_share_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sendActivityNotification
  Send an activity feed notification in the scope of a team. For more details about sending notifications and the requirements for doing so, see sending Teams activity notifications. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `me_joined_teams_team_send_activity_notification_request` (MeJoinedTeamsTeamSendActivityNotificationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_send_activity_notification(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeJoinedTeamsTeamSendActivityNotificationRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_send_activity_notification(
        connection,
        group_id,
        me_joined_teams_team_send_activity_notification_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/sendActivityNotification")
      |> add_param(:body, :body, me_joined_teams_team_send_activity_notification_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unarchive
  Restore an archived team. This restores users' ability to send messages and edit the team, abiding by tenant and team settings. A Team is archived using the archive API. Unarchiving is an async operation. A team is unarchived once the async operation completes successfully, which may occur subsequent to a response from this API. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_team_unarchive(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_team_unarchive(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/team/unarchive")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_threads_conversation_thread_posts_post_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_threads_conversation_thread_posts_post_attachments_create_upload_session(
        connection,
        group_id,
        conversation_thread_id,
        post_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/threads/#{conversation_thread_id}/posts/#{post_id}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  Forward a post to a recipient. You can specify both the parent conversation and thread in the request,  or, you can specify just the parent thread without the parent conversation.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request` (GroupsGroupThreadsConversationThreadPostsPostInReplyToForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_threads_conversation_thread_posts_post_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupThreadsConversationThreadPostsPostInReplyToForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_threads_conversation_thread_posts_post_forward(
        connection,
        group_id,
        conversation_thread_id,
        post_id,
        groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/threads/#{conversation_thread_id}/posts/#{post_id}/forward")
      |> add_param(
        :body,
        :body,
        groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_threads_conversation_thread_posts_post_in_reply_to_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_threads_conversation_thread_posts_post_in_reply_to_attachments_create_upload_session(
        connection,
        group_id,
        conversation_thread_id,
        post_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/threads/#{conversation_thread_id}/posts/#{post_id}/inReplyTo/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  Forward a post to a recipient. You can specify both the parent conversation and thread in the request,  or, you can specify just the parent thread without the parent conversation.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request` (GroupsGroupThreadsConversationThreadPostsPostInReplyToForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_threads_conversation_thread_posts_post_in_reply_to_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupThreadsConversationThreadPostsPostInReplyToForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_threads_conversation_thread_posts_post_in_reply_to_forward(
        connection,
        group_id,
        conversation_thread_id,
        post_id,
        groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/threads/#{conversation_thread_id}/posts/#{post_id}/inReplyTo/forward"
      )
      |> add_param(
        :body,
        :body,
        groups_group_threads_conversation_thread_posts_post_in_reply_to_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reply
  Reply to a post and add a new post to the specified thread in a group conversation.  You can specify both the parent conversation and thread in the request, or, you can specify just the parent thread without the parent conversation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `groups_group_threads_conversation_thread_reply_request` (GroupsGroupThreadsConversationThreadReplyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_threads_conversation_thread_posts_post_in_reply_to_reply(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupThreadsConversationThreadReplyRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_threads_conversation_thread_posts_post_in_reply_to_reply(
        connection,
        group_id,
        conversation_thread_id,
        post_id,
        groups_group_threads_conversation_thread_reply_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/groups/#{group_id}/threads/#{conversation_thread_id}/posts/#{post_id}/inReplyTo/reply"
      )
      |> add_param(:body, :body, groups_group_threads_conversation_thread_reply_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reply
  Reply to a post and add a new post to the specified thread in a group conversation.  You can specify both the parent conversation and thread in the request, or, you can specify just the parent thread without the parent conversation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `post_id` (String.t): The unique identifier of post
  - `groups_group_threads_conversation_thread_reply_request` (GroupsGroupThreadsConversationThreadReplyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_threads_conversation_thread_posts_post_reply(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupThreadsConversationThreadReplyRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_threads_conversation_thread_posts_post_reply(
        connection,
        group_id,
        conversation_thread_id,
        post_id,
        groups_group_threads_conversation_thread_reply_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/threads/#{conversation_thread_id}/posts/#{post_id}/reply")
      |> add_param(:body, :body, groups_group_threads_conversation_thread_reply_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reply
  Reply to a thread in a group conversation and add a new post to it. You can specify the parent conversation  in the request, or, you can specify just the thread without the parent conversation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `conversation_thread_id` (String.t): The unique identifier of conversationThread
  - `groups_group_threads_conversation_thread_reply_request` (GroupsGroupThreadsConversationThreadReplyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_threads_conversation_thread_reply(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupThreadsConversationThreadReplyRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_threads_conversation_thread_reply(
        connection,
        group_id,
        conversation_thread_id,
        groups_group_threads_conversation_thread_reply_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/threads/#{conversation_thread_id}/reply")
      |> add_param(:body, :body, groups_group_threads_conversation_thread_reply_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsubscribeByMail
  Calling this method prevents the current user from receiving email notifications for this group about new posts, events, and files in that group. Supported for Microsoft 365 groups only. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_unsubscribe_by_mail(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_unsubscribe_by_mail(connection, group_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/unsubscribeByMail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action validateProperties
  Validate that a Microsoft 365 group's display name or mail nickname complies with naming policies. Clients can use this API to determine whether a display name or mail nickname is valid before trying to update a Microsoft 365 group. To validate the properties before creating a group, use the directoryobject:validateProperties function. The following policy validations are performed for the display name and mail nickname properties: This API only returns the first validation failure that is encountered. If the properties fail multiple validations, only the first validation failure is returned. However, you can validate both the mail nickname and the display name and receive a collection of validation errors if you are only validating the prefix and suffix naming policy. To learn more about configuring naming policies, see Configure naming policy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `groups_group_validate_properties_request` (GroupsGroupValidatePropertiesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_group_validate_properties(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupValidatePropertiesRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_group_validate_properties(
        connection,
        group_id,
        groups_group_validate_properties_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/validateProperties")
      |> add_param(:body, :body, groups_group_validate_properties_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action validateProperties
  Validate that a Microsoft 365 group's display name or mail nickname complies with naming policies.  Clients can use this API to determine whether a display name or mail nickname is valid before trying to create a Microsoft 365 group. To validate the properties of an existing group, use the group: validateProperties function. The following policy validations are performed for the display name and mail nickname properties: 1. Validate the prefix and suffix naming policy 2. Validate the custom banned words policy 3. Validate that the mail nickname is unique This API only returns the first validation failure that is encountered. If the properties fail multiple validations, only the first validation failure is returned. However, you can validate both the mail nickname and the display name and receive a collection of validation errors if you are only validating the prefix and suffix naming policy. To learn more about configuring naming policies, see Configure naming policy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contacts_validate_properties_request` (ContactsValidatePropertiesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_validate_properties(
          Tesla.Env.client(),
          MicrosoftGraph.Model.ContactsValidatePropertiesRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def groups_validate_properties(connection, contacts_validate_properties_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/validateProperties")
      |> add_param(:body, :body, contacts_validate_properties_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
