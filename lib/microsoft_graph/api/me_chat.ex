# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.MeChat do
  @moduledoc """
  API calls for all endpoints tagged `MeChat`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Add app to chat
  Install a teamsApp to the specified chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `microsoft_graph_teams_app_installation` (MicrosoftGraphTeamsAppInstallation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_create_installed_apps(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_create_installed_apps(
        connection,
        chat_id,
        microsoft_graph_teams_app_installation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/installedApps")
      |> add_param(:body, :body, microsoft_graph_teams_app_installation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add member to a chat
  Add a conversationMember to a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_create_members(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphConversationMember.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_create_members(
        connection,
        chat_id,
        microsoft_graph_conversation_member,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/members")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Send message in a chat
  Send a new chatMessage in the specified chat. This API can't create a new chat; you must use the list chats method to retrieve the ID of an existing chat before you can create a chat message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_create_messages(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_create_messages(connection, chat_id, microsoft_graph_chat_message, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/messages")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to permissionGrants for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `microsoft_graph_resource_specific_permission_grant` (MicrosoftGraphResourceSpecificPermissionGrant): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_create_permission_grants(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_create_permission_grants(
        connection,
        chat_id,
        microsoft_graph_resource_specific_permission_grant,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/permissionGrants")
      |> add_param(:body, :body, microsoft_graph_resource_specific_permission_grant)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Pin a message in a chat
  Pin a chat message in the specified chat. This API cannot create a new chat; you must use the list chats method to retrieve the ID of an existing chat before you can pin a chat message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `microsoft_graph_pinned_chat_message_info` (MicrosoftGraphPinnedChatMessageInfo): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_create_pinned_messages(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfo.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfo.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_create_pinned_messages(
        connection,
        chat_id,
        microsoft_graph_pinned_chat_message_info,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/pinnedMessages")
      |> add_param(:body, :body, microsoft_graph_pinned_chat_message_info)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add tab to chat
  Add (pin) a tab to the specified chat.  The corresponding app must already be installed in the chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `microsoft_graph_teams_tab` (MicrosoftGraphTeamsTab): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_create_tabs(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_create_tabs(connection, chat_id, microsoft_graph_teams_tab, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/tabs")
      |> add_param(:body, :body, microsoft_graph_teams_tab)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Uninstall app in a chat
  Uninstall an app installed within a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_delete_installed_apps(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_delete_installed_apps(connection, chat_id, teams_app_installation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/chats/#{chat_id}/installedApps/#{teams_app_installation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property lastMessagePreview for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_delete_last_message_preview(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_delete_last_message_preview(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/chats/#{chat_id}/lastMessagePreview")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove member from chat
  Remove a conversationMember from a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_delete_members(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_delete_members(connection, chat_id, conversation_member_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/chats/#{chat_id}/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property messages for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_delete_messages(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_delete_messages(connection, chat_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property permissionGrants for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `resource_specific_permission_grant_id` (String.t): The unique identifier of resourceSpecificPermissionGrant
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_delete_permission_grants(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_delete_permission_grants(
        connection,
        chat_id,
        resource_specific_permission_grant_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/chats/#{chat_id}/permissionGrants/#{resource_specific_permission_grant_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Unpin a message from a chat
  Unpin a message from a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `pinned_chat_message_info_id` (String.t): The unique identifier of pinnedChatMessageInfo
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_delete_pinned_messages(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_delete_pinned_messages(
        connection,
        chat_id,
        pinned_chat_message_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/chats/#{chat_id}/pinnedMessages/#{pinned_chat_message_info_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete tab from chat
  Remove (unpin) a tab from the specified chat.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_delete_tabs(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_delete_tabs(connection, chat_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/chats/#{chat_id}/tabs/#{teams_tab_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_get_count_aef8(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_get_count_aef8(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get installed app in chat
  Get an app installed in a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_get_installed_apps(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_get_installed_apps(connection, chat_id, teams_app_installation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/installedApps/#{teams_app_installation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastMessagePreview from me
  Preview of the last message sent in the chat. Null if no messages have been sent in the chat. Currently, only the list chats operation supports this property.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_get_last_message_preview(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageInfo.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_get_last_message_preview(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/lastMessagePreview")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get conversationMember in a chat
  Retrieve a conversationMember from a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_get_members(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_get_members(connection, chat_id, conversation_member_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessage in a channel or chat
  Retrieve a single message or a message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_get_messages(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_get_messages(connection, chat_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get permissionGrants from me
  A collection of permissions granted to apps for the chat.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `resource_specific_permission_grant_id` (String.t): The unique identifier of resourceSpecificPermissionGrant
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_get_permission_grants(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_get_permission_grants(
        connection,
        chat_id,
        resource_specific_permission_grant_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/permissionGrants/#{resource_specific_permission_grant_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get pinnedMessages from me
  A collection of all the pinned messages in the chat. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `pinned_chat_message_info_id` (String.t): The unique identifier of pinnedChatMessageInfo
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_get_pinned_messages(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfo.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_get_pinned_messages(connection, chat_id, pinned_chat_message_info_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/pinnedMessages/#{pinned_chat_message_info_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tab in chat
  Retrieve the properties and relationships of the specified tab in a chat.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_get_tabs(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_get_tabs(connection, chat_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/tabs/#{teams_tab_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_installed_apps_get_count295d(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_installed_apps_get_count295d(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/installedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamsApp from me
  The app that is installed.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_installed_apps_get_teams_app(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_installed_apps_get_teams_app(
        connection,
        chat_id,
        teams_app_installation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/installedApps/#{teams_app_installation_id}/teamsApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamsAppDefinition from me
  The details of this version of the app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_installed_apps_get_teams_app_definition(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_installed_apps_get_teams_app_definition(
        connection,
        chat_id,
        teams_app_installation_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/installedApps/#{teams_app_installation_id}/teamsAppDefinition")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List apps in chat
  List all app installations within a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_list_installed_apps(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallationCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_list_installed_apps(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/installedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List conversationMembers
  List all conversation members in a chat or channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_list_members(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_list_members(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/members")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List messages in a chat
  Retrieve the list of messages in a chat. This method supports federation. To list chat messages in application context, the request must be made from the tenant that the channel owner belongs to (represented by the tenantId property on the channel). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_list_messages(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_list_messages(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/messages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List permissionGrants of a chat
  List all resource-specific permission grants on the chat. This list specifies the Microsoft Entra apps that have access to the chat, along with the corresponding kind of resource-specific access that each app has. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrantCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_list_permission_grants(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrantCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_list_permission_grants(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/permissionGrants")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrantCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List pinnedChatMessages in a chat
  Get a list of pinnedChatMessages in a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfoCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_list_pinned_messages(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfoCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_list_pinned_messages(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/pinnedMessages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfoCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List tabs in chat
  Retrieve the list of tabs in the specified chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_list_tabs(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_list_tabs(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/tabs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_members_get_count1223(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_members_get_count1223(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/members/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to hostedContents for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_create_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_create_hosted_contents(
        connection,
        chat_id,
        chat_message_id,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/hostedContents")
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Send replies to a message in a channel
  Send a new reply to a chatMessage in a specified channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_create_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_create_replies(
        connection,
        chat_id,
        chat_message_id,
        microsoft_graph_chat_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/replies")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property hostedContents for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_delete_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_delete_hosted_contents(
        connection,
        chat_id,
        chat_message_id,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property replies for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_delete_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_delete_replies(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_get_count5db5(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_get_count5db5(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/messages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessageHostedContent
  Retrieve the properties and relationships of chatMessageHostedContent object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_get_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_get_hosted_contents(
        connection,
        chat_id,
        chat_message_id,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property hostedContents from me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_get_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_get_hosted_contents_content(
        connection,
        chat_id,
        chat_message_id,
        chat_message_hosted_content_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessage in a channel or chat
  Retrieve a single message or a message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_get_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_get_replies(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_hosted_contents_get_count5707(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_hosted_contents_get_count5707(
        connection,
        chat_id,
        chat_message_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/hostedContents/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List hostedContents
  Retrieve the list of chatMessageHostedContent objects from a message. This API only lists the hosted content objects. To get the content bytes, see get chatmessage hosted content This API is available in the following national cloud deployments. The following tables show the least privileged permission or permissions required to call this API on each supported resource type. Follow best practices to request least privileged permissions. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_list_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_list_hosted_contents(connection, chat_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/hostedContents")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List replies
  List all the replies to a message in a channel of a team. This method lists only the replies of the specified message, if any. To get the message itself, simply call get channel message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_list_replies(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_list_replies(connection, chat_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/replies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to hostedContents for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_replies_create_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_replies_create_hosted_contents(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property hostedContents for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_replies_delete_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_replies_delete_hosted_contents(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_replies_get_count_ac4d(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_replies_get_count_ac4d(connection, chat_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessageHostedContent
  Retrieve the properties and relationships of chatMessageHostedContent object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_replies_get_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_replies_get_hosted_contents(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property hostedContents from me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_replies_get_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, String.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_replies_get_hosted_contents_content(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_replies_hosted_contents_get_count62f4(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_replies_hosted_contents_get_count62f4(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List hostedContents
  Retrieve the list of chatMessageHostedContent objects from a message. This API only lists the hosted content objects. To get the content bytes, see get chatmessage hosted content This API is available in the following national cloud deployments. The following tables show the least privileged permission or permissions required to call this API on each supported resource type. Follow best practices to request least privileged permissions. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_replies_list_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_replies_list_hosted_contents(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property hostedContents in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_replies_update_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_replies_update_hosted_contents(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property hostedContents in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_replies_update_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_replies_update_hosted_contents_content(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        chat_message_hosted_content_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property hostedContents in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_update_hosted_contents(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_update_hosted_contents(
        connection,
        chat_id,
        chat_message_id,
        chat_message_hosted_content_id,
        microsoft_graph_chat_message_hosted_content,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}"
      )
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property hostedContents in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_update_hosted_contents_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_update_hosted_contents_content(
        connection,
        chat_id,
        chat_message_id,
        chat_message_hosted_content_id,
        body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}/$value"
      )
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property replies in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_messages_update_replies(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_messages_update_replies(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        microsoft_graph_chat_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_permission_grants_get_count9e7e(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_permission_grants_get_count9e7e(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/permissionGrants/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_pinned_messages_get_count_f614(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_pinned_messages_get_count_f614(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/pinnedMessages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get message from me
  Represents details about the chat message that is pinned.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `pinned_chat_message_info_id` (String.t): The unique identifier of pinnedChatMessageInfo
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_pinned_messages_get_message(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_pinned_messages_get_message(
        connection,
        chat_id,
        pinned_chat_message_info_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/pinnedMessages/#{pinned_chat_message_info_id}/message")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_tabs_get_count35b1(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_tabs_get_count35b1(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/tabs/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamsApp from me
  The application that is linked to the tab. This can't be changed after tab creation.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_tabs_get_teams_app(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_tabs_get_teams_app(connection, chat_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}/tabs/#{teams_tab_id}/teamsApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property installedApps in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `microsoft_graph_teams_app_installation` (MicrosoftGraphTeamsAppInstallation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_update_installed_apps(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_update_installed_apps(
        connection,
        chat_id,
        teams_app_installation_id,
        microsoft_graph_teams_app_installation,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/chats/#{chat_id}/installedApps/#{teams_app_installation_id}")
      |> add_param(:body, :body, microsoft_graph_teams_app_installation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsAppInstallation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property lastMessagePreview in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `microsoft_graph_chat_message_info` (MicrosoftGraphChatMessageInfo): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_update_last_message_preview(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessageInfo.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageInfo.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_update_last_message_preview(
        connection,
        chat_id,
        microsoft_graph_chat_message_info,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/chats/#{chat_id}/lastMessagePreview")
      |> add_param(:body, :body, microsoft_graph_chat_message_info)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property members in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_update_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphConversationMember.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_update_members(
        connection,
        chat_id,
        conversation_member_id,
        microsoft_graph_conversation_member,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/chats/#{chat_id}/members/#{conversation_member_id}")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property messages in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_update_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChatMessage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_update_messages(
        connection,
        chat_id,
        chat_message_id,
        microsoft_graph_chat_message,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property permissionGrants in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `resource_specific_permission_grant_id` (String.t): The unique identifier of resourceSpecificPermissionGrant
  - `microsoft_graph_resource_specific_permission_grant` (MicrosoftGraphResourceSpecificPermissionGrant): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_update_permission_grants(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_update_permission_grants(
        connection,
        chat_id,
        resource_specific_permission_grant_id,
        microsoft_graph_resource_specific_permission_grant,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/chats/#{chat_id}/permissionGrants/#{resource_specific_permission_grant_id}")
      |> add_param(:body, :body, microsoft_graph_resource_specific_permission_grant)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphResourceSpecificPermissionGrant},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pinnedMessages in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `pinned_chat_message_info_id` (String.t): The unique identifier of pinnedChatMessageInfo
  - `microsoft_graph_pinned_chat_message_info` (MicrosoftGraphPinnedChatMessageInfo): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_update_pinned_messages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfo.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfo.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_update_pinned_messages(
        connection,
        chat_id,
        pinned_chat_message_info_id,
        microsoft_graph_pinned_chat_message_info,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/chats/#{chat_id}/pinnedMessages/#{pinned_chat_message_info_id}")
      |> add_param(:body, :body, microsoft_graph_pinned_chat_message_info)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPinnedChatMessageInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update tab in chat
  Update the properties of the specified tab in a chat.  This can be used to configure the content of the tab. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `microsoft_graph_teams_tab` (MicrosoftGraphTeamsTab): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_update_tabs(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_update_tabs(
        connection,
        chat_id,
        teams_tab_id,
        microsoft_graph_teams_tab,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/chats/#{chat_id}/tabs/#{teams_tab_id}")
      |> add_param(:body, :body, microsoft_graph_teams_tab)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to chats for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_chat` (MicrosoftGraphChat): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_create_chats(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphChat.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphChat.t()}
          | {:error, Tesla.Env.t()}
  def me_create_chats(connection, microsoft_graph_chat, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats")
      |> add_param(:body, :body, microsoft_graph_chat)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property chats for me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_delete_chats(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_delete_chats(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/me/chats/#{chat_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chat
  Retrieve a single chat (without its messages). This method supports federation. To access a chat, at least one chat member must belong to the tenant the request initiated from. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_get_chats(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphChat.t()}
          | {:error, Tesla.Env.t()}
  def me_get_chats(connection, chat_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats/#{chat_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List chats
  Retrieve the list of chats that the user is part of. This method supports federation. When a user ID is provided, the calling application must belong to the same tenant that the user belongs to. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_list_chats(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphChatCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_list_chats(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/me/chats")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property chats in me

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `microsoft_graph_chat` (MicrosoftGraphChat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_update_chats(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphChat.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphChat.t()}
          | {:error, Tesla.Env.t()}
  def me_update_chats(connection, chat_id, microsoft_graph_chat, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/me/chats/#{chat_id}")
      |> add_param(:body, :body, microsoft_graph_chat)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
