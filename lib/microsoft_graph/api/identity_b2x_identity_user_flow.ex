# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.IdentityB2xIdentityUserFlow do
  @moduledoc """
  API calls for all endpoints tagged `IdentityB2xIdentityUserFlow`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create new navigation property to languages for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `microsoft_graph_user_flow_language_configuration` (MicrosoftGraphUserFlowLanguageConfiguration): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_create_languages(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfiguration.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfiguration.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_create_languages(connection, b2x_identity_user_flow_id, microsoft_graph_user_flow_language_configuration, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages")
      |> add_param(:body, :body, microsoft_graph_user_flow_language_configuration)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property ref to userFlowIdentityProviders for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `request_body` (%{optional(String.t) => map()}): New navigation property ref value
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_create_ref_user_flow_identity_providers(Tesla.Env.client, String.t, %{optional(String.t) => Map.t}, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_create_ref_user_flow_identity_providers(connection, b2x_identity_user_flow_id, request_body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userFlowIdentityProviders/$ref")
      |> add_param(:body, :body, request_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create userAttributeAssignments
  Create a new identityUserFlowAttributeAssignment object in a b2xIdentityUserFlow. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `microsoft_graph_identity_user_flow_attribute_assignment` (MicrosoftGraphIdentityUserFlowAttributeAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_create_user_attribute_assignments(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_create_user_attribute_assignments(connection, b2x_identity_user_flow_id, microsoft_graph_identity_user_flow_attribute_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userAttributeAssignments")
      |> add_param(:body, :body, microsoft_graph_identity_user_flow_attribute_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete identityProvider from b2xIdentityUserFlow
  Delete an identity provider from a b2xIdentityUserFlow object. For self-service sign-up user flows, the values can be Google-OAUTH or Facebook-OAUTH.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `identity_provider_id` (String.t): The unique identifier of identityProvider
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_delete_identity_providers(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_delete_identity_providers(connection, b2x_identity_user_flow_id, identity_provider_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/identityProviders/#{identity_provider_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property languages for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_delete_languages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_delete_languages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property postAttributeCollection for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_delete_post_attribute_collection(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_delete_post_attribute_collection(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postAttributeCollection")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property postFederationSignup for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_delete_post_federation_signup(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_delete_post_federation_signup(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postFederationSignup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete ref of navigation property postAttributeCollection for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_delete_ref_post_attribute_collection(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_delete_ref_post_attribute_collection(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postAttributeCollection/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete ref of navigation property postFederationSignup for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_delete_ref_post_federation_signup(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_delete_ref_post_federation_signup(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postFederationSignup/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete ref of navigation property userFlowIdentityProviders for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `identity_provider_base_id` (String.t): The unique identifier of identityProviderBase
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag
    - `:@id` (String.t): Delete Uri

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_delete_ref_user_flow_identity_providers(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_delete_ref_user_flow_identity_providers(connection, b2x_identity_user_flow_id, identity_provider_base_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :@id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userFlowIdentityProviders/#{identity_provider_base_id}/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete userAttributeAssignment
  Delete an identityUserFlowAttributeAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `identity_user_flow_attribute_assignment_id` (String.t): The unique identifier of identityUserFlowAttributeAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_delete_user_attribute_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_delete_user_attribute_assignments(connection, b2x_identity_user_flow_id, identity_user_flow_attribute_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userAttributeAssignments/#{identity_user_flow_attribute_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get apiConnectorConfiguration property value
  Configuration for enabling an API connector for use as part of the self-service sign-up user flow. You can only obtain the value of this object using Get userFlowApiConnectorConfiguration.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowApiConnectorConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_get_api_connector_configuration(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowApiConnectorConfiguration.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_get_api_connector_configuration(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowApiConnectorConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_get_count_cfff(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_get_count_cfff(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get identityProviders from identity
  The identity providers included in the user flow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `identity_provider_id` (String.t): The unique identifier of identityProvider
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityProvider.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_get_identity_providers(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityProvider.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_get_identity_providers(connection, b2x_identity_user_flow_id, identity_provider_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/identityProviders/#{identity_provider_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityProvider},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get userFlowLanguageConfiguration
  Read the properties and relationships of a userFlowLanguageConfiguration object. These objects represent a language available in a user flow. Note: Language customization is enabled by default in Microsoft Entra user flows. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_get_languages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfiguration.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_get_languages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get postAttributeCollection from identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_get_post_attribute_collection(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_get_post_attribute_collection(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postAttributeCollection")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get postFederationSignup from identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_get_post_federation_signup(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_get_post_federation_signup(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postFederationSignup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ref of postAttributeCollection from identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_get_ref_post_attribute_collection(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_get_ref_post_attribute_collection(connection, b2x_identity_user_flow_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postAttributeCollection/$ref")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ref of postFederationSignup from identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_get_ref_post_federation_signup(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_get_ref_post_federation_signup(connection, b2x_identity_user_flow_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postFederationSignup/$ref")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get identityUserFlowAttributeAssignment
  Read the properties and relationships of an identityUserFlowAttributeAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `identity_user_flow_attribute_assignment_id` (String.t): The unique identifier of identityUserFlowAttributeAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_get_user_attribute_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_get_user_attribute_assignments(connection, b2x_identity_user_flow_id, identity_user_flow_attribute_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userAttributeAssignments/#{identity_user_flow_attribute_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_identity_providers_get_count97b6(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_identity_providers_get_count97b6(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/identityProviders/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to defaultPages for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `microsoft_graph_user_flow_language_page` (MicrosoftGraphUserFlowLanguagePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_create_default_pages(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_create_default_pages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, microsoft_graph_user_flow_language_page, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/defaultPages")
      |> add_param(:body, :body, microsoft_graph_user_flow_language_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to overridesPages for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `microsoft_graph_user_flow_language_page` (MicrosoftGraphUserFlowLanguagePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_create_overrides_pages(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_create_overrides_pages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, microsoft_graph_user_flow_language_page, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/overridesPages")
      |> add_param(:body, :body, microsoft_graph_user_flow_language_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_default_pages_get_count335e(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_default_pages_get_count335e(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/defaultPages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property defaultPages for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `user_flow_language_page_id` (String.t): The unique identifier of userFlowLanguagePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_delete_default_pages(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_delete_default_pages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, user_flow_language_page_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/defaultPages/#{user_flow_language_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property overridesPages for identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `user_flow_language_page_id` (String.t): The unique identifier of userFlowLanguagePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_delete_overrides_pages(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_delete_overrides_pages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, user_flow_language_page_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/overridesPages/#{user_flow_language_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_get_count16c9(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_get_count16c9(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get defaultPages from identity
  Collection of pages with the default content to display in a user flow for a specified language. This collection doesn't allow any kind of modification.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `user_flow_language_page_id` (String.t): The unique identifier of userFlowLanguagePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_get_default_pages(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_get_default_pages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, user_flow_language_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/defaultPages/#{user_flow_language_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property defaultPages from identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `user_flow_language_page_id` (String.t): The unique identifier of userFlowLanguagePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_get_default_pages_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_get_default_pages_content(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, user_flow_language_page_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/defaultPages/#{user_flow_language_page_id}/$value")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get overridesPages from identity
  Collection of pages with the overrides messages to display in a user flow for a specified language. This collection only allows you to modify the content of the page, any other modification isn't allowed (creation or deletion of pages).

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `user_flow_language_page_id` (String.t): The unique identifier of userFlowLanguagePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_get_overrides_pages(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_get_overrides_pages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, user_flow_language_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/overridesPages/#{user_flow_language_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property overridesPages from identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `user_flow_language_page_id` (String.t): The unique identifier of userFlowLanguagePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_get_overrides_pages_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_get_overrides_pages_content(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, user_flow_language_page_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/overridesPages/#{user_flow_language_page_id}/$value")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get defaultPages from identity
  Collection of pages with the default content to display in a user flow for a specified language. This collection doesn't allow any kind of modification.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_list_default_pages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_list_default_pages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/defaultPages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List overridesPages
  Get the userFlowLanguagePage resources from the overridesPages navigation property. These pages are used to customize the values shown to the user during a user journey in a user flow. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_list_overrides_pages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_list_overrides_pages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/overridesPages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_overrides_pages_get_count5299(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_overrides_pages_get_count5299(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/overridesPages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property defaultPages in identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `user_flow_language_page_id` (String.t): The unique identifier of userFlowLanguagePage
  - `microsoft_graph_user_flow_language_page` (MicrosoftGraphUserFlowLanguagePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_update_default_pages(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_update_default_pages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, user_flow_language_page_id, microsoft_graph_user_flow_language_page, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/defaultPages/#{user_flow_language_page_id}")
      |> add_param(:body, :body, microsoft_graph_user_flow_language_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property defaultPages in identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `user_flow_language_page_id` (String.t): The unique identifier of userFlowLanguagePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_update_default_pages_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_update_default_pages_content(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, user_flow_language_page_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/defaultPages/#{user_flow_language_page_id}/$value")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property overridesPages in identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `user_flow_language_page_id` (String.t): The unique identifier of userFlowLanguagePage
  - `microsoft_graph_user_flow_language_page` (MicrosoftGraphUserFlowLanguagePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_update_overrides_pages(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_update_overrides_pages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, user_flow_language_page_id, microsoft_graph_user_flow_language_page, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/overridesPages/#{user_flow_language_page_id}")
      |> add_param(:body, :body, microsoft_graph_user_flow_language_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguagePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property overridesPages in identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `user_flow_language_page_id` (String.t): The unique identifier of userFlowLanguagePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_languages_update_overrides_pages_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_languages_update_overrides_pages_content(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, user_flow_language_page_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}/overridesPages/#{user_flow_language_page_id}/$value")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List identityProviders
  Get the identity providers in a b2xIdentityUserFlow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityProviderCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_list_identity_providers(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityProviderCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_list_identity_providers(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/identityProviders")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityProviderCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List languages
  Retrieve a list of languages supported for customization in a B2X user flow. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfigurationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_list_languages(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfigurationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_list_languages(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfigurationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ref of userFlowIdentityProviders from identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.StringCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_list_ref_user_flow_identity_providers(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.StringCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_list_ref_user_flow_identity_providers(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userFlowIdentityProviders/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.StringCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List userAttributeAssignments
  Get the identityUserFlowAttributeAssignment resources from the userAttributeAssignments navigation property in a b2xIdentityUserFlow. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_list_user_attribute_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_list_user_attribute_assignments(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userAttributeAssignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get userFlowIdentityProviders from identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityProviderBaseCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_list_user_flow_identity_providers(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityProviderBaseCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_list_user_flow_identity_providers(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userFlowIdentityProviders")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityProviderBaseCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property languages in identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `user_flow_language_configuration_id` (String.t): The unique identifier of userFlowLanguageConfiguration
  - `microsoft_graph_user_flow_language_configuration` (MicrosoftGraphUserFlowLanguageConfiguration): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_update_languages(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfiguration.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfiguration.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_update_languages(connection, b2x_identity_user_flow_id, user_flow_language_configuration_id, microsoft_graph_user_flow_language_configuration, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/languages/#{user_flow_language_configuration_id}")
      |> add_param(:body, :body, microsoft_graph_user_flow_language_configuration)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUserFlowLanguageConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property postAttributeCollection in identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `microsoft_graph_identity_api_connector` (MicrosoftGraphIdentityApiConnector): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_update_post_attribute_collection(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_update_post_attribute_collection(connection, b2x_identity_user_flow_id, microsoft_graph_identity_api_connector, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postAttributeCollection")
      |> add_param(:body, :body, microsoft_graph_identity_api_connector)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property postFederationSignup in identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `microsoft_graph_identity_api_connector` (MicrosoftGraphIdentityApiConnector): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_update_post_federation_signup(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_update_post_federation_signup(connection, b2x_identity_user_flow_id, microsoft_graph_identity_api_connector, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postFederationSignup")
      |> add_param(:body, :body, microsoft_graph_identity_api_connector)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityApiConnector},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the ref of navigation property postAttributeCollection in identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `reference_update` (ReferenceUpdate): New navigation property ref values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_update_ref_post_attribute_collection(Tesla.Env.client, String.t, MicrosoftGraph.Model.ReferenceUpdate.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_update_ref_post_attribute_collection(connection, b2x_identity_user_flow_id, reference_update, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postAttributeCollection/$ref")
      |> add_param(:body, :body, reference_update)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the ref of navigation property postFederationSignup in identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `reference_update` (ReferenceUpdate): New navigation property ref values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_update_ref_post_federation_signup(Tesla.Env.client, String.t, MicrosoftGraph.Model.ReferenceUpdate.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_update_ref_post_federation_signup(connection, b2x_identity_user_flow_id, reference_update, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/apiConnectorConfiguration/postFederationSignup/$ref")
      |> add_param(:body, :body, reference_update)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update identityUserFlowAttributeAssignment
  Update the properties of a identityUserFlowAttributeAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `identity_user_flow_attribute_assignment_id` (String.t): The unique identifier of identityUserFlowAttributeAssignment
  - `microsoft_graph_identity_user_flow_attribute_assignment` (MicrosoftGraphIdentityUserFlowAttributeAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_update_user_attribute_assignments(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_update_user_attribute_assignments(connection, b2x_identity_user_flow_id, identity_user_flow_attribute_assignment_id, microsoft_graph_identity_user_flow_attribute_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userAttributeAssignments/#{identity_user_flow_attribute_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_identity_user_flow_attribute_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttributeAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_user_attribute_assignments_get_count_b381(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_user_attribute_assignments_get_count_b381(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userAttributeAssignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get userAttribute from identity
  The user attribute that you want to add to your user flow.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `identity_user_flow_attribute_assignment_id` (String.t): The unique identifier of identityUserFlowAttributeAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttribute.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_user_attribute_assignments_get_user_attribute(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttribute.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_user_attribute_assignments_get_user_attribute(connection, b2x_identity_user_flow_id, identity_user_flow_attribute_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userAttributeAssignments/#{identity_user_flow_attribute_assignment_id}/userAttribute")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIdentityUserFlowAttribute},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_b2x_user_flows_user_flow_identity_providers_get_count0185(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_b2x_user_flows_user_flow_identity_providers_get_count0185(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}/userFlowIdentityProviders/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create b2xIdentityUserFlow
  Create a new b2xIdentityUserFlow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_b2x_identity_user_flow` (MicrosoftGraphB2xIdentityUserFlow): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_create_b2x_user_flows(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlow.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_create_b2x_user_flows(connection, microsoft_graph_b2x_identity_user_flow, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identity/b2xUserFlows")
      |> add_param(:body, :body, microsoft_graph_b2x_identity_user_flow)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete b2xIdentityUserFlow
  Delete a b2xIdentityUserFlow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_delete_b2x_user_flows(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_delete_b2x_user_flows(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get b2xIdentityUserFlow
  Retrieve the properties and relationships of a b2xIdentityUserFlow object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_get_b2x_user_flows(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_get_b2x_user_flows(connection, b2x_identity_user_flow_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List b2xIdentityUserFlows
  Retrieve a list of b2xIdentityUserFlow objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlowCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_list_b2x_user_flows(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlowCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_list_b2x_user_flows(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identity/b2xUserFlows")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlowCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property b2xUserFlows in identity

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `b2x_identity_user_flow_id` (String.t): The unique identifier of b2xIdentityUserFlow
  - `microsoft_graph_b2x_identity_user_flow` (MicrosoftGraphB2xIdentityUserFlow): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlow.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_update_b2x_user_flows(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlow.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlow.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_update_b2x_user_flows(connection, b2x_identity_user_flow_id, microsoft_graph_b2x_identity_user_flow, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identity/b2xUserFlows/#{b2x_identity_user_flow_id}")
      |> add_param(:body, :body, microsoft_graph_b2x_identity_user_flow)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphB2xIdentityUserFlow},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
