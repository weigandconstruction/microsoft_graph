# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceManagementMobileAppTroubleshootingEvent do
  @moduledoc """
  API calls for all endpoints tagged `DeviceManagementMobileAppTroubleshootingEvent`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create mobileAppTroubleshootingEvent
  Create a new mobileAppTroubleshootingEvent object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_mobile_app_troubleshooting_event` (MicrosoftGraphMobileAppTroubleshootingEvent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEvent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_create_mobile_app_troubleshooting_events(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEvent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEvent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_create_mobile_app_troubleshooting_events(connection, microsoft_graph_mobile_app_troubleshooting_event, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents")
      |> add_param(:body, :body, microsoft_graph_mobile_app_troubleshooting_event)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEvent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppTroubleshootingEvent
  Deletes a mobileAppTroubleshootingEvent.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_troubleshooting_event_id` (String.t): The unique identifier of mobileAppTroubleshootingEvent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_delete_mobile_app_troubleshooting_events(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_delete_mobile_app_troubleshooting_events(connection, mobile_app_troubleshooting_event_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents/#{mobile_app_troubleshooting_event_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppTroubleshootingEvent
  Read properties and relationships of the mobileAppTroubleshootingEvent object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_troubleshooting_event_id` (String.t): The unique identifier of mobileAppTroubleshootingEvent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEvent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_get_mobile_app_troubleshooting_events(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEvent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_get_mobile_app_troubleshooting_events(connection, mobile_app_troubleshooting_event_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents/#{mobile_app_troubleshooting_event_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEvent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppTroubleshootingEvents
  List properties and relationships of the mobileAppTroubleshootingEvent objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEventCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_list_mobile_app_troubleshooting_events(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEventCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_list_mobile_app_troubleshooting_events(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEventCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_troubleshooting_event_id` (String.t): The unique identifier of mobileAppTroubleshootingEvent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_mobile_app_troubleshooting_events_app_log_collection_requests_get_count0428(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_mobile_app_troubleshooting_events_app_log_collection_requests_get_count0428(connection, mobile_app_troubleshooting_event_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents/#{mobile_app_troubleshooting_event_id}/appLogCollectionRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create appLogCollectionRequest
  Create a new appLogCollectionRequest object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_troubleshooting_event_id` (String.t): The unique identifier of mobileAppTroubleshootingEvent
  - `microsoft_graph_app_log_collection_request` (MicrosoftGraphAppLogCollectionRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_mobile_app_troubleshooting_events_create_app_log_collection_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_mobile_app_troubleshooting_events_create_app_log_collection_requests(connection, mobile_app_troubleshooting_event_id, microsoft_graph_app_log_collection_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents/#{mobile_app_troubleshooting_event_id}/appLogCollectionRequests")
      |> add_param(:body, :body, microsoft_graph_app_log_collection_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete appLogCollectionRequest
  Deletes a appLogCollectionRequest.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_troubleshooting_event_id` (String.t): The unique identifier of mobileAppTroubleshootingEvent
  - `app_log_collection_request_id` (String.t): The unique identifier of appLogCollectionRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_mobile_app_troubleshooting_events_delete_app_log_collection_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_mobile_app_troubleshooting_events_delete_app_log_collection_requests(connection, mobile_app_troubleshooting_event_id, app_log_collection_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents/#{mobile_app_troubleshooting_event_id}/appLogCollectionRequests/#{app_log_collection_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get appLogCollectionRequest
  Read properties and relationships of the appLogCollectionRequest object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_troubleshooting_event_id` (String.t): The unique identifier of mobileAppTroubleshootingEvent
  - `app_log_collection_request_id` (String.t): The unique identifier of appLogCollectionRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_mobile_app_troubleshooting_events_get_app_log_collection_requests(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_mobile_app_troubleshooting_events_get_app_log_collection_requests(connection, mobile_app_troubleshooting_event_id, app_log_collection_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents/#{mobile_app_troubleshooting_event_id}/appLogCollectionRequests/#{app_log_collection_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_mobile_app_troubleshooting_events_get_count9f2d(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_mobile_app_troubleshooting_events_get_count9f2d(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List appLogCollectionRequests
  List properties and relationships of the appLogCollectionRequest objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_troubleshooting_event_id` (String.t): The unique identifier of mobileAppTroubleshootingEvent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_mobile_app_troubleshooting_events_list_app_log_collection_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequestCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_mobile_app_troubleshooting_events_list_app_log_collection_requests(connection, mobile_app_troubleshooting_event_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents/#{mobile_app_troubleshooting_event_id}/appLogCollectionRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update appLogCollectionRequest
  Update the properties of a appLogCollectionRequest object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_troubleshooting_event_id` (String.t): The unique identifier of mobileAppTroubleshootingEvent
  - `app_log_collection_request_id` (String.t): The unique identifier of appLogCollectionRequest
  - `microsoft_graph_app_log_collection_request` (MicrosoftGraphAppLogCollectionRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_mobile_app_troubleshooting_events_update_app_log_collection_requests(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_mobile_app_troubleshooting_events_update_app_log_collection_requests(connection, mobile_app_troubleshooting_event_id, app_log_collection_request_id, microsoft_graph_app_log_collection_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents/#{mobile_app_troubleshooting_event_id}/appLogCollectionRequests/#{app_log_collection_request_id}")
      |> add_param(:body, :body, microsoft_graph_app_log_collection_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAppLogCollectionRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppTroubleshootingEvent
  Update the properties of a mobileAppTroubleshootingEvent object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_troubleshooting_event_id` (String.t): The unique identifier of mobileAppTroubleshootingEvent
  - `microsoft_graph_mobile_app_troubleshooting_event` (MicrosoftGraphMobileAppTroubleshootingEvent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEvent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_update_mobile_app_troubleshooting_events(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEvent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEvent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_update_mobile_app_troubleshooting_events(connection, mobile_app_troubleshooting_event_id, microsoft_graph_mobile_app_troubleshooting_event, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/mobileAppTroubleshootingEvents/#{mobile_app_troubleshooting_event_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_troubleshooting_event)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppTroubleshootingEvent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
