# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.GroupsSite do
  @moduledoc """
  API calls for all endpoints tagged `GroupsSite`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Get sites from groups
  The list of SharePoint sites in this group. Access the default site with /sites/root.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSite.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_get_sites(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSite.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_get_sites(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSite},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sites from groups
  The list of SharePoint sites in this group. Access the default site with /sites/root.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSiteCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_list_sites(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSiteCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_list_sites(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSiteCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to itemActivityStats for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_item_activity_stat` (MicrosoftGraphItemActivityStat): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_create_item_activity_stats(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_create_item_activity_stats(connection, group_id, site_id, microsoft_graph_item_activity_stat, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats")
      |> add_param(:body, :body, microsoft_graph_item_activity_stat)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property itemActivityStats for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_delete_item_activity_stats(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_delete_item_activity_stats(connection, group_id, site_id, item_activity_stat_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get itemAnalytics
  Get [itemAnalytics][] about the views that took place under this resource. The itemAnalytics resource is a convenient way to get activity stats for allTime and the lastSevenDays. For a custom time range or interval, use the getActivitiesByInterval][] API. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_get_all_time(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_get_all_time(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/allTime")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get itemActivityStats from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_get_item_activity_stats(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_get_item_activity_stats(connection, group_id, site_id, item_activity_stat_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastSevenDays from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_get_last_seven_days(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_get_last_seven_days(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/lastSevenDays")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_item_activity_stats_activities_get_count_adef(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_item_activity_stats_activities_get_count_adef(connection, group_id, site_id, item_activity_stat_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get driveItem from groups
  Exposes the driveItem that was the target of this activity.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_item_activity_stats_activities_get_drive_item(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_item_activity_stats_activities_get_drive_item(connection, group_id, site_id, item_activity_stat_id, item_activity_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}/driveItem")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property driveItem from groups
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_item_activity_stats_activities_get_drive_item_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_item_activity_stats_activities_get_drive_item_content(connection, group_id, site_id, item_activity_stat_id, item_activity_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}/driveItem/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property driveItem in groups
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_item_activity_stats_activities_update_drive_item_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_item_activity_stats_activities_update_drive_item_content(connection, group_id, site_id, item_activity_stat_id, item_activity_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}/driveItem/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to activities for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `microsoft_graph_item_activity` (MicrosoftGraphItemActivity): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_item_activity_stats_create_activities(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_item_activity_stats_create_activities(connection, group_id, site_id, item_activity_stat_id, microsoft_graph_item_activity, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities")
      |> add_param(:body, :body, microsoft_graph_item_activity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property activities for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_item_activity_stats_delete_activities(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_item_activity_stats_delete_activities(connection, group_id, site_id, item_activity_stat_id, item_activity_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activities from groups
  Exposes the itemActivities represented in this itemActivityStat resource.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_item_activity_stats_get_activities(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_item_activity_stats_get_activities(connection, group_id, site_id, item_activity_stat_id, item_activity_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_item_activity_stats_get_count81ab(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_item_activity_stats_get_count81ab(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activities from groups
  Exposes the itemActivities represented in this itemActivityStat resource.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_item_activity_stats_list_activities(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_item_activity_stats_list_activities(connection, group_id, site_id, item_activity_stat_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property activities in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `item_activity_id` (String.t): The unique identifier of itemActivity
  - `microsoft_graph_item_activity` (MicrosoftGraphItemActivity): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_item_activity_stats_update_activities(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivity.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_item_activity_stats_update_activities(connection, group_id, site_id, item_activity_stat_id, item_activity_id, microsoft_graph_item_activity, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}/activities/#{item_activity_id}")
      |> add_param(:body, :body, microsoft_graph_item_activity)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivity},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get itemActivityStats from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStatCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_list_item_activity_stats(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStatCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_list_item_activity_stats(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStatCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property itemActivityStats in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `item_activity_stat_id` (String.t): The unique identifier of itemActivityStat
  - `microsoft_graph_item_activity_stat` (MicrosoftGraphItemActivityStat): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_analytics_update_item_activity_stats(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphItemActivityStat.t} | {:error, Tesla.Env.t}
  def groups_sites_analytics_update_item_activity_stats(connection, group_id, site_id, item_activity_stat_id, microsoft_graph_item_activity_stat, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics/itemActivityStats/#{item_activity_stat_id}")
      |> add_param(:body, :body, microsoft_graph_item_activity_stat)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemActivityStat},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_columns_get_count_c1d5(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_columns_get_count_c1d5(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/columns/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sourceColumn from groups
  The source column for the content type column.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_columns_get_source_column(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_columns_get_source_column(connection, group_id, site_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/columns/#{column_definition_id}/sourceColumn")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_base_types_get_count968b(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_base_types_get_count968b(connection, group_id, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/baseTypes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_column_links_get_count6e1c(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_column_links_get_count6e1c(connection, group_id, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_column_positions_get_count1e7b(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_column_positions_get_count1e7b(connection, group_id, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columnPositions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_columns_get_count7525(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_columns_get_count7525(connection, group_id, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columns/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sourceColumn from groups
  The source column for the content type column.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_columns_get_source_column(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_columns_get_source_column(connection, group_id, site_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}/sourceColumn")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to columnLinks for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_column_link` (MicrosoftGraphColumnLink): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_create_column_links(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_create_column_links(connection, group_id, site_id, content_type_id, microsoft_graph_column_link, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks")
      |> add_param(:body, :body, microsoft_graph_column_link)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a columnDefinition in a content type
  Add a column to a content type][contentType] in a site, or a list with a request that specifies a [columnDefinition][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_create_columns(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_create_columns(connection, group_id, site_id, content_type_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columns")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property columnLinks for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_delete_column_links(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_delete_column_links(connection, group_id, site_id, content_type_id, column_link_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete columnDefinition
  Remove a column][columndefinition] from a [site][], a [list][], or a [content type][contentType]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_delete_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_delete_columns(connection, group_id, site_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get base from groups
  Parent contentType from which this content type is derived.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_get_base(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_get_base(connection, group_id, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/base")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get baseTypes from groups
  The collection of content types that are ancestors of this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `content_type_id1` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_get_base_types(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_get_base_types(connection, group_id, site_id, content_type_id, content_type_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/baseTypes/#{content_type_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnLinks from groups
  The collection of columns that are required by this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_get_column_links(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_get_column_links(connection, group_id, site_id, content_type_id, column_link_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnPositions from groups
  Column order information in a content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_get_column_positions(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_get_column_positions(connection, group_id, site_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columnPositions/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnDefinition
  Retrieve the metadata for a site][], a [list][], or a [contentType][] [column][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_get_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_get_columns(connection, group_id, site_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_get_count4805(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_get_count4805(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get baseTypes from groups
  The collection of content types that are ancestors of this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_list_base_types(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_list_base_types(connection, group_id, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/baseTypes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnLinks from groups
  The collection of columns that are required by this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_list_column_links(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_list_column_links(connection, group_id, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnPositions from groups
  Column order information in a content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_list_column_positions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_list_column_positions(connection, group_id, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columnPositions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List columnDefinitions in a content type
  Get the collection of columns represented as columnDefinition][columnDefinition] resources in a [content type][contentType]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_list_columns(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_list_columns(connection, group_id, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columns")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property columnLinks in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `microsoft_graph_column_link` (MicrosoftGraphColumnLink): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_update_column_links(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_update_column_links(connection, group_id, site_id, content_type_id, column_link_id, microsoft_graph_column_link, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_param(:body, :body, microsoft_graph_column_link)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update columnDefinition
  Update a site][], a [list][], or a [content type][contentType] [column][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_content_types_update_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_content_types_update_columns(connection, group_id, site_id, content_type_id, column_definition_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a columnDefinition in a site
  Create a column for a site][site] with a request that specifies a [columnDefinition][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_create_columns(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_create_columns(connection, group_id, site_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/columns")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a content type
  Create a new contentType][] in a [site][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_content_type` (MicrosoftGraphContentType): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_create_content_types(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphContentType.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_create_content_types(connection, group_id, site_id, microsoft_graph_content_type, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes")
      |> add_param(:body, :body, microsoft_graph_content_type)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a new list
  Create a new list][] in a [site][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_list` (MicrosoftGraphList): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_create_lists(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphList.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphList.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_create_lists(connection, group_id, site_id, microsoft_graph_list, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists")
      |> add_param(:body, :body, microsoft_graph_list)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphList},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to operations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_rich_long_running_operation` (MicrosoftGraphRichLongRunningOperation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_create_operations(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_create_operations(connection, group_id, site_id, microsoft_graph_rich_long_running_operation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/operations")
      |> add_param(:body, :body, microsoft_graph_rich_long_running_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create permission
  Create a new permission object on a site.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_permission` (MicrosoftGraphPermission): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_create_permissions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphPermission.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_create_permissions(connection, group_id, site_id, microsoft_graph_permission, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/permissions")
      |> add_param(:body, :body, microsoft_graph_permission)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to termStores for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_term_store_store` (MicrosoftGraphTermStoreStore): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_create_term_stores(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_create_term_stores(connection, group_id, site_id, microsoft_graph_term_store_store, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores")
      |> add_param(:body, :body, microsoft_graph_term_store_store)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStore},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_created_by_user_get_mailbox_settings(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_created_by_user_get_mailbox_settings(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/createdByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_created_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_created_by_user_list_service_provisioning_errors(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/createdByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_created_by_user_service_provisioning_errors_get_count_d41e(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_created_by_user_service_provisioning_errors_get_count_d41e(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/createdByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_created_by_user_update_mailbox_settings(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_created_by_user_update_mailbox_settings(connection, group_id, site_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/createdByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property analytics for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_delete_analytics(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_delete_analytics(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property columns for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_delete_columns(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_delete_columns(connection, group_id, site_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete contentType
  Remove a content type][contentType] from a [list][] or a [site][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_delete_content_types(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_delete_content_types(connection, group_id, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property lists for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_delete_lists(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_delete_lists(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property onenote for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_delete_onenote(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_delete_onenote(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property operations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `rich_long_running_operation_id` (String.t): The unique identifier of richLongRunningOperation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_delete_operations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_delete_operations(connection, group_id, site_id, rich_long_running_operation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/operations/#{rich_long_running_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete permission
  Delete a permission object on a site. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `permission_id` (String.t): The unique identifier of permission
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_delete_permissions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_delete_permissions(connection, group_id, site_id, permission_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/permissions/#{permission_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property termStore for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_delete_term_store(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_delete_term_store(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property termStores for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_delete_term_stores(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_delete_term_stores(connection, group_id, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_drives_get_count_ba0d(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_drives_get_count_ba0d(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/drives/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_external_columns_get_count_e0e3(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_external_columns_get_count_e0e3(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/externalColumns/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get analytics from groups
  Analytics about the view activities that took place in this site.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_analytics(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_analytics(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemAnalytics},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columns from groups
  The collection of column definitions reusable across lists under this site.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_columns(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_columns(connection, group_id, site_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentType
  Retrieve the metadata for a content type][contentType] in a [site][] or a [list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_content_types(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_content_types(connection, group_id, site_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_count9a08(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_count9a08(connection, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get createdByUser from groups
  Identity of the user who created the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_created_by_user(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_created_by_user(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/createdByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get drive from groups
  The default drive (document library) for this site.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDrive.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_drive(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDrive.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_drive(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/drive")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDrive},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get drives from groups
  The collection of drives (document libraries) under this site.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `drive_id` (String.t): The unique identifier of drive
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDrive.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_drives(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDrive.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_drives(connection, group_id, site_id, drive_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/drives/#{drive_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDrive},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get externalColumns from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_external_columns(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_external_columns(connection, group_id, site_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/externalColumns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get items from groups
  Used to address any item contained in this site. This collection can't be enumerated.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `base_item_id` (String.t): The unique identifier of baseItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBaseItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_items(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphBaseItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_items(connection, group_id, site_id, base_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/items/#{base_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBaseItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastModifiedByUser from groups
  Identity of the user who last modified the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_last_modified_by_user(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_last_modified_by_user(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lastModifiedByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get metadata for a list
  Returns the metadata for a list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_lists(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphList.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_lists(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphList},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get onenote from groups
  Calls the OneNote service for notebook related operations.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenote.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_onenote(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenote.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_onenote(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenote},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get richLongRunningOperation
  Get the status of a rich long-running operation on a site or a list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `rich_long_running_operation_id` (String.t): The unique identifier of richLongRunningOperation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_operations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_operations(connection, group_id, site_id, rich_long_running_operation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/operations/#{rich_long_running_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get permission
  Retrieve the properties and relationships of a permission object on a site. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `permission_id` (String.t): The unique identifier of permission
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_permissions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_permissions(connection, group_id, site_id, permission_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/permissions/#{permission_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sites from groups
  The collection of the sub-sites under this site.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `site_id1` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSite.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_sites(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSite.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_sites(connection, group_id, site_id, site_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/sites/#{site_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSite},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get store
  Read the properties and relationships of a store object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_term_store(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_term_store(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStore},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get termStores from groups
  The collection of termStores under this site.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_get_term_stores(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_get_term_stores(connection, group_id, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStore},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_items_get_count57bf(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_items_get_count57bf(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/items/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_last_modified_by_user_get_mailbox_settings(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_last_modified_by_user_get_mailbox_settings(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lastModifiedByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_last_modified_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_last_modified_by_user_list_service_provisioning_errors(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lastModifiedByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_last_modified_by_user_service_provisioning_errors_get_count_e132(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_last_modified_by_user_service_provisioning_errors_get_count_e132(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lastModifiedByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_last_modified_by_user_update_mailbox_settings(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_last_modified_by_user_update_mailbox_settings(connection, group_id, site_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lastModifiedByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List columns in a site
  Get the collection of columns represented as columnDefinition][columnDefinition] resources in a [site][site]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_list_columns(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_list_columns(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/columns")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List contentTypes in a site
  Get the collection of contentType][contentType] resources in a [site][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_list_content_types(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_list_content_types(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get drives from groups
  The collection of drives (document libraries) under this site.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_list_drives(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_list_drives(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/drives")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get externalColumns from groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_list_external_columns(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_list_external_columns(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/externalColumns")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get items from groups
  Used to address any item contained in this site. This collection can't be enumerated.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBaseItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_list_items(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphBaseItemCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_list_items(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/items")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBaseItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lists in a site
  Get the collection of [lists][] for a [site][]. Lists with the [system][] facet are hidden by default. To list them, include system in your $select statement. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_list_lists(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphListCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_list_lists(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List operations on a site
  Get a list of rich long-running operations associated with a site. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_list_operations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperationCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_list_operations(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/operations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List permissions
  Get the permission resources from the permissions navigation property on a site. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_list_permissions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_list_permissions(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/permissions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List subsites for a site
  Get a collection of subsites defined for a site][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSiteCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_list_sites(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSiteCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_list_sites(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/sites")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSiteCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get termStores from groups
  The collection of termStores under this site.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStoreCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_list_term_stores(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStoreCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_list_term_stores(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStoreCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_columns_get_count_aebb(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_columns_get_count_aebb(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/columns/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sourceColumn from groups
  The source column for the content type column.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_columns_get_source_column(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_columns_get_source_column(connection, group_id, site_id, list_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/columns/#{column_definition_id}/sourceColumn")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_base_types_get_count_bc27(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_base_types_get_count_bc27(connection, group_id, site_id, list_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/baseTypes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_column_links_get_count7d75(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_column_links_get_count7d75(connection, group_id, site_id, list_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columnLinks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_column_positions_get_count_c8a7(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_column_positions_get_count_c8a7(connection, group_id, site_id, list_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columnPositions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_columns_get_count1d9f(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_columns_get_count1d9f(connection, group_id, site_id, list_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columns/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sourceColumn from groups
  The source column for the content type column.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_columns_get_source_column(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_columns_get_source_column(connection, group_id, site_id, list_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}/sourceColumn")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to columnLinks for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_column_link` (MicrosoftGraphColumnLink): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_create_column_links(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_create_column_links(connection, group_id, site_id, list_id, content_type_id, microsoft_graph_column_link, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columnLinks")
      |> add_param(:body, :body, microsoft_graph_column_link)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a columnDefinition in a content type
  Add a column to a content type][contentType] in a site, or a list with a request that specifies a [columnDefinition][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_create_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_create_columns(connection, group_id, site_id, list_id, content_type_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columns")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property columnLinks for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_delete_column_links(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_delete_column_links(connection, group_id, site_id, list_id, content_type_id, column_link_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete columnDefinition
  Remove a column][columndefinition] from a [site][], a [list][], or a [content type][contentType]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_delete_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_delete_columns(connection, group_id, site_id, list_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get base from groups
  Parent contentType from which this content type is derived.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_get_base(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_get_base(connection, group_id, site_id, list_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/base")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get baseTypes from groups
  The collection of content types that are ancestors of this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `content_type_id1` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_get_base_types(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_get_base_types(connection, group_id, site_id, list_id, content_type_id, content_type_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/baseTypes/#{content_type_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnLinks from groups
  The collection of columns that are required by this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_get_column_links(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_get_column_links(connection, group_id, site_id, list_id, content_type_id, column_link_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnPositions from groups
  Column order information in a content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_get_column_positions(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_get_column_positions(connection, group_id, site_id, list_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columnPositions/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnDefinition
  Retrieve the metadata for a site][], a [list][], or a [contentType][] [column][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_get_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_get_columns(connection, group_id, site_id, list_id, content_type_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_get_count_e9e2(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_get_count_e9e2(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get baseTypes from groups
  The collection of content types that are ancestors of this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_list_base_types(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_list_base_types(connection, group_id, site_id, list_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/baseTypes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnLinks from groups
  The collection of columns that are required by this content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_list_column_links(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_list_column_links(connection, group_id, site_id, list_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columnLinks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLinkCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columnPositions from groups
  Column order information in a content type.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_list_column_positions(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_list_column_positions(connection, group_id, site_id, list_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columnPositions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List columnDefinitions in a content type
  Get the collection of columns represented as columnDefinition][columnDefinition] resources in a [content type][contentType]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_list_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_list_columns(connection, group_id, site_id, list_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columns")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property columnLinks in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_link_id` (String.t): The unique identifier of columnLink
  - `microsoft_graph_column_link` (MicrosoftGraphColumnLink): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_update_column_links(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnLink.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_update_column_links(connection, group_id, site_id, list_id, content_type_id, column_link_id, microsoft_graph_column_link, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columnLinks/#{column_link_id}")
      |> add_param(:body, :body, microsoft_graph_column_link)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnLink},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update columnDefinition
  Update a site][], a [list][], or a [content type][contentType] [column][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_content_types_update_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_content_types_update_columns(connection, group_id, site_id, list_id, content_type_id, column_definition_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}/columns/#{column_definition_id}")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a columnDefinition in a list
  Create a column for a list][list] with a request that specifies a [columnDefinition][columnDefinition]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_create_columns(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_create_columns(connection, group_id, site_id, list_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/columns")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentTypes for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `microsoft_graph_content_type` (MicrosoftGraphContentType): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_create_content_types(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphContentType.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_create_content_types(connection, group_id, site_id, list_id, microsoft_graph_content_type, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes")
      |> add_param(:body, :body, microsoft_graph_content_type)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create a new item in a list
  Create a new listItem][] in a [list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `microsoft_graph_list_item` (MicrosoftGraphListItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_create_items(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphListItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_create_items(connection, group_id, site_id, list_id, microsoft_graph_list_item, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items")
      |> add_param(:body, :body, microsoft_graph_list_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to operations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `microsoft_graph_rich_long_running_operation` (MicrosoftGraphRichLongRunningOperation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_create_operations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_create_operations(connection, group_id, site_id, list_id, microsoft_graph_rich_long_running_operation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/operations")
      |> add_param(:body, :body, microsoft_graph_rich_long_running_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to subscriptions for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `microsoft_graph_subscription` (MicrosoftGraphSubscription): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_create_subscriptions(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSubscription.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_create_subscriptions(connection, group_id, site_id, list_id, microsoft_graph_subscription, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/subscriptions")
      |> add_param(:body, :body, microsoft_graph_subscription)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscription},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_created_by_user_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_created_by_user_get_mailbox_settings(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/createdByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_created_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_created_by_user_list_service_provisioning_errors(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/createdByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_created_by_user_service_provisioning_errors_get_count_c250(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_created_by_user_service_provisioning_errors_get_count_c250(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/createdByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_created_by_user_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_created_by_user_update_mailbox_settings(connection, group_id, site_id, list_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/createdByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property columns for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_delete_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_delete_columns(connection, group_id, site_id, list_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentTypes for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_delete_content_types(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_delete_content_types(connection, group_id, site_id, list_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete an item from a list
  Removes an item from a list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_delete_items(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_delete_items(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property operations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `rich_long_running_operation_id` (String.t): The unique identifier of richLongRunningOperation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_delete_operations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_delete_operations(connection, group_id, site_id, list_id, rich_long_running_operation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/operations/#{rich_long_running_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property subscriptions for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `subscription_id` (String.t): The unique identifier of subscription
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_delete_subscriptions(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_delete_subscriptions(connection, group_id, site_id, list_id, subscription_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/subscriptions/#{subscription_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get columns from groups
  The collection of field definitions for this list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_get_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_get_columns(connection, group_id, site_id, list_id, column_definition_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/columns/#{column_definition_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentTypes from groups
  The collection of content types present in this list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_get_content_types(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_get_content_types(connection, group_id, site_id, list_id, content_type_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_get_count338f(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_get_count338f(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get createdByUser from groups
  Identity of the user who created the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_get_created_by_user(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_get_created_by_user(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/createdByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get drive from groups
  Allows access to the list as a drive resource with driveItems. Only present on document libraries.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDrive.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_get_drive(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDrive.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_get_drive(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/drive")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDrive},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get listItem
  Returns the metadata for an item][] in a [list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_get_items(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_get_items(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastModifiedByUser from groups
  Identity of the user who last modified the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_get_last_modified_by_user(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_get_last_modified_by_user(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/lastModifiedByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get operations from groups
  The collection of long-running operations on the list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `rich_long_running_operation_id` (String.t): The unique identifier of richLongRunningOperation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_get_operations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_get_operations(connection, group_id, site_id, list_id, rich_long_running_operation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/operations/#{rich_long_running_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subscriptions from groups
  The set of subscriptions on the list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `subscription_id` (String.t): The unique identifier of subscription
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_get_subscriptions(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_get_subscriptions(connection, group_id, site_id, list_id, subscription_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/subscriptions/#{subscription_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscription},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create documentSetVersion
  Create a new version of a document set item in a list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_document_set_version` (MicrosoftGraphDocumentSetVersion): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_create_document_set_versions(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_create_document_set_versions(connection, group_id, site_id, list_id, list_item_id, microsoft_graph_document_set_version, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/documentSetVersions")
      |> add_param(:body, :body, microsoft_graph_document_set_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to versions for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_list_item_version` (MicrosoftGraphListItemVersion): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_create_versions(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_create_versions(connection, group_id, site_id, list_id, list_item_id, microsoft_graph_list_item_version, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/versions")
      |> add_param(:body, :body, microsoft_graph_list_item_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItemVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_created_by_user_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_created_by_user_get_mailbox_settings(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/createdByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_created_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_created_by_user_list_service_provisioning_errors(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/createdByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_created_by_user_service_provisioning_errors_get_count_bb02(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_created_by_user_service_provisioning_errors_get_count_bb02(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/createdByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_created_by_user_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_created_by_user_update_mailbox_settings(connection, group_id, site_id, list_id, list_item_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/createdByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete documentSetVersion
  Delete a version of a document set in a list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_delete_document_set_versions(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_delete_document_set_versions(connection, group_id, site_id, list_id, list_item_id, document_set_version_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fields for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_delete_fields(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_delete_fields(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property versions for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_delete_versions(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_delete_versions(connection, group_id, site_id, list_id, list_item_id, list_item_version_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/versions/#{list_item_version_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fields for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_document_set_versions_delete_fields(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_document_set_versions_delete_fields(connection, group_id, site_id, list_id, list_item_id, document_set_version_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_document_set_versions_get_count_dcaf(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_document_set_versions_get_count_dcaf(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/documentSetVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fields from groups
  A collection of the fields and values for this version of the list item.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_document_set_versions_get_fields(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_document_set_versions_get_fields(connection, group_id, site_id, list_id, list_item_id, document_set_version_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property fields in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `microsoft_graph_field_value_set` (MicrosoftGraphFieldValueSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_document_set_versions_update_fields(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_document_set_versions_update_fields(connection, group_id, site_id, list_id, list_item_id, document_set_version_id, microsoft_graph_field_value_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}/fields")
      |> add_param(:body, :body, microsoft_graph_field_value_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get analytics from groups
  Analytics about the view activities that took place on this item.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_get_analytics(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_get_analytics(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/analytics")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemAnalytics},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get createdByUser from groups
  Identity of the user who created the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_get_created_by_user(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_get_created_by_user(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/createdByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get documentSetVersion
  Read the properties and relationships of a documentSetVersion object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_get_document_set_versions(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_get_document_set_versions(connection, group_id, site_id, list_id, list_item_id, document_set_version_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get driveItem from groups
  For document libraries, the driveItem relationship exposes the listItem as a [driveItem][]

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_get_drive_item(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_get_drive_item(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/driveItem")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property driveItem from groups
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_get_drive_item_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_get_drive_item_content(connection, group_id, site_id, list_id, list_item_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/driveItem/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fields from groups
  The values of the columns set on this list item.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_get_fields(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_get_fields(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastModifiedByUser from groups
  Identity of the user who last modified the item. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_get_last_modified_by_user(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphUser.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_get_last_modified_by_user(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/lastModifiedByUser")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphUser},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get a ListItemVersion resource
  Retrieve the metadata for a specific version of a ListItem. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_get_versions(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_get_versions(connection, group_id, site_id, list_id, list_item_id, list_item_version_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/versions/#{list_item_version_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItemVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_last_modified_by_user_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_last_modified_by_user_get_mailbox_settings(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/lastModifiedByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_last_modified_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_last_modified_by_user_list_service_provisioning_errors(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/lastModifiedByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_last_modified_by_user_service_provisioning_errors_get_count3e90(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_last_modified_by_user_service_provisioning_errors_get_count3e90(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/lastModifiedByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_last_modified_by_user_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_last_modified_by_user_update_mailbox_settings(connection, group_id, site_id, list_id, list_item_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/lastModifiedByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List documentSetVersions
  Get a list of the versions of a document set item in a list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_list_document_set_versions(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersionCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_list_document_set_versions(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/documentSetVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Listing versions of a ListItem
  SharePoint can be configured to retain the history for list items. Previous versions may be retained for a finite period of time depending on admin settings which may be unique per user or location. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_list_versions(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_list_versions(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/versions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItemVersionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property documentSetVersions in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `microsoft_graph_document_set_version` (MicrosoftGraphDocumentSetVersion): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_update_document_set_versions(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_update_document_set_versions(connection, group_id, site_id, list_id, list_item_id, document_set_version_id, microsoft_graph_document_set_version, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}")
      |> add_param(:body, :body, microsoft_graph_document_set_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDocumentSetVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property driveItem in groups
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_update_drive_item_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_update_drive_item_content(connection, group_id, site_id, list_id, list_item_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/driveItem/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update listItem
  Update the properties on a listItem][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_field_value_set` (MicrosoftGraphFieldValueSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_update_fields(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_update_fields(connection, group_id, site_id, list_id, list_item_id, microsoft_graph_field_value_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/fields")
      |> add_param(:body, :body, microsoft_graph_field_value_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property versions in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `microsoft_graph_list_item_version` (MicrosoftGraphListItemVersion): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_update_versions(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItemVersion.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_update_versions(connection, group_id, site_id, list_id, list_item_id, list_item_version_id, microsoft_graph_list_item_version, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/versions/#{list_item_version_id}")
      |> add_param(:body, :body, microsoft_graph_list_item_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItemVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property fields for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_versions_delete_fields(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_versions_delete_fields(connection, group_id, site_id, list_id, list_item_id, list_item_version_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/versions/#{list_item_version_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_versions_get_count1c13(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_versions_get_count1c13(connection, group_id, site_id, list_id, list_item_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/versions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fields from groups
  A collection of the fields and values for this version of the list item.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_versions_get_fields(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_versions_get_fields(connection, group_id, site_id, list_id, list_item_id, list_item_version_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/versions/#{list_item_version_id}/fields")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property fields in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `microsoft_graph_field_value_set` (MicrosoftGraphFieldValueSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_items_versions_update_fields(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphFieldValueSet.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_items_versions_update_fields(connection, group_id, site_id, list_id, list_item_id, list_item_version_id, microsoft_graph_field_value_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}/versions/#{list_item_version_id}/fields")
      |> add_param(:body, :body, microsoft_graph_field_value_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphFieldValueSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mailboxSettings property value
  Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_last_modified_by_user_get_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_last_modified_by_user_get_mailbox_settings(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/lastModifiedByUser/mailboxSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_last_modified_by_user_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_last_modified_by_user_list_service_provisioning_errors(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/lastModifiedByUser/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_last_modified_by_user_service_provisioning_errors_get_count_f14e(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_last_modified_by_user_service_provisioning_errors_get_count_f14e(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/lastModifiedByUser/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update property mailboxSettings value.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `microsoft_graph_mailbox_settings` (MicrosoftGraphMailboxSettings): New property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_last_modified_by_user_update_mailbox_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMailboxSettings.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_last_modified_by_user_update_mailbox_settings(connection, group_id, site_id, list_id, microsoft_graph_mailbox_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/lastModifiedByUser/mailboxSettings")
      |> add_param(:body, :body, microsoft_graph_mailbox_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMailboxSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List columnDefinitions in a list
  Get the collection of columns represented as columnDefinition][columnDefinition] resources in a [list][list]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_list_columns(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_list_columns(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/columns")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List contentTypes in a list
  Get the collection of contentType][contentType] resources in a [list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_list_content_types(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_list_content_types(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentTypeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Enumerate items in a list
  Get the collection of items][item] in a [list][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_list_items(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphListItemCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_list_items(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get operations from groups
  The collection of long-running operations on the list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_list_operations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperationCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_list_operations(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/operations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get subscriptions from groups
  The set of subscriptions on the list.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscriptionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_list_subscriptions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscriptionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_list_subscriptions(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/subscriptions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscriptionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_operations_get_count3c85(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_operations_get_count3c85(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/operations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_subscriptions_get_count5f55(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_subscriptions_get_count5f55(connection, group_id, site_id, list_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/subscriptions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property columns in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_update_columns(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_update_columns(connection, group_id, site_id, list_id, column_definition_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/columns/#{column_definition_id}")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentTypes in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_content_type` (MicrosoftGraphContentType): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_update_content_types(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphContentType.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_update_content_types(connection, group_id, site_id, list_id, content_type_id, microsoft_graph_content_type, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/contentTypes/#{content_type_id}")
      |> add_param(:body, :body, microsoft_graph_content_type)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property items in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `list_item_id` (String.t): The unique identifier of listItem
  - `microsoft_graph_list_item` (MicrosoftGraphListItem): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_update_items(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphListItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphListItem.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_update_items(connection, group_id, site_id, list_id, list_item_id, microsoft_graph_list_item, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/items/#{list_item_id}")
      |> add_param(:body, :body, microsoft_graph_list_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphListItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property operations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `rich_long_running_operation_id` (String.t): The unique identifier of richLongRunningOperation
  - `microsoft_graph_rich_long_running_operation` (MicrosoftGraphRichLongRunningOperation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_update_operations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_update_operations(connection, group_id, site_id, list_id, rich_long_running_operation_id, microsoft_graph_rich_long_running_operation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/operations/#{rich_long_running_operation_id}")
      |> add_param(:body, :body, microsoft_graph_rich_long_running_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property subscriptions in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `subscription_id` (String.t): The unique identifier of subscription
  - `microsoft_graph_subscription` (MicrosoftGraphSubscription): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_lists_update_subscriptions(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSubscription.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSubscription.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_lists_update_subscriptions(connection, group_id, site_id, list_id, subscription_id, microsoft_graph_subscription, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}/subscriptions/#{subscription_id}")
      |> add_param(:body, :body, microsoft_graph_subscription)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSubscription},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create notebook
  Create a new OneNote notebook. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_notebook` (MicrosoftGraphNotebook): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_create_notebooks(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphNotebook.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_create_notebooks(connection, group_id, site_id, microsoft_graph_notebook, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks")
      |> add_param(:body, :body, microsoft_graph_notebook)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to operations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_onenote_operation` (MicrosoftGraphOnenoteOperation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_create_operations(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_create_operations(connection, group_id, site_id, microsoft_graph_onenote_operation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/operations")
      |> add_param(:body, :body, microsoft_graph_onenote_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create onenotePage
  Create a new OneNote page in the default section of the default notebook. To create a page in a different section in the default notebook, you can use the sectionName query parameter.  Example: ../onenote/pages?sectionName=My%20section The POST /onenote/pages operation is used only to create pages in the current user's default notebook. If you're targeting other notebooks, you can create pages in a specified section.   This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_create_pages(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_create_pages(connection, group_id, site_id, microsoft_graph_onenote_page, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/pages")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resources for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_onenote_resource` (MicrosoftGraphOnenoteResource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_create_resources(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_create_resources(connection, group_id, site_id, microsoft_graph_onenote_resource, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/resources")
      |> add_param(:body, :body, microsoft_graph_onenote_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sectionGroups for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_section_group` (MicrosoftGraphSectionGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_create_section_groups(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_create_section_groups(connection, group_id, site_id, microsoft_graph_section_group, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups")
      |> add_param(:body, :body, microsoft_graph_section_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sections for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_create_sections(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_create_sections(connection, group_id, site_id, microsoft_graph_onenote_section, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property notebooks for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_delete_notebooks(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_delete_notebooks(connection, group_id, site_id, notebook_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property operations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_operation_id` (String.t): The unique identifier of onenoteOperation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_delete_operations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_delete_operations(connection, group_id, site_id, onenote_operation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/operations/#{onenote_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete page
  Delete a OneNote page. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_delete_pages(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_delete_pages(connection, group_id, site_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resources for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_resource_id` (String.t): The unique identifier of onenoteResource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_delete_resources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_delete_resources(connection, group_id, site_id, onenote_resource_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/resources/#{onenote_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sectionGroups for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_delete_section_groups(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_delete_section_groups(connection, group_id, site_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sections for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_delete_sections(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_delete_sections(connection, group_id, site_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get notebook
  Retrieve the properties and relationships of a notebook object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_get_notebooks(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_get_notebooks(connection, group_id, site_id, notebook_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get onenoteOperation
  Get the status of a long-running OneNote operation. This applies to operations that return the Operation-Location header in the response, such as CopyNotebook, CopyToNotebook, CopyToSectionGroup, and CopyToSection.    You can poll the Operation-Location endpoint until the status property returns completed or failed.  If the status is completed, the resourceLocation property contains the resource endpoint URI.  If the status is failed, the error and @api.diagnostics properties provide error information. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_operation_id` (String.t): The unique identifier of onenoteOperation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_get_operations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_get_operations(connection, group_id, site_id, onenote_operation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/operations/#{onenote_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get page
  Retrieve the properties and relationships of a page object. Getting page information Access a page's metadata by page identifier: Getting page content You can use the page's content endpoint to get the HTML content of a page: The includeIDs=true query option is used to update pages. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_get_pages(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_get_pages(connection, group_id, site_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property pages from groups
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_get_pages_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_get_pages_content(connection, group_id, site_id, onenote_page_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/pages/#{onenote_page_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resources from groups
  The image and other file resources in OneNote pages. Getting a resources collection isn't supported, but you can get the binary content of a specific resource. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_resource_id` (String.t): The unique identifier of onenoteResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_get_resources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_get_resources(connection, group_id, site_id, onenote_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/resources/#{onenote_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property resources from groups
  The content stream

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_resource_id` (String.t): The unique identifier of onenoteResource
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_get_resources_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_get_resources_content(connection, group_id, site_id, onenote_resource_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/resources/#{onenote_resource_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sectionGroup
  Retrieve the properties and relationships of a sectionGroup object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_get_section_groups(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_get_section_groups(connection, group_id, site_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get section
  Retrieve the properties and relationships of a onenoteSection object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_get_sections(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_get_sections(connection, group_id, site_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List notebooks
  Retrieve a list of notebook objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebookCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_list_notebooks(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebookCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_list_notebooks(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebookCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get onenoteOperation
  Get the status of a long-running OneNote operation. This applies to operations that return the Operation-Location header in the response, such as CopyNotebook, CopyToNotebook, CopyToSectionGroup, and CopyToSection.    You can poll the Operation-Location endpoint until the status property returns completed or failed.  If the status is completed, the resourceLocation property contains the resource endpoint URI.  If the status is failed, the error and @api.diagnostics properties provide error information. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_list_operations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperationCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_list_operations(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/operations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteOperationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List onenotePages
  Retrieve a list of page objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_list_pages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_list_pages(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/pages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resources from groups
  The image and other file resources in OneNote pages. Getting a resources collection isn't supported, but you can get the binary content of a specific resource. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_list_resources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_list_resources(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/resources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteResourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sectionGroups
  Retrieve a list of sectionGroup objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_list_section_groups(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_list_section_groups(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sections
  Retrieve a list of onenoteSection objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_list_sections(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_list_sections(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create sectionGroup
  Create a new section group in the specified notebook. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `microsoft_graph_section_group` (MicrosoftGraphSectionGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_create_section_groups(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_create_section_groups(connection, group_id, site_id, notebook_id, microsoft_graph_section_group, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups")
      |> add_param(:body, :body, microsoft_graph_section_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create section
  Create a new onenoteSection in the specified notebook. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_create_sections(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_create_sections(connection, group_id, site_id, notebook_id, microsoft_graph_onenote_section, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sectionGroups for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_delete_section_groups(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_delete_section_groups(connection, group_id, site_id, notebook_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sections for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_delete_sections(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_delete_sections(connection, group_id, site_id, notebook_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_get_count4d42(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_get_count4d42(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sectionGroups from groups
  The section groups in the notebook. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_get_section_groups(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_get_section_groups(connection, group_id, site_id, notebook_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sections from groups
  The sections in the notebook. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_get_sections(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_get_sections(connection, group_id, site_id, notebook_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sectionGroups
  Retrieve a list of section groups from the specified notebook. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_list_section_groups(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_list_section_groups(connection, group_id, site_id, notebook_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sections
  Retrieve a list of onenoteSection objects from the specified notebook. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_list_sections(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_list_sections(connection, group_id, site_id, notebook_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create section
  Create a new onenoteSection in the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_create_sections(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_create_sections(connection, group_id, site_id, notebook_id, section_group_id, microsoft_graph_onenote_section, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sections for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_delete_sections(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_delete_sections(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_get_count_b8c2(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_get_count_b8c2(connection, group_id, site_id, notebook_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from groups
  The notebook that contains the section group. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_get_parent_notebook(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_get_parent_notebook(connection, group_id, site_id, notebook_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from groups
  The section group that contains the section group. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_get_parent_section_group(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_get_parent_section_group(connection, group_id, site_id, notebook_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/parentSectionGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sectionGroups from groups
  The section groups in the section. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `section_group_id1` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_get_section_groups(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_get_section_groups(connection, group_id, site_id, notebook_id, section_group_id, section_group_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sectionGroups/#{section_group_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sections from groups
  The sections in the section group. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_get_sections(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_get_sections(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sectionGroups
  Retrieve a list of section groups from the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_list_section_groups(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_list_section_groups(connection, group_id, site_id, notebook_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sectionGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sections
  Retrieve a list of onenoteSection objects from the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_list_sections(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_list_sections(connection, group_id, site_id, notebook_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_section_groups_get_count_b8c2(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_section_groups_get_count_b8c2(connection, group_id, site_id, notebook_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sectionGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create page
  Create a new page in the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_create_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_create_pages(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, microsoft_graph_onenote_page, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property pages for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_delete_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_delete_pages(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_get_count17fa(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_get_count17fa(connection, group_id, site_id, notebook_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get pages from groups
  The collection of pages in the section.  Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_get_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_get_pages(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property pages from groups
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_get_pages_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_get_pages_content(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, onenote_page_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from groups
  The notebook that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_get_parent_notebook(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_get_parent_notebook(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from groups
  The section group that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_get_parent_section_group(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_get_parent_section_group(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/parentSectionGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List pages
  Retrieve a list of page objects from the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_list_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_list_pages(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_pages_get_count_e302(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_pages_get_count_e302(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from groups
  The notebook that contains the page.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_pages_get_parent_notebook(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_pages_get_parent_notebook(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSection from groups
  The section that contains the page. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_pages_get_parent_section(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_pages_get_parent_section(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentSection")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pages in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_update_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_update_pages(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, onenote_page_id, microsoft_graph_onenote_page, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property pages in groups
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_sections_update_pages_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_sections_update_pages_content(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, onenote_page_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sections in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_section_groups_update_sections(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_section_groups_update_sections(connection, group_id, site_id, notebook_id, section_group_id, onenote_section_id, microsoft_graph_onenote_section, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create page
  Create a new page in the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_create_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_create_pages(connection, group_id, site_id, notebook_id, onenote_section_id, microsoft_graph_onenote_page, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property pages for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_delete_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_delete_pages(connection, group_id, site_id, notebook_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_get_count3eb3(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_get_count3eb3(connection, group_id, site_id, notebook_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get pages from groups
  The collection of pages in the section.  Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_get_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_get_pages(connection, group_id, site_id, notebook_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property pages from groups
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_get_pages_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_get_pages_content(connection, group_id, site_id, notebook_id, onenote_section_id, onenote_page_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from groups
  The notebook that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_get_parent_notebook(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_get_parent_notebook(connection, group_id, site_id, notebook_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from groups
  The section group that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_get_parent_section_group(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_get_parent_section_group(connection, group_id, site_id, notebook_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/parentSectionGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List pages
  Retrieve a list of page objects from the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_list_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_list_pages(connection, group_id, site_id, notebook_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_pages_get_count8ff7(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_pages_get_count8ff7(connection, group_id, site_id, notebook_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from groups
  The notebook that contains the page.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_pages_get_parent_notebook(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_pages_get_parent_notebook(connection, group_id, site_id, notebook_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSection from groups
  The section that contains the page. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_pages_get_parent_section(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_pages_get_parent_section(connection, group_id, site_id, notebook_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentSection")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pages in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_update_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_update_pages(connection, group_id, site_id, notebook_id, onenote_section_id, onenote_page_id, microsoft_graph_onenote_page, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property pages in groups
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_sections_update_pages_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_sections_update_pages_content(connection, group_id, site_id, notebook_id, onenote_section_id, onenote_page_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sectionGroups in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `microsoft_graph_section_group` (MicrosoftGraphSectionGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_update_section_groups(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_update_section_groups(connection, group_id, site_id, notebook_id, section_group_id, microsoft_graph_section_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}")
      |> add_param(:body, :body, microsoft_graph_section_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sections in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_notebooks_update_sections(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_notebooks_update_sections(connection, group_id, site_id, notebook_id, onenote_section_id, microsoft_graph_onenote_section, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_operations_get_count_c658(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_operations_get_count_c658(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/operations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_pages_get_count5751(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_pages_get_count5751(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/pages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from groups
  The notebook that contains the page.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_pages_get_parent_notebook(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_pages_get_parent_notebook(connection, group_id, site_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/pages/#{onenote_page_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSection from groups
  The section that contains the page. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_pages_get_parent_section(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_pages_get_parent_section(connection, group_id, site_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/pages/#{onenote_page_id}/parentSection")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_resources_get_count08d2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_resources_get_count08d2(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/resources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create section
  Create a new onenoteSection in the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_create_sections(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_create_sections(connection, group_id, site_id, section_group_id, microsoft_graph_onenote_section, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sections for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_delete_sections(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_delete_sections(connection, group_id, site_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_get_count_c957(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_get_count_c957(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from groups
  The notebook that contains the section group. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_get_parent_notebook(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_get_parent_notebook(connection, group_id, site_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from groups
  The section group that contains the section group. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_get_parent_section_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_get_parent_section_group(connection, group_id, site_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/parentSectionGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sectionGroups from groups
  The section groups in the section. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `section_group_id1` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_get_section_groups(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_get_section_groups(connection, group_id, site_id, section_group_id, section_group_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sectionGroups/#{section_group_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sections from groups
  The sections in the section group. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_get_sections(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_get_sections(connection, group_id, site_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sectionGroups
  Retrieve a list of section groups from the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_list_section_groups(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_list_section_groups(connection, group_id, site_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sectionGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sections
  Retrieve a list of onenoteSection objects from the specified section group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_list_sections(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_list_sections(connection, group_id, site_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSectionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_section_groups_get_count_c957(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_section_groups_get_count_c957(connection, group_id, site_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sectionGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create page
  Create a new page in the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_create_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_create_pages(connection, group_id, site_id, section_group_id, onenote_section_id, microsoft_graph_onenote_page, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property pages for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_delete_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_delete_pages(connection, group_id, site_id, section_group_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_get_count60a8(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_get_count60a8(connection, group_id, site_id, section_group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get pages from groups
  The collection of pages in the section.  Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_get_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_get_pages(connection, group_id, site_id, section_group_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property pages from groups
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_get_pages_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_get_pages_content(connection, group_id, site_id, section_group_id, onenote_section_id, onenote_page_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from groups
  The notebook that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_get_parent_notebook(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_get_parent_notebook(connection, group_id, site_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from groups
  The section group that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_get_parent_section_group(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_get_parent_section_group(connection, group_id, site_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/parentSectionGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List pages
  Retrieve a list of page objects from the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_list_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_list_pages(connection, group_id, site_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_pages_get_count_f260(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_pages_get_count_f260(connection, group_id, site_id, section_group_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from groups
  The notebook that contains the page.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_pages_get_parent_notebook(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_pages_get_parent_notebook(connection, group_id, site_id, section_group_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSection from groups
  The section that contains the page. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_pages_get_parent_section(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_pages_get_parent_section(connection, group_id, site_id, section_group_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentSection")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pages in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_update_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_update_pages(connection, group_id, site_id, section_group_id, onenote_section_id, onenote_page_id, microsoft_graph_onenote_page, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property pages in groups
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_sections_update_pages_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_sections_update_pages_content(connection, group_id, site_id, section_group_id, onenote_section_id, onenote_page_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sections in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_section_groups_update_sections(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_section_groups_update_sections(connection, group_id, site_id, section_group_id, onenote_section_id, microsoft_graph_onenote_section, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create page
  Create a new page in the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_create_pages(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_create_pages(connection, group_id, site_id, onenote_section_id, microsoft_graph_onenote_page, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property pages for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_delete_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_delete_pages(connection, group_id, site_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_get_count361f(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_get_count361f(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get pages from groups
  The collection of pages in the section.  Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_get_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_get_pages(connection, group_id, site_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property pages from groups
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_get_pages_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_get_pages_content(connection, group_id, site_id, onenote_section_id, onenote_page_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from groups
  The notebook that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_get_parent_notebook(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_get_parent_notebook(connection, group_id, site_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSectionGroup from groups
  The section group that contains the section.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_get_parent_section_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_get_parent_section_group(connection, group_id, site_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/parentSectionGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List pages
  Retrieve a list of page objects from the specified section. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_list_pages(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_list_pages(connection, group_id, site_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_pages_get_count859e(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_pages_get_count859e(connection, group_id, site_id, onenote_section_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentNotebook from groups
  The notebook that contains the page.  Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_pages_get_parent_notebook(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_pages_get_parent_notebook(connection, group_id, site_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentNotebook")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentSection from groups
  The section that contains the page. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_pages_get_parent_section(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_pages_get_parent_section(connection, group_id, site_id, onenote_section_id, onenote_page_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/parentSection")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pages in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_update_pages(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_update_pages(connection, group_id, site_id, onenote_section_id, onenote_page_id, microsoft_graph_onenote_page, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property pages in groups
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_sections_update_pages_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_sections_update_pages_content(connection, group_id, site_id, onenote_section_id, onenote_page_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property notebooks in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `notebook_id` (String.t): The unique identifier of notebook
  - `microsoft_graph_notebook` (MicrosoftGraphNotebook): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_update_notebooks(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphNotebook.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphNotebook.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_update_notebooks(connection, group_id, site_id, notebook_id, microsoft_graph_notebook, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/notebooks/#{notebook_id}")
      |> add_param(:body, :body, microsoft_graph_notebook)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphNotebook},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property operations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_operation_id` (String.t): The unique identifier of onenoteOperation
  - `microsoft_graph_onenote_operation` (MicrosoftGraphOnenoteOperation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_update_operations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_update_operations(connection, group_id, site_id, onenote_operation_id, microsoft_graph_onenote_operation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/operations/#{onenote_operation_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property pages in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `microsoft_graph_onenote_page` (MicrosoftGraphOnenotePage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_update_pages(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_update_pages(connection, group_id, site_id, onenote_page_id, microsoft_graph_onenote_page, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/pages/#{onenote_page_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_page)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property pages in groups
  The page's HTML content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_update_pages_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenotePage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_update_pages_content(connection, group_id, site_id, onenote_page_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/pages/#{onenote_page_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenotePage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resources in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_resource_id` (String.t): The unique identifier of onenoteResource
  - `microsoft_graph_onenote_resource` (MicrosoftGraphOnenoteResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_update_resources(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_update_resources(connection, group_id, site_id, onenote_resource_id, microsoft_graph_onenote_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/resources/#{onenote_resource_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property resources in groups
  The content stream

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_resource_id` (String.t): The unique identifier of onenoteResource
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_update_resources_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_update_resources_content(connection, group_id, site_id, onenote_resource_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/resources/#{onenote_resource_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sectionGroups in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `microsoft_graph_section_group` (MicrosoftGraphSectionGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_update_section_groups(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSectionGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_update_section_groups(connection, group_id, site_id, section_group_id, microsoft_graph_section_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sectionGroups/#{section_group_id}")
      |> add_param(:body, :body, microsoft_graph_section_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSectionGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sections in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `microsoft_graph_onenote_section` (MicrosoftGraphOnenoteSection): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_onenote_update_sections(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenoteSection.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_onenote_update_sections(connection, group_id, site_id, onenote_section_id, microsoft_graph_onenote_section, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote/sections/#{onenote_section_id}")
      |> add_param(:body, :body, microsoft_graph_onenote_section)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenoteSection},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_operations_get_count3fe8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_operations_get_count3fe8(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/operations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_permissions_get_count_a797(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_permissions_get_count_a797(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/permissions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_sites_get_count9a08(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_sites_get_count9a08(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/sites/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create termStore group
  Create a new group object in a term store. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_create_groups(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_create_groups(connection, group_id, site_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create termStore set
  Create a new set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_create_sets(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_create_sets(connection, group_id, site_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete group
  Delete a group object in a term store]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_delete_groups(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_delete_groups(connection, group_id, site_id, group_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete set
  Delete a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_delete_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_delete_sets(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group
  Read the properties and relationships of a term store group object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_get_groups(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_get_groups(connection, group_id, site_id, group_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set
  Read the properties and relationships of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_get_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_get_sets(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sets for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_create_sets(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_create_sets(connection, group_id, site_id, group_id1, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sets for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_delete_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_delete_sets(connection, group_id, site_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_get_count_cc52(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_get_count_cc52(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sets from groups
  All sets under the group in a term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_get_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_get_sets(connection, group_id, site_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sets
  Get a list of the set objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_list_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_list_sets(connection, group_id, site_id, group_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_children_create_relations(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_children_delete_relations(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_children_get_count74e2(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_children_get_count74e2(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_children_get_relations(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_children_get_set(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_children_list_relations(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_children_relations_get_count6f37(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_children_relations_get_count6f37(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_children_relations_get_from_term(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_children_relations_get_set(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_children_relations_get_to_term(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_children_update_relations(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_create_children(connection, group_id, site_id, group_id1, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_create_relations(connection, group_id, site_id, group_id1, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_delete_children(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_delete_relations(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_get_children(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_get_count74e2(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_get_count74e2(connection, group_id, site_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_get_relations(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_get_set(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_list_children(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_list_relations(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_relations_get_count6f37(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_relations_get_count6f37(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_relations_get_from_term(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_relations_get_set(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_relations_get_to_term(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_update_children(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_children_update_relations(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_create_children(connection, group_id, site_id, group_id1, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_create_relations(connection, group_id, site_id, group_id1, set_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_create_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_create_terms(connection, group_id, site_id, group_id1, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_delete_children(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property parentGroup for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_delete_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_delete_parent_group(connection, group_id, site_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_delete_relations(connection, group_id, site_id, group_id1, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_delete_terms(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_get_children(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_get_count4bca(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_get_count4bca(connection, group_id, site_id, group_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentGroup from groups
  The parent [group] that contains the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_get_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_get_parent_group(connection, group_id, site_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_get_relations(connection, group_id, site_id, group_id1, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_get_terms(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_list_children(connection, group_id, site_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_list_relations(connection, group_id, site_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_list_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_list_terms(connection, group_id, site_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_relations_get_count0ded(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_relations_get_count0ded(connection, group_id, site_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_relations_get_from_term(connection, group_id, site_id, group_id1, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_relations_get_set(connection, group_id, site_id, group_id1, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_relations_get_to_term(connection, group_id, site_id, group_id1, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_children_create_relations(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_children_delete_relations(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_children_get_count1121(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_children_get_count1121(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_children_get_relations(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_children_get_set(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_children_list_relations(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_children_relations_get_count1c30(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_children_relations_get_count1c30(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_children_relations_get_from_term(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_children_relations_get_set(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_children_relations_get_to_term(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_children_update_relations(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_create_children(connection, group_id, site_id, group_id1, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_create_relations(connection, group_id, site_id, group_id1, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_delete_children(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_delete_relations(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_get_children(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_get_count_d756(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_get_count_d756(connection, group_id, site_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_get_relations(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_get_set(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_list_children(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_list_relations(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_relations_get_count5947(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_relations_get_count5947(connection, group_id, site_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_relations_get_from_term(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_relations_get_set(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_relations_get_to_term(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_update_children(connection, group_id, site_id, group_id1, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_terms_update_relations(connection, group_id, site_id, group_id1, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_update_children(connection, group_id, site_id, group_id1, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property parentGroup in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_update_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_update_parent_group(connection, group_id, site_id, group_id1, set_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/parentGroup")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_update_relations(connection, group_id, site_id, group_id1, set_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_sets_update_terms(connection, group_id, site_id, group_id1, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sets in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_groups_update_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_groups_update_sets(connection, group_id, site_id, group_id1, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}/sets/#{set_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List termStore groups
  Get a list of group objects in a term store. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_list_groups(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_list_groups(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set
  Read the properties and relationships of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_list_sets(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_list_sets(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_children_create_relations(connection, group_id, site_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_children_delete_relations(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_children_get_count74e2(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_children_get_count74e2(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_children_get_relations(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_children_get_set(connection, group_id, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_children_list_relations(connection, group_id, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_children_relations_get_count6f37(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_children_relations_get_count6f37(connection, group_id, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_children_relations_get_from_term(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_children_relations_get_set(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_children_relations_get_to_term(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_children_update_relations(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_create_children(connection, group_id, site_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_create_relations(connection, group_id, site_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_delete_children(connection, group_id, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_delete_relations(connection, group_id, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_get_children(connection, group_id, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_get_count74e2(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_get_count74e2(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_get_relations(connection, group_id, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_get_set(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_list_children(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_list_relations(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_relations_get_count6f37(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_relations_get_count6f37(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_relations_get_from_term(connection, group_id, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_relations_get_set(connection, group_id, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_relations_get_to_term(connection, group_id, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_update_children(connection, group_id, site_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_children_update_relations(connection, group_id, site_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_create_children(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_create_children(connection, group_id, site_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_create_relations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_create_relations(connection, group_id, site_id, set_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_create_terms(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_create_terms(connection, group_id, site_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_delete_children(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property parentGroup for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_delete_parent_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_delete_parent_group(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_delete_relations(connection, group_id, site_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_delete_terms(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_get_children(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_get_count4bca(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_get_count4bca(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentGroup from groups
  The parent [group] that contains the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_get_parent_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_get_parent_group(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_get_relations(connection, group_id, site_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_get_terms(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_list_children(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_list_children(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_list_relations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_list_relations(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_list_terms(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_list_terms(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sets for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_create_sets(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_create_sets(connection, group_id, site_id, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sets for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_delete_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_delete_sets(connection, group_id, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sets from groups
  All sets under the group in a term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_get_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_get_sets(connection, group_id, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sets
  Get a list of the set objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_list_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_list_sets(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_children_create_relations(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_children_delete_relations(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_children_get_count_f5ef(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_children_get_count_f5ef(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_children_get_relations(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_children_get_set(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_children_list_relations(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_children_relations_get_count764f(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_children_relations_get_count764f(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_children_relations_get_from_term(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_children_relations_get_set(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_children_relations_get_to_term(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_children_update_relations(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_create_children(connection, group_id, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_create_relations(connection, group_id, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_delete_children(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_delete_relations(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_get_children(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_get_count_f5ef(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_get_count_f5ef(connection, group_id, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_get_relations(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_get_set(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_list_children(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_list_relations(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_relations_get_count764f(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_relations_get_count764f(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_relations_get_from_term(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_relations_get_set(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_relations_get_to_term(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_update_children(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_children_update_relations(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_create_children(connection, group_id, site_id, set_id, set_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_create_relations(connection, group_id, site_id, set_id, set_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_create_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_create_terms(connection, group_id, site_id, set_id, set_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_delete_children(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_delete_relations(connection, group_id, site_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_delete_terms(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_get_children(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_get_count_a575(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_get_count_a575(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_get_relations(connection, group_id, site_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_get_terms(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_list_children(connection, group_id, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_list_relations(connection, group_id, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_list_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_list_terms(connection, group_id, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_relations_get_count340c(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_relations_get_count340c(connection, group_id, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_relations_get_from_term(connection, group_id, site_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_relations_get_set(connection, group_id, site_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_relations_get_to_term(connection, group_id, site_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_children_create_relations(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_children_delete_relations(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_children_get_count5b79(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_children_get_count5b79(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_children_get_relations(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_children_get_set(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_children_list_relations(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_children_relations_get_count0b7e(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_children_relations_get_count0b7e(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_children_relations_get_from_term(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_children_relations_get_set(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_children_relations_get_to_term(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_children_update_relations(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_create_children(connection, group_id, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_create_relations(connection, group_id, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_delete_children(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_delete_relations(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_get_children(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_get_count0c41(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_get_count0c41(connection, group_id, site_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_get_relations(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_get_set(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_list_children(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_list_relations(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_relations_get_count8176(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_relations_get_count8176(connection, group_id, site_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_relations_get_from_term(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_relations_get_set(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_relations_get_to_term(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_update_children(connection, group_id, site_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_terms_update_relations(connection, group_id, site_id, set_id, set_id1, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_update_children(connection, group_id, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_update_relations(connection, group_id, site_id, set_id, set_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_sets_update_terms(connection, group_id, site_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sets in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_parent_group_update_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_parent_group_update_sets(connection, group_id, site_id, set_id, set_id1, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_relations_get_count0ded(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_relations_get_count0ded(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_relations_get_from_term(connection, group_id, site_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_relations_get_set(connection, group_id, site_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_relations_get_to_term(connection, group_id, site_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_children_create_relations(connection, group_id, site_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_children_delete_relations(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_children_get_count1121(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_children_get_count1121(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_children_get_relations(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_children_get_set(connection, group_id, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_children_list_relations(connection, group_id, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_children_relations_get_count1c30(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_children_relations_get_count1c30(connection, group_id, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_children_relations_get_from_term(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_children_relations_get_set(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_children_relations_get_to_term(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_children_update_relations(connection, group_id, site_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_create_children(connection, group_id, site_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_create_relations(connection, group_id, site_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_delete_children(connection, group_id, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_delete_relations(connection, group_id, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_get_children(connection, group_id, site_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_get_count_d756(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_get_count_d756(connection, group_id, site_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_get_relations(connection, group_id, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_get_set(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_list_children(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_list_relations(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_relations_get_count5947(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_relations_get_count5947(connection, group_id, site_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_relations_get_from_term(connection, group_id, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_relations_get_set(connection, group_id, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_relations_get_to_term(connection, group_id, site_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_update_children(connection, group_id, site_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_terms_update_relations(connection, group_id, site_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_update_children(connection, group_id, site_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property parentGroup in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_update_parent_group(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_update_parent_group(connection, group_id, site_id, set_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/parentGroup")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_update_relations(connection, group_id, site_id, set_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_sets_update_terms(connection, group_id, site_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property groups in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `group_id1` (String.t): The unique identifier of group
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_update_groups(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_update_groups(connection, group_id, site_id, group_id1, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/groups/#{group_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update set
  Update the properties of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_store_update_sets(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_store_update_sets(connection, group_id, site_id, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore/sets/#{set_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create termStore group
  Create a new group object in a term store. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_create_groups(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_create_groups(connection, group_id, site_id, store_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create termStore set
  Create a new set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_create_sets(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_create_sets(connection, group_id, site_id, store_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete group
  Delete a group object in a term store]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_delete_groups(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_delete_groups(connection, group_id, site_id, store_id, group_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete set
  Delete a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_delete_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_delete_sets(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_get_count_e001(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_get_count_e001(connection, group_id, site_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group
  Read the properties and relationships of a term store group object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_get_groups(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_get_groups(connection, group_id, site_id, store_id, group_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set
  Read the properties and relationships of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_get_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_get_sets(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sets for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_create_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_create_sets(connection, group_id, site_id, store_id, group_id1, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sets for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_delete_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_delete_sets(connection, group_id, site_id, store_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_get_count_e001(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_get_count_e001(connection, group_id, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sets from groups
  All sets under the group in a term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_get_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_get_sets(connection, group_id, site_id, store_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sets
  Get a list of the set objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_list_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_list_sets(connection, group_id, site_id, store_id, group_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_children_create_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_children_delete_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_children_get_count9d6e(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_children_get_count9d6e(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_children_get_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_children_get_set(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_children_list_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_children_relations_get_count66d5(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_children_relations_get_count66d5(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_children_relations_get_from_term(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_children_relations_get_set(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_children_relations_get_to_term(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_children_update_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_create_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_create_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_delete_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_delete_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_get_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_get_count9d6e(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_get_count9d6e(connection, group_id, site_id, store_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_get_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_get_set(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_list_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_list_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_relations_get_count66d5(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_relations_get_count66d5(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_relations_get_from_term(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_relations_get_set(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_relations_get_to_term(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_update_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_children_update_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_create_children(connection, group_id, site_id, store_id, group_id1, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_create_relations(connection, group_id, site_id, store_id, group_id1, set_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_create_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_create_terms(connection, group_id, site_id, store_id, group_id1, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_delete_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property parentGroup for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_delete_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_delete_parent_group(connection, group_id, site_id, store_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_delete_relations(connection, group_id, site_id, store_id, group_id1, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_delete_terms(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_get_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_get_count_ceb2(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_get_count_ceb2(connection, group_id, site_id, store_id, group_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentGroup from groups
  The parent [group] that contains the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_get_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_get_parent_group(connection, group_id, site_id, store_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_get_relations(connection, group_id, site_id, store_id, group_id1, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_get_terms(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_list_children(connection, group_id, site_id, store_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_list_relations(connection, group_id, site_id, store_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_list_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_list_terms(connection, group_id, site_id, store_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_relations_get_count_f318(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_relations_get_count_f318(connection, group_id, site_id, store_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_relations_get_from_term(connection, group_id, site_id, store_id, group_id1, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_relations_get_set(connection, group_id, site_id, store_id, group_id1, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_relations_get_to_term(connection, group_id, site_id, store_id, group_id1, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_children_create_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_children_delete_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_children_get_count2d29(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_children_get_count2d29(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_children_get_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_children_get_set(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_children_list_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_children_relations_get_count_de60(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_children_relations_get_count_de60(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_children_relations_get_from_term(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_children_relations_get_set(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_children_relations_get_to_term(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_children_update_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_create_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_create_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_delete_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_delete_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_get_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_get_count4072(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_get_count4072(connection, group_id, site_id, store_id, group_id1, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_get_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_get_set(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_list_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_list_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_relations_get_count602b(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_relations_get_count602b(connection, group_id, site_id, store_id, group_id1, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_relations_get_from_term(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_relations_get_set(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_relations_get_to_term(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_update_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_terms_update_relations(connection, group_id, site_id, store_id, group_id1, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_update_children(connection, group_id, site_id, store_id, group_id1, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property parentGroup in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_update_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_update_parent_group(connection, group_id, site_id, store_id, group_id1, set_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/parentGroup")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_update_relations(connection, group_id, site_id, store_id, group_id1, set_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_sets_update_terms(connection, group_id, site_id, store_id, group_id1, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sets in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_groups_update_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_groups_update_sets(connection, group_id, site_id, store_id, group_id1, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}/sets/#{set_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List termStore groups
  Get a list of group objects in a term store. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_list_groups(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_list_groups(connection, group_id, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set
  Read the properties and relationships of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_list_sets(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_list_sets(connection, group_id, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_children_create_relations(connection, group_id, site_id, store_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_children_delete_relations(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_children_get_count9d6e(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_children_get_count9d6e(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_children_get_relations(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_children_get_set(connection, group_id, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_children_list_relations(connection, group_id, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_children_relations_get_count66d5(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_children_relations_get_count66d5(connection, group_id, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_children_relations_get_from_term(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_children_relations_get_set(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_children_relations_get_to_term(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_children_update_relations(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_create_children(connection, group_id, site_id, store_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_create_relations(connection, group_id, site_id, store_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_delete_children(connection, group_id, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_delete_relations(connection, group_id, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_get_children(connection, group_id, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_get_count9d6e(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_get_count9d6e(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_get_relations(connection, group_id, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_get_set(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_list_children(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_list_relations(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_relations_get_count66d5(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_relations_get_count66d5(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_relations_get_from_term(connection, group_id, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_relations_get_set(connection, group_id, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_relations_get_to_term(connection, group_id, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_update_children(connection, group_id, site_id, store_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_children_update_relations(connection, group_id, site_id, store_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_create_children(connection, group_id, site_id, store_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_create_relations(connection, group_id, site_id, store_id, set_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_create_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_create_terms(connection, group_id, site_id, store_id, set_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_delete_children(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property parentGroup for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_delete_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_delete_parent_group(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_delete_relations(connection, group_id, site_id, store_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_delete_terms(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_get_children(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_get_count_ceb2(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_get_count_ceb2(connection, group_id, site_id, store_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parentGroup from groups
  The parent [group] that contains the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_get_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_get_parent_group(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_get_relations(connection, group_id, site_id, store_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_get_terms(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_list_children(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_list_relations(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_list_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_list_terms(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sets for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_create_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_create_sets(connection, group_id, site_id, store_id, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property sets for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_delete_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_delete_sets(connection, group_id, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sets from groups
  All sets under the group in a term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_get_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_get_sets(connection, group_id, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sets
  Get a list of the set objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_list_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_list_sets(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_children_create_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_children_delete_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_children_get_count_d1bd(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_children_get_count_d1bd(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_children_get_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_children_get_set(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_children_list_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_children_relations_get_count2349(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_children_relations_get_count2349(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_children_relations_get_from_term(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_children_relations_get_set(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_children_relations_get_to_term(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_children_update_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_create_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_create_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_delete_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_delete_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_get_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_get_count_d1bd(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_get_count_d1bd(connection, group_id, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_get_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_get_set(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_list_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_list_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_relations_get_count2349(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_relations_get_count2349(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_relations_get_from_term(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_relations_get_set(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_relations_get_to_term(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_update_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_children_update_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create term
  Create a new term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_create_children(connection, group_id, site_id, store_id, set_id, set_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_create_relations(connection, group_id, site_id, store_id, set_id, set_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to terms for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_create_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_create_terms(connection, group_id, site_id, store_id, set_id, set_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_delete_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_delete_relations(connection, group_id, site_id, store_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete term
  Delete a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_delete_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_delete_terms(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children terms of set in term [store].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_get_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_get_count12d6(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_get_count12d6(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  Indicates which terms have been pinned or reused directly under the set.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_get_relations(connection, group_id, site_id, store_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_get_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_get_terms(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List children
  Get the first level children of a set] or [term] resource using the children navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_list_children(connection, group_id, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List relations
  Get the different relation of a term] or [set] from the relations navigation property. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_list_relations(connection, group_id, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get term
  Read the properties and relationships of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_list_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_list_terms(connection, group_id, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_relations_get_count4e99(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_relations_get_count4e99(connection, group_id, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_relations_get_from_term(connection, group_id, site_id, store_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_relations_get_set(connection, group_id, site_id, store_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_relations_get_to_term(connection, group_id, site_id, store_id, set_id, set_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_children_create_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_children_delete_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_children_get_count_de56(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_children_get_count_de56(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_children_get_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_children_get_set(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_children_list_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_children_relations_get_count9206(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_children_relations_get_count9206(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_children_relations_get_from_term(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_children_relations_get_set(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_children_relations_get_to_term(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_children_update_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_create_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_create_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_delete_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_delete_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_get_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_get_count_c418(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_get_count_c418(connection, group_id, site_id, store_id, set_id, set_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_get_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_get_set(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_list_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_list_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_relations_get_count5399(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_relations_get_count5399(connection, group_id, site_id, store_id, set_id, set_id1, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_relations_get_from_term(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_relations_get_set(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_relations_get_to_term(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_update_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_terms_update_relations(connection, group_id, site_id, store_id, set_id, set_id1, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_update_children(connection, group_id, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_update_relations(connection, group_id, site_id, store_id, set_id, set_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_sets_update_terms(connection, group_id, site_id, store_id, set_id, set_id1, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sets in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `set_id1` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_parent_group_update_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_parent_group_update_sets(connection, group_id, site_id, store_id, set_id, set_id1, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup/sets/#{set_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_relations_get_count_f318(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_relations_get_count_f318(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_relations_get_from_term(connection, group_id, site_id, store_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_relations_get_set(connection, group_id, site_id, store_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_relations_get_to_term(connection, group_id, site_id, store_id, set_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_children_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_children_create_relations(connection, group_id, site_id, store_id, set_id, term_id, term_id1, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_children_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_children_delete_relations(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_children_get_count2d29(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_children_get_count2d29(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_children_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_children_get_relations(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_children_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_children_get_set(connection, group_id, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_children_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_children_list_relations(connection, group_id, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_children_relations_get_count_de60(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_children_relations_get_count_de60(connection, group_id, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_children_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_children_relations_get_from_term(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_children_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_children_relations_get_set(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_children_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_children_relations_get_to_term(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_children_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_children_update_relations(connection, group_id, site_id, store_id, set_id, term_id, term_id1, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_create_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_create_children(connection, group_id, site_id, store_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_create_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_create_relations(connection, group_id, site_id, store_id, set_id, term_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property children for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_delete_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_delete_children(connection, group_id, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property relations for groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_delete_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_delete_relations(connection, group_id, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_get_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_get_children(connection, group_id, site_id, store_id, set_id, term_id, term_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_get_count4072(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_get_count4072(connection, group_id, site_id, store_id, set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_get_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_get_relations(connection, group_id, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the term is created.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_get_set(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get children from groups
  Children of current term.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_list_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_list_children(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTermCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get relations from groups
  To indicate which terms are related to the current term as either pinned or reused.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_list_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_list_relations(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_relations_get_count602b(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_relations_get_count602b(connection, group_id, site_id, store_id, set_id, term_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get fromTerm from groups
  The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_relations_get_from_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_relations_get_from_term(connection, group_id, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/fromTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get set from groups
  The [set] in which the relation is relevant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_relations_get_set(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_relations_get_set(connection, group_id, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/set")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get toTerm from groups
  The to [term] of the relation. The term to which the relationship is defined.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_relations_get_to_term(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_relations_get_to_term(connection, group_id, site_id, store_id, set_id, term_id, relation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}/toTerm")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `term_id1` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_update_children(connection, group_id, site_id, store_id, set_id, term_id, term_id1, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/children/#{term_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_terms_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_terms_update_relations(connection, group_id, site_id, store_id, set_id, term_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property children in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_update_children(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_update_children(connection, group_id, site_id, store_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/children/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property parentGroup in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_update_parent_group(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_update_parent_group(connection, group_id, site_id, store_id, set_id, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/parentGroup")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property relations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `relation_id` (String.t): The unique identifier of relation
  - `microsoft_graph_term_store_relation` (MicrosoftGraphTermStoreRelation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_update_relations(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_update_relations(connection, group_id, site_id, store_id, set_id, relation_id, microsoft_graph_term_store_relation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/relations/#{relation_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_relation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreRelation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update term
  Update the properties of a term object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `term_id` (String.t): The unique identifier of term
  - `microsoft_graph_term_store_term` (MicrosoftGraphTermStoreTerm): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_sets_update_terms(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_sets_update_terms(connection, group_id, site_id, store_id, set_id, term_id, microsoft_graph_term_store_term, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}/terms/#{term_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_term)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreTerm},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property groups in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `group_id1` (String.t): The unique identifier of group
  - `microsoft_graph_term_store_group` (MicrosoftGraphTermStoreGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_update_groups(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_update_groups(connection, group_id, site_id, store_id, group_id1, microsoft_graph_term_store_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/groups/#{group_id1}")
      |> add_param(:body, :body, microsoft_graph_term_store_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update set
  Update the properties of a set object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `set_id` (String.t): The unique identifier of set
  - `microsoft_graph_term_store_set` (MicrosoftGraphTermStoreSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_term_stores_update_sets(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_term_stores_update_sets(connection, group_id, site_id, store_id, set_id, microsoft_graph_term_store_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}/sets/#{set_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property analytics in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_item_analytics` (MicrosoftGraphItemAnalytics): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_update_analytics(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphItemAnalytics.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_update_analytics(connection, group_id, site_id, microsoft_graph_item_analytics, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/analytics")
      |> add_param(:body, :body, microsoft_graph_item_analytics)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphItemAnalytics},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property columns in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `column_definition_id` (String.t): The unique identifier of columnDefinition
  - `microsoft_graph_column_definition` (MicrosoftGraphColumnDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_update_columns(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphColumnDefinition.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_update_columns(connection, group_id, site_id, column_definition_id, microsoft_graph_column_definition, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/columns/#{column_definition_id}")
      |> add_param(:body, :body, microsoft_graph_column_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphColumnDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update contentType
  Update a content type][contentType]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `content_type_id` (String.t): The unique identifier of contentType
  - `microsoft_graph_content_type` (MicrosoftGraphContentType): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_update_content_types(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphContentType.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphContentType.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_update_content_types(connection, group_id, site_id, content_type_id, microsoft_graph_content_type, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/contentTypes/#{content_type_id}")
      |> add_param(:body, :body, microsoft_graph_content_type)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphContentType},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property lists in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `list_id` (String.t): The unique identifier of list
  - `microsoft_graph_list` (MicrosoftGraphList): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphList.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_update_lists(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphList.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphList.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_update_lists(connection, group_id, site_id, list_id, microsoft_graph_list, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/lists/#{list_id}")
      |> add_param(:body, :body, microsoft_graph_list)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphList},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property onenote in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_onenote` (MicrosoftGraphOnenote): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphOnenote.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_update_onenote(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphOnenote.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphOnenote.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_update_onenote(connection, group_id, site_id, microsoft_graph_onenote, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/onenote")
      |> add_param(:body, :body, microsoft_graph_onenote)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphOnenote},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property operations in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `rich_long_running_operation_id` (String.t): The unique identifier of richLongRunningOperation
  - `microsoft_graph_rich_long_running_operation` (MicrosoftGraphRichLongRunningOperation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_update_operations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_update_operations(connection, group_id, site_id, rich_long_running_operation_id, microsoft_graph_rich_long_running_operation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/operations/#{rich_long_running_operation_id}")
      |> add_param(:body, :body, microsoft_graph_rich_long_running_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphRichLongRunningOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update permission
  Update an application permission object on a site.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `permission_id` (String.t): The unique identifier of permission
  - `microsoft_graph_permission` (MicrosoftGraphPermission): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_update_permissions(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphPermission.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPermission.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_update_permissions(connection, group_id, site_id, permission_id, microsoft_graph_permission, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/permissions/#{permission_id}")
      |> add_param(:body, :body, microsoft_graph_permission)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update store
  Update the properties of a store object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_term_store_store` (MicrosoftGraphTermStoreStore): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_update_term_store(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_update_term_store(connection, group_id, site_id, microsoft_graph_term_store_store, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStore")
      |> add_param(:body, :body, microsoft_graph_term_store_store)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStore},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property termStores in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `store_id` (String.t): The unique identifier of store
  - `microsoft_graph_term_store_store` (MicrosoftGraphTermStoreStore): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_sites_update_term_stores(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTermStoreStore.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_sites_update_term_stores(connection, group_id, site_id, store_id, microsoft_graph_term_store_store, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}/termStores/#{store_id}")
      |> add_param(:body, :body, microsoft_graph_term_store_store)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTermStoreStore},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sites in groups

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `group_id` (String.t): The unique identifier of group
  - `site_id` (String.t): The unique identifier of site
  - `microsoft_graph_site` (MicrosoftGraphSite): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSite.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec groups_update_sites(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSite.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSite.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def groups_update_sites(connection, group_id, site_id, microsoft_graph_site, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/groups/#{group_id}/sites/#{site_id}")
      |> add_param(:body, :body, microsoft_graph_site)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSite},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
