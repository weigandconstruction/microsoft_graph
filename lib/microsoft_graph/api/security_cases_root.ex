# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.SecurityCasesRoot do
  @moduledoc """
  API calls for all endpoints tagged `SecurityCasesRoot`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create ediscoveryCase
  Create a new ediscoveryCase object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_security_ediscovery_case` (MicrosoftGraphSecurityEdiscoveryCase): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCase.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_create_ediscovery_cases(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCase.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCase.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_create_ediscovery_cases(connection, microsoft_graph_security_ediscovery_case, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_case)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCase},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete ediscoveryCase
  Delete an ediscoveryCase object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_delete_ediscovery_cases(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_delete_ediscovery_cases(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create custodians
  Create a new ediscoveryCustodian object. After the custodian object is created, you will need to create the custodian's userSource to reference their mailbox and OneDrive for Business site. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `microsoft_graph_security_ediscovery_custodian` (MicrosoftGraphSecurityEdiscoveryCustodian): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodian.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_create_custodians(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodian.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodian.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_create_custodians(connection, ediscovery_case_id, microsoft_graph_security_ediscovery_custodian, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_custodian)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodian},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create nonCustodialDataSources
  Create a new ediscoveryNoncustodialDataSource object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `microsoft_graph_security_ediscovery_noncustodial_data_source` (MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_create_noncustodial_data_sources(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_create_noncustodial_data_sources(connection, ediscovery_case_id, microsoft_graph_security_ediscovery_noncustodial_data_source, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/noncustodialDataSources")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_noncustodial_data_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to operations for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `microsoft_graph_security_case_operation` (MicrosoftGraphSecurityCaseOperation): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_create_operations(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_create_operations(connection, ediscovery_case_id, microsoft_graph_security_case_operation, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/operations")
      |> add_param(:body, :body, microsoft_graph_security_case_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create reviewSets
  Create a new ediscoveryReviewSet object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `microsoft_graph_security_ediscovery_review_set` (MicrosoftGraphSecurityEdiscoveryReviewSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_create_review_sets(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_create_review_sets(connection, ediscovery_case_id, microsoft_graph_security_ediscovery_review_set, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_review_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create searches
  Create a new ediscoverySearch object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `microsoft_graph_security_ediscovery_search` (MicrosoftGraphSecurityEdiscoverySearch): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearch.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_create_searches(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearch.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearch.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_create_searches(connection, ediscovery_case_id, microsoft_graph_security_ediscovery_search, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_search)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearch},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create tags
  Create a new ediscoveryReviewTag object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `microsoft_graph_security_ediscovery_review_tag` (MicrosoftGraphSecurityEdiscoveryReviewTag): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_create_tags(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_create_tags(connection, ediscovery_case_id, microsoft_graph_security_ediscovery_review_tag, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/tags")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_review_tag)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create siteSource
  Create a new siteSource object associated with an eDiscovery custodian. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `microsoft_graph_security_site_source` (MicrosoftGraphSecuritySiteSource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_create_site_sources(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_create_site_sources(connection, ediscovery_case_id, ediscovery_custodian_id, microsoft_graph_security_site_source, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/siteSources")
      |> add_param(:body, :body, microsoft_graph_security_site_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create custodian unifiedGroupSource
  Create a new unifiedGroupSource object associated with an eDiscovery custodian. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `microsoft_graph_security_unified_group_source` (MicrosoftGraphSecurityUnifiedGroupSource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_create_unified_group_sources(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_create_unified_group_sources(connection, ediscovery_case_id, ediscovery_custodian_id, microsoft_graph_security_unified_group_source, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/unifiedGroupSources")
      |> add_param(:body, :body, microsoft_graph_security_unified_group_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create custodian userSource
  Create a new userSource object associated with an eDiscovery custodian. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `microsoft_graph_security_user_source` (MicrosoftGraphSecurityUserSource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUserSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_create_user_sources(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityUserSource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUserSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_create_user_sources(connection, ediscovery_case_id, ediscovery_custodian_id, microsoft_graph_security_user_source, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/userSources")
      |> add_param(:body, :body, microsoft_graph_security_user_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityUserSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property siteSources for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `site_source_id` (String.t): The unique identifier of siteSource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_delete_site_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_delete_site_sources(connection, ediscovery_case_id, ediscovery_custodian_id, site_source_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/siteSources/#{site_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property unifiedGroupSources for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `unified_group_source_id` (String.t): The unique identifier of unifiedGroupSource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_delete_unified_group_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_delete_unified_group_sources(connection, ediscovery_case_id, ediscovery_custodian_id, unified_group_source_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/unifiedGroupSources/#{unified_group_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property userSources for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `user_source_id` (String.t): The unique identifier of userSource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_delete_user_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_delete_user_sources(connection, ediscovery_case_id, ediscovery_custodian_id, user_source_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/userSources/#{user_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_get_count_ff1d(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_get_count_ff1d(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List lastIndexOperation
  Get a list of the ediscoveryIndexOperations associated with an ediscoveryCustodian. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryIndexOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_get_last_index_operation(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryIndexOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_get_last_index_operation(connection, ediscovery_case_id, ediscovery_custodian_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/lastIndexOperation")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryIndexOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get siteSources from security
  Data source entity for SharePoint sites associated with the custodian.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `site_source_id` (String.t): The unique identifier of siteSource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_get_site_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_get_site_sources(connection, ediscovery_case_id, ediscovery_custodian_id, site_source_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/siteSources/#{site_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get unifiedGroupSources from security
  Data source entity for groups associated with the custodian.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `unified_group_source_id` (String.t): The unique identifier of unifiedGroupSource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_get_unified_group_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_get_unified_group_sources(connection, ediscovery_case_id, ediscovery_custodian_id, unified_group_source_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/unifiedGroupSources/#{unified_group_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get userSources from security
  Data source entity for a the custodian. This is the container for a custodian's mailbox and OneDrive for Business site.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `user_source_id` (String.t): The unique identifier of userSource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUserSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_get_user_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUserSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_get_user_sources(connection, ediscovery_case_id, ediscovery_custodian_id, user_source_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/userSources/#{user_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityUserSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List siteSources
  Get a list of the siteSource objects associated with an ediscoveryCustodian. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_list_site_sources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_list_site_sources(connection, ediscovery_case_id, ediscovery_custodian_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/siteSources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List unifiedGroupSources
  Get a list of the unifiedGroupSource objects associated with an ediscoveryCustodian. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_list_unified_group_sources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSourceCollectionResponse.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_list_unified_group_sources(connection, ediscovery_case_id, ediscovery_custodian_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/unifiedGroupSources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List userSources
  Get a list of the userSource objects associated with an ediscoveryCustodian. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUserSourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_list_user_sources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUserSourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_list_user_sources(connection, ediscovery_case_id, ediscovery_custodian_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/userSources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityUserSourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_site_sources_get_count_a46a(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_site_sources_get_count_a46a(connection, ediscovery_case_id, ediscovery_custodian_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/siteSources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get site from security
  The SharePoint site associated with the siteSource.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `site_source_id` (String.t): The unique identifier of siteSource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSite.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_site_sources_get_site(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSite.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_site_sources_get_site(connection, ediscovery_case_id, ediscovery_custodian_id, site_source_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/siteSources/#{site_source_id}/site")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSite},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_unified_group_sources_get_count_bdfc(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_unified_group_sources_get_count_bdfc(connection, ediscovery_case_id, ediscovery_custodian_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/unifiedGroupSources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group from security
  Represents a group.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `unified_group_source_id` (String.t): The unique identifier of unifiedGroupSource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_unified_group_sources_get_group(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_unified_group_sources_get_group(connection, ediscovery_case_id, ediscovery_custodian_id, unified_group_source_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/unifiedGroupSources/#{unified_group_source_id}/group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `unified_group_source_id` (String.t): The unique identifier of unifiedGroupSource
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_unified_group_sources_group_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_unified_group_sources_group_list_service_provisioning_errors(connection, ediscovery_case_id, ediscovery_custodian_id, unified_group_source_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/unifiedGroupSources/#{unified_group_source_id}/group/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `unified_group_source_id` (String.t): The unique identifier of unifiedGroupSource
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_unified_group_sources_group_service_provisioning_errors_get_count2e98(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_unified_group_sources_group_service_provisioning_errors_get_count2e98(connection, ediscovery_case_id, ediscovery_custodian_id, unified_group_source_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/unifiedGroupSources/#{unified_group_source_id}/group/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property siteSources in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `site_source_id` (String.t): The unique identifier of siteSource
  - `microsoft_graph_security_site_source` (MicrosoftGraphSecuritySiteSource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_update_site_sources(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_update_site_sources(connection, ediscovery_case_id, ediscovery_custodian_id, site_source_id, microsoft_graph_security_site_source, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/siteSources/#{site_source_id}")
      |> add_param(:body, :body, microsoft_graph_security_site_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecuritySiteSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property unifiedGroupSources in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `unified_group_source_id` (String.t): The unique identifier of unifiedGroupSource
  - `microsoft_graph_security_unified_group_source` (MicrosoftGraphSecurityUnifiedGroupSource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_update_unified_group_sources(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_update_unified_group_sources(connection, ediscovery_case_id, ediscovery_custodian_id, unified_group_source_id, microsoft_graph_security_unified_group_source, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/unifiedGroupSources/#{unified_group_source_id}")
      |> add_param(:body, :body, microsoft_graph_security_unified_group_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityUnifiedGroupSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property userSources in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `user_source_id` (String.t): The unique identifier of userSource
  - `microsoft_graph_security_user_source` (MicrosoftGraphSecurityUserSource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUserSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_update_user_sources(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityUserSource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityUserSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_update_user_sources(connection, ediscovery_case_id, ediscovery_custodian_id, user_source_id, microsoft_graph_security_user_source, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/userSources/#{user_source_id}")
      |> add_param(:body, :body, microsoft_graph_security_user_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityUserSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_custodians_user_sources_get_count9c7a(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_custodians_user_sources_get_count9c7a(connection, ediscovery_case_id, ediscovery_custodian_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}/userSources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property custodians for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_delete_custodians(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_delete_custodians(connection, ediscovery_case_id, ediscovery_custodian_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property noncustodialDataSources for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_noncustodial_data_source_id` (String.t): The unique identifier of ediscoveryNoncustodialDataSource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_delete_noncustodial_data_sources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_delete_noncustodial_data_sources(connection, ediscovery_case_id, ediscovery_noncustodial_data_source_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/noncustodialDataSources/#{ediscovery_noncustodial_data_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property operations for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `case_operation_id` (String.t): The unique identifier of caseOperation
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_delete_operations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_delete_operations(connection, ediscovery_case_id, case_operation_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/operations/#{case_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property reviewSets for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_set_id` (String.t): The unique identifier of ediscoveryReviewSet
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_delete_review_sets(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_delete_review_sets(connection, ediscovery_case_id, ediscovery_review_set_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets/#{ediscovery_review_set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete ediscoverySearch
  Delete an ediscoverySearch object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_delete_searches(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_delete_searches(connection, ediscovery_case_id, ediscovery_search_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property settings for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_delete_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_delete_settings(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/settings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove ediscoveryReviewTag
  Remove an ediscoveryReviewTag object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_tag_id` (String.t): The unique identifier of ediscoveryReviewTag
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_delete_tags(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_delete_tags(connection, ediscovery_case_id, ediscovery_review_tag_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/tags/#{ediscovery_review_tag_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_get_count3b6b(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_get_count3b6b(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ediscoveryCustodian
  Read the properties and relationships of an ediscoveryCustodian object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodian.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_get_custodians(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodian.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_get_custodians(connection, ediscovery_case_id, ediscovery_custodian_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodian},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get noncustodialDataSources from security
  Returns a list of case ediscoveryNoncustodialDataSource objects for this case.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_noncustodial_data_source_id` (String.t): The unique identifier of ediscoveryNoncustodialDataSource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_get_noncustodial_data_sources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_get_noncustodial_data_sources(connection, ediscovery_case_id, ediscovery_noncustodial_data_source_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/noncustodialDataSources/#{ediscovery_noncustodial_data_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get caseOperation
  Read the properties and relationships of a caseOperation object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `case_operation_id` (String.t): The unique identifier of caseOperation
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_get_operations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_get_operations(connection, ediscovery_case_id, case_operation_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/operations/#{case_operation_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ediscoveryReviewSet
  Read the properties and relationships of an ediscoveryReviewSet object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_set_id` (String.t): The unique identifier of ediscoveryReviewSet
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_get_review_sets(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_get_review_sets(connection, ediscovery_case_id, ediscovery_review_set_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets/#{ediscovery_review_set_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ediscoverySearch
  Read the properties and relationships of an ediscoverySearch object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearch.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_get_searches(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearch.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_get_searches(connection, ediscovery_case_id, ediscovery_search_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearch},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ediscoveryCaseSettings
  Read the properties and relationships of an ediscoveryCaseSettings object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCaseSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_get_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCaseSettings.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_get_settings(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/settings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCaseSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ediscoveryReviewTag
  Read the properties and relationships of an ediscoveryReviewTag object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_tag_id` (String.t): The unique identifier of ediscoveryReviewTag
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_get_tags(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_get_tags(connection, ediscovery_case_id, ediscovery_review_tag_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/tags/#{ediscovery_review_tag_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List ediscoveryCustodian
  Get a list of the custodian objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodianCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_list_custodians(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodianCollectionResponse.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_list_custodians(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodianCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get noncustodialDataSources from security
  Returns a list of case ediscoveryNoncustodialDataSource objects for this case.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_list_noncustodial_data_sources(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_list_noncustodial_data_sources(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/noncustodialDataSources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List caseOperations
  Get a list of the caseOperation objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_list_operations(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperationCollectionResponse.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_list_operations(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/operations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List reviewSets
  Get a list of ediscoveryReviewSet objects associated with an eDiscovery case. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_list_review_sets(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_list_review_sets(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List searches
  Get the list of ediscoverySearch resources from an eDiscoveryCase object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearchCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_list_searches(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearchCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_list_searches(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearchCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List tags
  Get a list of eDiscoveryReviewTag objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTagCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_list_tags(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTagCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_list_tags(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/tags")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTagCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property dataSource for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_noncustodial_data_source_id` (String.t): The unique identifier of ediscoveryNoncustodialDataSource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_noncustodial_data_sources_delete_data_source(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_noncustodial_data_sources_delete_data_source(connection, ediscovery_case_id, ediscovery_noncustodial_data_source_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/noncustodialDataSources/#{ediscovery_noncustodial_data_source_id}/dataSource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_noncustodial_data_sources_get_count68bd(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_noncustodial_data_sources_get_count68bd(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/noncustodialDataSources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get dataSource from security
  User source or SharePoint site data source as noncustodial data source.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_noncustodial_data_source_id` (String.t): The unique identifier of ediscoveryNoncustodialDataSource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_noncustodial_data_sources_get_data_source(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_noncustodial_data_sources_get_data_source(connection, ediscovery_case_id, ediscovery_noncustodial_data_source_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/noncustodialDataSources/#{ediscovery_noncustodial_data_source_id}/dataSource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get lastIndexOperation from security
  Operation entity that represents the latest indexing for the noncustodial data source.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_noncustodial_data_source_id` (String.t): The unique identifier of ediscoveryNoncustodialDataSource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryIndexOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_noncustodial_data_sources_get_last_index_operation(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryIndexOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_noncustodial_data_sources_get_last_index_operation(connection, ediscovery_case_id, ediscovery_noncustodial_data_source_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/noncustodialDataSources/#{ediscovery_noncustodial_data_source_id}/lastIndexOperation")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryIndexOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property dataSource in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_noncustodial_data_source_id` (String.t): The unique identifier of ediscoveryNoncustodialDataSource
  - `microsoft_graph_security_data_source` (MicrosoftGraphSecurityDataSource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_noncustodial_data_sources_update_data_source(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_noncustodial_data_sources_update_data_source(connection, ediscovery_case_id, ediscovery_noncustodial_data_source_id, microsoft_graph_security_data_source, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/noncustodialDataSources/#{ediscovery_noncustodial_data_source_id}/dataSource")
      |> add_param(:body, :body, microsoft_graph_security_data_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_operations_get_count4abd(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_operations_get_count4abd(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/operations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create ediscoveryReviewSetQuery
  Create a new ediscoveryReviewSetQuery object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_set_id` (String.t): The unique identifier of ediscoveryReviewSet
  - `microsoft_graph_security_ediscovery_review_set_query` (MicrosoftGraphSecurityEdiscoveryReviewSetQuery): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQuery.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_review_sets_create_queries(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQuery.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQuery.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_review_sets_create_queries(connection, ediscovery_case_id, ediscovery_review_set_id, microsoft_graph_security_ediscovery_review_set_query, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets/#{ediscovery_review_set_id}/queries")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_review_set_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQuery},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete ediscoveryReviewSetQuery
  Delete an ediscoveryReviewSetQuery object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_set_id` (String.t): The unique identifier of ediscoveryReviewSet
  - `ediscovery_review_set_query_id` (String.t): The unique identifier of ediscoveryReviewSetQuery
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_review_sets_delete_queries(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_review_sets_delete_queries(connection, ediscovery_case_id, ediscovery_review_set_id, ediscovery_review_set_query_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets/#{ediscovery_review_set_id}/queries/#{ediscovery_review_set_query_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_review_sets_get_count_feba(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_review_sets_get_count_feba(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ediscoveryReviewSetQuery
  Read the properties and relationships of an ediscoveryReviewSetQuery object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_set_id` (String.t): The unique identifier of ediscoveryReviewSet
  - `ediscovery_review_set_query_id` (String.t): The unique identifier of ediscoveryReviewSetQuery
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQuery.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_review_sets_get_queries(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQuery.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_review_sets_get_queries(connection, ediscovery_case_id, ediscovery_review_set_id, ediscovery_review_set_query_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets/#{ediscovery_review_set_id}/queries/#{ediscovery_review_set_query_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQuery},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List queries
  Get the list of queries associated with an eDiscovery review set. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_set_id` (String.t): The unique identifier of ediscoveryReviewSet
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQueryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_review_sets_list_queries(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQueryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_review_sets_list_queries(connection, ediscovery_case_id, ediscovery_review_set_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets/#{ediscovery_review_set_id}/queries")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQueryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_set_id` (String.t): The unique identifier of ediscoveryReviewSet
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_review_sets_queries_get_count5777(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_review_sets_queries_get_count5777(connection, ediscovery_case_id, ediscovery_review_set_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets/#{ediscovery_review_set_id}/queries/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update ediscoveryReviewSetQuery
  Update the properties of an ediscoveryReviewSetQuery object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_set_id` (String.t): The unique identifier of ediscoveryReviewSet
  - `ediscovery_review_set_query_id` (String.t): The unique identifier of ediscoveryReviewSetQuery
  - `microsoft_graph_security_ediscovery_review_set_query` (MicrosoftGraphSecurityEdiscoveryReviewSetQuery): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQuery.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_review_sets_update_queries(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQuery.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQuery.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_review_sets_update_queries(connection, ediscovery_case_id, ediscovery_review_set_id, ediscovery_review_set_query_id, microsoft_graph_security_ediscovery_review_set_query, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets/#{ediscovery_review_set_id}/queries/#{ediscovery_review_set_query_id}")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_review_set_query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSetQuery},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_additional_sources_get_count_f0d1(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_additional_sources_get_count_f0d1(connection, ediscovery_case_id, ediscovery_search_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/additionalSources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add additional sources
  Create a new additional source associated with an eDiscovery search. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `microsoft_graph_security_data_source` (MicrosoftGraphSecurityDataSource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_create_additional_sources(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_create_additional_sources(connection, ediscovery_case_id, ediscovery_search_id, microsoft_graph_security_data_source, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/additionalSources")
      |> add_param(:body, :body, microsoft_graph_security_data_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_custodian_sources_get_count_fb3f(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_custodian_sources_get_count_fb3f(connection, ediscovery_case_id, ediscovery_search_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/custodianSources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property additionalSources for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `data_source_id` (String.t): The unique identifier of dataSource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_delete_additional_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_delete_additional_sources(connection, ediscovery_case_id, ediscovery_search_id, data_source_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/additionalSources/#{data_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove custodianSources
  Remove a dataSource object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `data_source_id` (String.t): The unique identifier of dataSource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_delete_custodian_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_delete_custodian_sources(connection, ediscovery_case_id, ediscovery_search_id, data_source_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/custodianSources/#{data_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove noncustodialSources
  Remove an ediscoveryNoncustodialDataSource object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `ediscovery_noncustodial_data_source_id` (String.t): The unique identifier of ediscoveryNoncustodialDataSource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_delete_noncustodial_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_delete_noncustodial_sources(connection, ediscovery_case_id, ediscovery_search_id, ediscovery_noncustodial_data_source_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/noncustodialSources/#{ediscovery_noncustodial_data_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get addToReviewSetOperation from security
  Adds the results of the eDiscovery search to the specified reviewSet.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryAddToReviewSetOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_get_add_to_review_set_operation(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryAddToReviewSetOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_get_add_to_review_set_operation(connection, ediscovery_case_id, ediscovery_search_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/addToReviewSetOperation")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryAddToReviewSetOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get additionalSources from security
  Adds an additional source to the eDiscovery search.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `data_source_id` (String.t): The unique identifier of dataSource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_get_additional_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_get_additional_sources(connection, ediscovery_case_id, ediscovery_search_id, data_source_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/additionalSources/#{data_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_get_count87f1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_get_count87f1(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get custodianSources from security
  Custodian sources that are included in the eDiscovery search.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `data_source_id` (String.t): The unique identifier of dataSource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_get_custodian_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_get_custodian_sources(connection, ediscovery_case_id, ediscovery_search_id, data_source_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/custodianSources/#{data_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List lastEstimateStatisticsOperation
  Get the last  ediscoveryEstimateOperation objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryEstimateOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_get_last_estimate_statistics_operation(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryEstimateOperation.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_get_last_estimate_statistics_operation(connection, ediscovery_case_id, ediscovery_search_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/lastEstimateStatisticsOperation")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryEstimateOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get noncustodialSources from security
  noncustodialDataSource sources that are included in the eDiscovery search

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `ediscovery_noncustodial_data_source_id` (String.t): The unique identifier of ediscoveryNoncustodialDataSource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_get_noncustodial_sources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_get_noncustodial_sources(connection, ediscovery_case_id, ediscovery_search_id, ediscovery_noncustodial_data_source_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/noncustodialSources/#{ediscovery_noncustodial_data_source_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List additionalSources
  Get the list of additional sources associated with an eDiscovery search. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_list_additional_sources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_list_additional_sources(connection, ediscovery_case_id, ediscovery_search_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/additionalSources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityDataSourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List custodianSources
  Get the list of custodial data sources associated with an eDiscovery search. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_list_custodian_sources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_list_custodian_sources(connection, ediscovery_case_id, ediscovery_search_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/custodianSources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityDataSourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get noncustodialSources from security
  noncustodialDataSource sources that are included in the eDiscovery search

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_list_noncustodial_sources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_list_noncustodial_sources(connection, ediscovery_case_id, ediscovery_search_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/noncustodialSources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_noncustodial_sources_get_count14fa(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_noncustodial_sources_get_count14fa(connection, ediscovery_case_id, ediscovery_search_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/noncustodialSources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property additionalSources in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `data_source_id` (String.t): The unique identifier of dataSource
  - `microsoft_graph_security_data_source` (MicrosoftGraphSecurityDataSource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_searches_update_additional_sources(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_searches_update_additional_sources(connection, ediscovery_case_id, ediscovery_search_id, data_source_id, microsoft_graph_security_data_source, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}/additionalSources/#{data_source_id}")
      |> add_param(:body, :body, microsoft_graph_security_data_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityDataSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_tag_id` (String.t): The unique identifier of ediscoveryReviewTag
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_tags_child_tags_get_count5afe(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_tags_child_tags_get_count5afe(connection, ediscovery_case_id, ediscovery_review_tag_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/tags/#{ediscovery_review_tag_id}/childTags/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get childTags from security
  Returns the tags that are a child of a tag.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_tag_id` (String.t): The unique identifier of ediscoveryReviewTag
  - `ediscovery_review_tag_id1` (String.t): The unique identifier of ediscoveryReviewTag
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_tags_get_child_tags(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_tags_get_child_tags(connection, ediscovery_case_id, ediscovery_review_tag_id, ediscovery_review_tag_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/tags/#{ediscovery_review_tag_id}/childTags/#{ediscovery_review_tag_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_tags_get_count_a3cc(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_tags_get_count_a3cc(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/tags/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get parent from security
  Returns the parent tag of the specified tag.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_tag_id` (String.t): The unique identifier of ediscoveryReviewTag
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_tags_get_parent(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_tags_get_parent(connection, ediscovery_case_id, ediscovery_review_tag_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/tags/#{ediscovery_review_tag_id}/parent")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get childTags from security
  Returns the tags that are a child of a tag.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_tag_id` (String.t): The unique identifier of ediscoveryReviewTag
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTagCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_tags_list_child_tags(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTagCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_tags_list_child_tags(connection, ediscovery_case_id, ediscovery_review_tag_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/tags/#{ediscovery_review_tag_id}/childTags")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTagCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property custodians in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_custodian_id` (String.t): The unique identifier of ediscoveryCustodian
  - `microsoft_graph_security_ediscovery_custodian` (MicrosoftGraphSecurityEdiscoveryCustodian): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodian.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_update_custodians(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodian.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodian.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_update_custodians(connection, ediscovery_case_id, ediscovery_custodian_id, microsoft_graph_security_ediscovery_custodian, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/custodians/#{ediscovery_custodian_id}")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_custodian)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCustodian},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property noncustodialDataSources in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_noncustodial_data_source_id` (String.t): The unique identifier of ediscoveryNoncustodialDataSource
  - `microsoft_graph_security_ediscovery_noncustodial_data_source` (MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_update_noncustodial_data_sources(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_update_noncustodial_data_sources(connection, ediscovery_case_id, ediscovery_noncustodial_data_source_id, microsoft_graph_security_ediscovery_noncustodial_data_source, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/noncustodialDataSources/#{ediscovery_noncustodial_data_source_id}")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_noncustodial_data_source)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryNoncustodialDataSource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property operations in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `case_operation_id` (String.t): The unique identifier of caseOperation
  - `microsoft_graph_security_case_operation` (MicrosoftGraphSecurityCaseOperation): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_update_operations(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperation.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperation.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_update_operations(connection, ediscovery_case_id, case_operation_id, microsoft_graph_security_case_operation, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/operations/#{case_operation_id}")
      |> add_param(:body, :body, microsoft_graph_security_case_operation)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityCaseOperation},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property reviewSets in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_set_id` (String.t): The unique identifier of ediscoveryReviewSet
  - `microsoft_graph_security_ediscovery_review_set` (MicrosoftGraphSecurityEdiscoveryReviewSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_update_review_sets(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSet.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSet.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_update_review_sets(connection, ediscovery_case_id, ediscovery_review_set_id, microsoft_graph_security_ediscovery_review_set, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/reviewSets/#{ediscovery_review_set_id}")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_review_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update ediscoverySearch
  Update the properties of an ediscoverySearch object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_search_id` (String.t): The unique identifier of ediscoverySearch
  - `microsoft_graph_security_ediscovery_search` (MicrosoftGraphSecurityEdiscoverySearch): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearch.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_update_searches(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearch.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearch.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_update_searches(connection, ediscovery_case_id, ediscovery_search_id, microsoft_graph_security_ediscovery_search, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/searches/#{ediscovery_search_id}")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_search)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoverySearch},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update ediscoveryCaseSettings
  Update the properties of an ediscoveryCaseSettings object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `microsoft_graph_security_ediscovery_case_settings` (MicrosoftGraphSecurityEdiscoveryCaseSettings): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCaseSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_update_settings(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCaseSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCaseSettings.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_update_settings(connection, ediscovery_case_id, microsoft_graph_security_ediscovery_case_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/settings")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_case_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCaseSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update ediscoveryReviewTag
  Update the properties of an ediscoveryReviewTag object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `ediscovery_review_tag_id` (String.t): The unique identifier of ediscoveryReviewTag
  - `microsoft_graph_security_ediscovery_review_tag` (MicrosoftGraphSecurityEdiscoveryReviewTag): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_ediscovery_cases_update_tags(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_ediscovery_cases_update_tags(connection, ediscovery_case_id, ediscovery_review_tag_id, microsoft_graph_security_ediscovery_review_tag, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}/tags/#{ediscovery_review_tag_id}")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_review_tag)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryReviewTag},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get ediscoveryCase
  Read the properties and relationships of an ediscoveryCase object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCase.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_get_ediscovery_cases(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCase.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_get_ediscovery_cases(connection, ediscovery_case_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCase},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List ediscoveryCases
  Get a list of the ediscoveryCase objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCaseCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_list_ediscovery_cases(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCaseCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_list_ediscovery_cases(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases/ediscoveryCases")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCaseCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update ediscoveryCase
  Update the properties of an ediscoveryCase object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `ediscovery_case_id` (String.t): The unique identifier of ediscoveryCase
  - `microsoft_graph_security_ediscovery_case` (MicrosoftGraphSecurityEdiscoveryCase): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCase.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_cases_update_ediscovery_cases(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCase.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCase.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_cases_update_ediscovery_cases(connection, ediscovery_case_id, microsoft_graph_security_ediscovery_case, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases/ediscoveryCases/#{ediscovery_case_id}")
      |> add_param(:body, :body, microsoft_graph_security_ediscovery_case)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityEdiscoveryCase},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property cases for security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_delete_cases(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_delete_cases(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/security/cases")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get cases from security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCasesRoot.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_get_cases(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCasesRoot.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_get_cases(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/security/cases")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityCasesRoot},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property cases in security

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_security_cases_root` (MicrosoftGraphSecurityCasesRoot): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCasesRoot.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec security_update_cases(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphSecurityCasesRoot.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSecurityCasesRoot.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def security_update_cases(connection, microsoft_graph_security_cases_root, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/security/cases")
      |> add_param(:body, :body, microsoft_graph_security_cases_root)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSecurityCasesRoot},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
