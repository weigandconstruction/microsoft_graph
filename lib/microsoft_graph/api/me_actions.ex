# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.MeActions do
  @moduledoc """
  API calls for all endpoints tagged `MeActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action assignLicense
  Add or remove subscriptions for the user. You can also enable and disable specific plans associated with a subscription. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `users_user_assign_license_request` (UsersUserAssignLicenseRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowActivateRequestSubjectsInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_assign_license(
          Tesla.Env.client(),
          MicrosoftGraph.Model.UsersUserAssignLicenseRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowActivateRequestSubjectsInner.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_assign_license(connection, users_user_assign_license_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/assignLicense")
      |> add_param(:body, :body, users_user_assign_license_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowActivateRequestSubjectsInner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resetPassword
  Reset a user's password, represented by a password authentication method object. This can only be done by an administrator with appropriate permissions and can't be performed on a user's own account. This flow writes the new password to Microsoft Entra ID and pushes it to on-premises Active Directory if configured using password writeback. The admin can either provide a new password or have the system generate one. The user is prompted to change their password on their next sign in. This reset is a long-running operation and returns a Location header with a link where the caller can periodically check for the status of the reset operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `authentication_method_id` (String.t): The unique identifier of authenticationMethod
  - `me_authentication_methods_authentication_method_reset_password_request` (MeAuthenticationMethodsAuthenticationMethodResetPasswordRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeAuthenticationMethodsAuthenticationMethodResetPassword2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_authentication_methods_authentication_method_reset_password(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeAuthenticationMethodsAuthenticationMethodResetPasswordRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeAuthenticationMethodsAuthenticationMethodResetPassword2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_authentication_methods_authentication_method_reset_password(
        connection,
        authentication_method_id,
        me_authentication_methods_authentication_method_reset_password_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/authentication/methods/#{authentication_method_id}/resetPassword")
      |> add_param(
        :body,
        :body,
        me_authentication_methods_authentication_method_reset_password_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeAuthenticationMethodsAuthenticationMethodResetPassword2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action disableSmsSignIn
  Disable SMS sign-in for an existing mobile phone number registered to a user. The number will no longer be available for SMS sign-in, which can prevent your user from signing in. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `phone_authentication_method_id` (String.t): The unique identifier of phoneAuthenticationMethod
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_authentication_phone_methods_phone_authentication_method_disable_sms_sign_in(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_authentication_phone_methods_phone_authentication_method_disable_sms_sign_in(
        connection,
        phone_authentication_method_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/authentication/phoneMethods/#{phone_authentication_method_id}/disableSmsSignIn")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action enableSmsSignIn
  Enable SMS sign-in for an existing mobile phone number registered to a user. To be successfully enabled: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `phone_authentication_method_id` (String.t): The unique identifier of phoneAuthenticationMethod
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_authentication_phone_methods_phone_authentication_method_enable_sms_sign_in(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_authentication_phone_methods_phone_authentication_method_enable_sms_sign_in(
        connection,
        phone_authentication_method_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/authentication/phoneMethods/#{phone_authentication_method_id}/enableSmsSignIn")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_accept(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_accept(
        connection,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_attachments_create_upload_session(
        connection,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/attachments/createUploadSession")
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_cancel(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_cancel(
        connection,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_decline(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_decline(
        connection,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_dismiss_reminder(connection, event_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_forward(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_forward(
        connection,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_instances_event_accept(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/instances/#{event_id1}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_instances_event_attachments_create_upload_session(
        connection,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendar/calendarView/#{event_id}/instances/#{event_id1}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_instances_event_cancel(
        connection,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/instances/#{event_id1}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_instances_event_decline(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/instances/#{event_id1}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_instances_event_dismiss_reminder(
        connection,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/instances/#{event_id1}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_instances_event_forward(
        connection,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/instances/#{event_id1}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_instances_event_snooze_reminder(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/instances/#{event_id1}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_instances_event_tentatively_accept(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/instances/#{event_id1}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_snooze_reminder(
        connection,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_calendar_view_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_calendar_view_event_tentatively_accept(
        connection,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/calendarView/#{event_id}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_accept(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_accept(
        connection,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_attachments_create_upload_session(
        connection,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/attachments/createUploadSession")
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_cancel(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_cancel(
        connection,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_decline(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_decline(
        connection,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_dismiss_reminder(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_dismiss_reminder(connection, event_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_forward(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_forward(
        connection,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_instances_event_accept(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/instances/#{event_id1}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_instances_event_attachments_create_upload_session(
        connection,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendar/events/#{event_id}/instances/#{event_id1}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_instances_event_cancel(
        connection,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/instances/#{event_id1}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_instances_event_decline(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/instances/#{event_id1}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_instances_event_dismiss_reminder(
        connection,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/instances/#{event_id1}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_instances_event_forward(
        connection,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/instances/#{event_id1}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_instances_event_snooze_reminder(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/instances/#{event_id1}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_instances_event_tentatively_accept(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/instances/#{event_id1}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_snooze_reminder(
        connection,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_events_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_events_event_tentatively_accept(
        connection,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/events/#{event_id}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getSchedule
  Get the free/busy availability information for a collection of users, distributions lists, or resources (rooms or equipment) for a specified time period. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarGetScheduleRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_get_schedule(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetScheduleRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_get_schedule(
        connection,
        me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendar/getSchedule")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_accept(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/accept"
      )
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_attachments_create_upload_session(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_cancel(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/cancel"
      )
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_decline(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/decline"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_dismiss_reminder(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/dismissReminder"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_forward(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/forward"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_accept(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/accept"
      )
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_attachments_create_upload_session(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_cancel(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/cancel"
      )
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_decline(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/decline"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_dismiss_reminder(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/dismissReminder"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/forward"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_snooze_reminder(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/snoozeReminder"
      )
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_tentatively_accept(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/tentativelyAccept"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_snooze_reminder(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/snoozeReminder"
      )
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_tentatively_accept(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/calendarView/#{event_id}/tentativelyAccept"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_accept(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/accept"
      )
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_attachments_create_upload_session(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_cancel(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/cancel"
      )
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_decline(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/decline"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_dismiss_reminder(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/dismissReminder"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_forward(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/forward"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_accept(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/accept"
      )
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_attachments_create_upload_session(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_cancel(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/cancel"
      )
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_decline(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/decline"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_dismiss_reminder(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/dismissReminder"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_forward(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/forward"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_snooze_reminder(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/snoozeReminder"
      )
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_instances_event_tentatively_accept(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/tentativelyAccept"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_snooze_reminder(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/snoozeReminder"
      )
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_events_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_events_event_tentatively_accept(
        connection,
        calendar_group_id,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/events/#{event_id}/tentativelyAccept"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getSchedule
  Get the free/busy availability information for a collection of users, distributions lists, or resources (rooms or equipment) for a specified time period. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_group_id` (String.t): The unique identifier of calendarGroup
  - `calendar_id` (String.t): The unique identifier of calendar
  - `me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarGetScheduleRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_groups_calendar_group_calendars_calendar_get_schedule(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetScheduleRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_groups_calendar_group_calendars_calendar_get_schedule(
        connection,
        calendar_group_id,
        calendar_id,
        me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarGroups/#{calendar_group_id}/calendars/#{calendar_id}/getSchedule")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_accept(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_accept(
        connection,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_attachments_create_upload_session(
        connection,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/attachments/createUploadSession")
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_cancel(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_cancel(
        connection,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_decline(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_decline(
        connection,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_dismiss_reminder(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_dismiss_reminder(connection, event_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_forward(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_forward(
        connection,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_instances_event_accept(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/instances/#{event_id1}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_instances_event_attachments_create_upload_session(
        connection,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendarView/#{event_id}/instances/#{event_id1}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_instances_event_cancel(
        connection,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/instances/#{event_id1}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_instances_event_decline(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/instances/#{event_id1}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_instances_event_dismiss_reminder(
        connection,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/instances/#{event_id1}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_instances_event_forward(
        connection,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/instances/#{event_id1}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_instances_event_snooze_reminder(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/instances/#{event_id1}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_instances_event_tentatively_accept(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/instances/#{event_id1}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_snooze_reminder(
        connection,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendar_view_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendar_view_event_tentatively_accept(
        connection,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendarView/#{event_id}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_accept(
        connection,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/calendarView/#{event_id}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_attachments_create_upload_session(
        connection,
        calendar_id,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/calendarView/#{event_id}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_cancel(
        connection,
        calendar_id,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/calendarView/#{event_id}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_decline(
        connection,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/calendarView/#{event_id}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_dismiss_reminder(
        connection,
        calendar_id,
        event_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/calendarView/#{event_id}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_forward(
        connection,
        calendar_id,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/calendarView/#{event_id}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_instances_event_accept(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/accept"
      )
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_instances_event_attachments_create_upload_session(
        connection,
        calendar_id,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_instances_event_cancel(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/cancel"
      )
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_instances_event_decline(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/decline"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_instances_event_dismiss_reminder(
        connection,
        calendar_id,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/dismissReminder"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_instances_event_forward(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/forward"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_instances_event_snooze_reminder(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/snoozeReminder"
      )
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_instances_event_tentatively_accept(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/calendarView/#{event_id}/instances/#{event_id1}/tentativelyAccept"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_snooze_reminder(
        connection,
        calendar_id,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/calendarView/#{event_id}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_calendar_view_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_calendar_view_event_tentatively_accept(
        connection,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/calendarView/#{event_id}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_accept(
        connection,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_attachments_create_upload_session(
        connection,
        calendar_id,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/attachments/createUploadSession")
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_cancel(
        connection,
        calendar_id,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_decline(
        connection,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_dismiss_reminder(
        connection,
        calendar_id,
        event_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_forward(
        connection,
        calendar_id,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_instances_event_accept(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_instances_event_attachments_create_upload_session(
        connection,
        calendar_id,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_instances_event_cancel(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_instances_event_decline(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_instances_event_dismiss_reminder(
        connection,
        calendar_id,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/dismissReminder"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_instances_event_forward(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_instances_event_snooze_reminder(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/snoozeReminder"
      )
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_instances_event_tentatively_accept(
        connection,
        calendar_id,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/calendars/#{calendar_id}/events/#{event_id}/instances/#{event_id1}/tentativelyAccept"
      )
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_snooze_reminder(
        connection,
        calendar_id,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_events_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_events_event_tentatively_accept(
        connection,
        calendar_id,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/events/#{event_id}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getSchedule
  Get the free/busy availability information for a collection of users, distributions lists, or resources (rooms or equipment) for a specified time period. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `calendar_id` (String.t): The unique identifier of calendar
  - `me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarGetScheduleRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_calendars_calendar_get_schedule(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetScheduleRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_calendars_calendar_get_schedule(
        connection,
        calendar_id,
        me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/calendars/#{calendar_id}/getSchedule")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_get_schedule_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarGetSchedule2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action changePassword
  Enable the user to update their password. Any user can update their password without belonging to any administrator role. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `users_user_change_password_request` (UsersUserChangePasswordRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_change_password(
          Tesla.Env.client(),
          MicrosoftGraph.Model.UsersUserChangePasswordRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_change_password(connection, users_user_change_password_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/changePassword")
      |> add_param(:body, :body, users_user_change_password_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action hideForUser
  Hide a chat for a user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chats_chat_unhide_for_user_request` (ChatsChatUnhideForUserRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_hide_for_user(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ChatsChatUnhideForUserRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_hide_for_user(
        connection,
        chat_id,
        chats_chat_unhide_for_user_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/hideForUser")
      |> add_param(:body, :body, chats_chat_unhide_for_user_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action upgrade
  Upgrade an app installation within a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request` (UsersUserChatsChatInstalledAppsTeamsAppInstallationUpgradeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_installed_apps_teams_app_installation_upgrade(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserChatsChatInstalledAppsTeamsAppInstallationUpgradeRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_installed_apps_teams_app_installation_upgrade(
        connection,
        chat_id,
        teams_app_installation_id,
        users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/installedApps/#{teams_app_installation_id}/upgrade")
      |> add_param(
        :body,
        :body,
        users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action markChatReadForUser
  Mark a chat as read for a user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chats_chat_unhide_for_user_request` (ChatsChatUnhideForUserRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_mark_chat_read_for_user(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ChatsChatUnhideForUserRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_mark_chat_read_for_user(
        connection,
        chat_id,
        chats_chat_unhide_for_user_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/markChatReadForUser")
      |> add_param(:body, :body, chats_chat_unhide_for_user_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action markChatUnreadForUser
  Mark a chat as unread for a user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `users_user_chats_chat_mark_chat_unread_for_user_request` (UsersUserChatsChatMarkChatUnreadForUserRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_mark_chat_unread_for_user(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserChatsChatMarkChatUnreadForUserRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_mark_chat_unread_for_user(
        connection,
        chat_id,
        users_user_chats_chat_mark_chat_unread_for_user_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/markChatUnreadForUser")
      |> add_param(:body, :body, users_user_chats_chat_mark_chat_unread_for_user_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Add multiple members in a single request to a team. The response provides details about which memberships could and couldn't be created. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `me_joined_teams_team_members_add_request` (MeJoinedTeamsTeamMembersAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_members_add(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAddRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_members_add(
        connection,
        chat_id,
        me_joined_teams_team_members_add_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/members/add")
      |> add_param(:body, :body, me_joined_teams_team_members_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_messages_chat_message_replies_chat_message_set_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_messages_chat_message_replies_chat_message_set_reaction(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/setReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_messages_chat_message_replies_chat_message_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_messages_chat_message_replies_chat_message_soft_delete(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/softDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_messages_chat_message_replies_chat_message_undo_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_messages_chat_message_replies_chat_message_undo_soft_delete(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/undoSoftDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_messages_chat_message_replies_chat_message_unset_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_messages_chat_message_replies_chat_message_unset_reaction(
        connection,
        chat_id,
        chat_message_id,
        chat_message_id1,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/chats/#{chat_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/unsetReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_messages_chat_message_set_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_messages_chat_message_set_reaction(
        connection,
        chat_id,
        chat_message_id,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/setReaction")
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_messages_chat_message_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_messages_chat_message_soft_delete(
        connection,
        chat_id,
        chat_message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/softDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_messages_chat_message_undo_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_messages_chat_message_undo_soft_delete(
        connection,
        chat_id,
        chat_message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/undoSoftDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_messages_chat_message_unset_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_messages_chat_message_unset_reaction(
        connection,
        chat_id,
        chat_message_id,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/messages/#{chat_message_id}/unsetReaction")
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sendActivityNotification
  Send an activity feed notification in scope of a chat. For more details about sending notifications and the requirements for doing so, see sending Teams activity notifications. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `me_joined_teams_team_send_activity_notification_request` (MeJoinedTeamsTeamSendActivityNotificationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_send_activity_notification(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeJoinedTeamsTeamSendActivityNotificationRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_send_activity_notification(
        connection,
        chat_id,
        me_joined_teams_team_send_activity_notification_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/sendActivityNotification")
      |> add_param(:body, :body, me_joined_teams_team_send_activity_notification_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unhideForUser
  Unhide a chat for a user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `chat_id` (String.t): The unique identifier of chat
  - `chats_chat_unhide_for_user_request` (ChatsChatUnhideForUserRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_chats_chat_unhide_for_user(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.ChatsChatUnhideForUserRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_chats_chat_unhide_for_user(
        connection,
        chat_id,
        chats_chat_unhide_for_user_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/chats/#{chat_id}/unhideForUser")
      |> add_param(:body, :body, chats_chat_unhide_for_user_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action checkMemberGroups
  Check for membership in a specified list of group IDs, and return from that list those groups (identified by IDs) of which the specified user, group, service principal, organizational contact, device, or directory object is a member. This function is transitive. You can check up to a maximum of 20 groups per request. This function supports all groups provisioned in Microsoft Entra ID. Because Microsoft 365 groups cannot contain other groups, membership in a Microsoft 365 group is always direct. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contracts_contract_check_member_groups_request` (ContractsContractCheckMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_check_member_groups(
          Tesla.Env.client(),
          MicrosoftGraph.Model.ContractsContractCheckMemberGroupsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_check_member_groups(
        connection,
        contracts_contract_check_member_groups_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/checkMemberGroups")
      |> add_param(:body, :body, contracts_contract_check_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action checkMemberObjects

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `directory_role_templates_directory_role_template_check_member_objects_request` (DirectoryRoleTemplatesDirectoryRoleTemplateCheckMemberObjectsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_check_member_objects(
          Tesla.Env.client(),
          MicrosoftGraph.Model.DirectoryRoleTemplatesDirectoryRoleTemplateCheckMemberObjectsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_check_member_objects(
        connection,
        directory_role_templates_directory_role_template_check_member_objects_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/checkMemberObjects")
      |> add_param(
        :body,
        :body,
        directory_role_templates_directory_role_template_check_member_objects_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_accept(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_accept(
        connection,
        event_id,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_attachments_create_upload_session(
        connection,
        event_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/attachments/createUploadSession")
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_cancel(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_cancel(
        connection,
        event_id,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_decline(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_decline(
        connection,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_dismiss_reminder(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_dismiss_reminder(connection, event_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_forward(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_forward(
        connection,
        event_id,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action accept
  Accept the specified event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_accept_request` (MeCalendarViewEventInstancesEventAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_instances_event_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_instances_event_accept(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/instances/#{event_id1}/accept")
      |> add_param(:body, :body, me_calendar_view_event_instances_event_accept_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_instances_event_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_instances_event_attachments_create_upload_session(
        connection,
        event_id,
        event_id1,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/instances/#{event_id1}/attachments/createUploadSession")
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cancel
  This action allows the organizer of a meeting to send a cancellation message and cancel the event.  The action moves the event to the Deleted Items folder. The organizer can also cancel an occurrence of a recurring meeting  by providing the occurrence event ID. An attendee calling this action gets an error (HTTP 400 Bad Request), with the following error message: 'Your request can't be completed. You need to be an organizer to cancel a meeting.' This action differs from Delete in that Cancel is available to only the organizer, and lets the organizer send a custom message to the attendees about the cancellation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendars_calendar_calendar_view_event_instances_event_cancel_request` (MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_instances_event_cancel(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarsCalendarCalendarViewEventInstancesEventCancelRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_instances_event_cancel(
        connection,
        event_id,
        event_id1,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/instances/#{event_id1}/cancel")
      |> add_param(
        :body,
        :body,
        me_calendars_calendar_calendar_view_event_instances_event_cancel_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action decline
  Decline invitation to the specified event in a user calendar. If the event allows proposals for new times, on declining the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_instances_event_decline(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_instances_event_decline(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/instances/#{event_id1}/decline")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action dismissReminder
  Dismiss a reminder that has been triggered for an event in a user calendar. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_instances_event_dismiss_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_instances_event_dismiss_reminder(
        connection,
        event_id,
        event_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/instances/#{event_id1}/dismissReminder")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  This action allows the organizer or attendee of a meeting event to forward the  meeting request to a new recipient.  If the meeting event is forwarded from an attendee's Microsoft 365 mailbox to another recipient, this action  also sends a message to notify the organizer of the forwarding, and adds the recipient to the organizer's  copy of the meeting event. This convenience is not available when forwarding from an Outlook.com account. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request` (MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_instances_event_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarGroupsCalendarGroupCalendarsCalendarCalendarViewEventInstancesEventForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_instances_event_forward(
        connection,
        event_id,
        event_id1,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/instances/#{event_id1}/forward")
      |> add_param(
        :body,
        :body,
        me_calendar_groups_calendar_group_calendars_calendar_calendar_view_event_instances_event_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_instances_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_instances_event_snooze_reminder(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/instances/#{event_id1}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `event_id1` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_instances_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_instances_event_tentatively_accept(
        connection,
        event_id,
        event_id1,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/instances/#{event_id1}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action snoozeReminder
  Postpone a reminder for an event in a user calendar until a new time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_snooze_reminder_request` (MeCalendarViewEventSnoozeReminderRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_snooze_reminder(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventSnoozeReminderRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_snooze_reminder(
        connection,
        event_id,
        me_calendar_view_event_snooze_reminder_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/snoozeReminder")
      |> add_param(:body, :body, me_calendar_view_event_snooze_reminder_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action tentativelyAccept
  Tentatively accept the specified event in a user calendar. If the event allows proposals for new times, on responding tentative to the event, an invitee can choose to suggest an alternative time by including the proposedNewTime parameter. For more information on how to propose a time, and how to receive and accept a new time proposal, see Propose new meeting times. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `event_id` (String.t): The unique identifier of event
  - `me_calendar_view_event_instances_event_tentatively_accept_request` (MeCalendarViewEventInstancesEventTentativelyAcceptRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_events_event_tentatively_accept(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeCalendarViewEventInstancesEventTentativelyAcceptRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_events_event_tentatively_accept(
        connection,
        event_id,
        me_calendar_view_event_instances_event_tentatively_accept_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/events/#{event_id}/tentativelyAccept")
      |> add_param(
        :body,
        :body,
        me_calendar_view_event_instances_event_tentatively_accept_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action exportPersonalData
  Submit a data policy operation request from a company administrator or an application to export an organizational user's data. This data includes the user's data stored in OneDrive and their activity reports. For more guidance about exporting data while complying with regulations, see Data Subject Requests and the GDPR and CCPA. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `users_user_export_personal_data_request` (UsersUserExportPersonalDataRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_export_personal_data(
          Tesla.Env.client(),
          MicrosoftGraph.Model.UsersUserExportPersonalDataRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_export_personal_data(connection, users_user_export_personal_data_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/exportPersonalData")
      |> add_param(:body, :body, users_user_export_personal_data_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action findMeetingTimes
  Suggest meeting times and locations based on organizer and attendee availability, and time or location constraints specified as parameters. If findMeetingTimes cannot return any meeting suggestions, the response would indicate a reason in the emptySuggestionsReason property.  Based on this value, you can better adjust the parameters and call findMeetingTimes again. The algorithm used to suggest meeting times and locations undergoes fine-tuning from time to time. In scenarios like test environments where the input parameters and calendar data remain static, expect that the suggested results may differ over time. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `users_user_find_meeting_times_request` (UsersUserFindMeetingTimesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserFindMeetingTimes2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_find_meeting_times(
          Tesla.Env.client(),
          MicrosoftGraph.Model.UsersUserFindMeetingTimesRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.UsersUserFindMeetingTimes2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_find_meeting_times(connection, users_user_find_meeting_times_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/findMeetingTimes")
      |> add_param(:body, :body, users_user_find_meeting_times_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.UsersUserFindMeetingTimes2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getMailTips
  Get the MailTips of one or more recipients as available to the signed-in user. Note that by making a POST call to the getMailTips action, you can request specific types of MailTips to be returned for more than one recipient at one time. The requested MailTips are returned in a mailTips collection. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `users_user_get_mail_tips_request` (UsersUserGetMailTipsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserGetMailTips2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_get_mail_tips(
          Tesla.Env.client(),
          MicrosoftGraph.Model.UsersUserGetMailTipsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.UsersUserGetMailTips2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_get_mail_tips(connection, users_user_get_mail_tips_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/getMailTips")
      |> add_param(:body, :body, users_user_get_mail_tips_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.UsersUserGetMailTips2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getMemberGroups
  Return all the group IDs for the groups that the specified user, group, service principal, organizational contact, device, or directory object is a member of. This function is transitive. This API returns up to 11,000 group IDs. If more than 11,000 results are available, it returns a 400 Bad Request error with the Directory_ResultSizeLimitExceeded error code. As a workaround, use the List group transitive memberOf API. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contacts_org_contact_get_member_groups_request` (ContactsOrgContactGetMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_get_member_groups(
          Tesla.Env.client(),
          MicrosoftGraph.Model.ContactsOrgContactGetMemberGroupsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_get_member_groups(
        connection,
        contacts_org_contact_get_member_groups_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/getMemberGroups")
      |> add_param(:body, :body, contacts_org_contact_get_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getMemberObjects
  Return all IDs for the groups, administrative units, and directory roles that a user, group, service principal, organizational contact, device, or directory object is a member of. This function is transitive. Note: Only users and role-enabled groups can be members of directory roles. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `contacts_org_contact_get_member_groups_request` (ContactsOrgContactGetMemberGroupsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_get_member_objects(
          Tesla.Env.client(),
          MicrosoftGraph.Model.ContactsOrgContactGetMemberGroupsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_get_member_objects(
        connection,
        contacts_org_contact_get_member_groups_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/getMemberObjects")
      |> add_param(:body, :body, contacts_org_contact_get_member_groups_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.ContractsContractCheckMemberGroups2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action archive
  Archive the specified team.  When a team is archived, users can no longer send or like messages on any channel in the team, edit the team's name, description, or other settings, or in general make most changes to the team. Membership changes to the team continue to be allowed. Archiving is an async operation. A team is archived once the async operation completes successfully, which may occur subsequent to a response from this API. To archive a team, the team and group must have an owner. To restore a team from its archived state, use the API to unarchive. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `groups_group_team_archive_request` (GroupsGroupTeamArchiveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_archive(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamArchiveRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_archive(
        connection,
        team_id,
        groups_group_team_archive_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/archive")
      |> add_param(:body, :body, groups_group_team_archive_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action completeMigration
  Complete the message migration process by removing migration mode from a channel in a team. Migration mode is a special state that prevents certain operations, like sending messages and adding members, during the data migration process. After a completeMigration request is made, you can't import additional messages into the team. You can add members to the team after the request returns a successful response. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_complete_migration(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_complete_migration(
        connection,
        team_id,
        channel_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/channels/#{channel_id}/completeMigration")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Add multiple members in a single request to a team. The response provides details about which memberships could and couldn't be created. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `me_joined_teams_team_members_add_request` (MeJoinedTeamsTeamMembersAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_members_add(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAddRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_members_add(
        connection,
        team_id,
        channel_id,
        me_joined_teams_team_members_add_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/channels/#{channel_id}/members/add")
      |> add_param(:body, :body, me_joined_teams_team_members_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_set_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_set_reaction(
        connection,
        team_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/setReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_soft_delete(
        connection,
        team_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/softDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_undo_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_undo_soft_delete(
        connection,
        team_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/undoSoftDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_unset_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_messages_chat_message_replies_chat_message_unset_reaction(
        connection,
        team_id,
        channel_id,
        chat_message_id,
        chat_message_id1,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/unsetReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_messages_chat_message_set_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_messages_chat_message_set_reaction(
        connection,
        team_id,
        channel_id,
        chat_message_id,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/setReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_messages_chat_message_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_messages_chat_message_soft_delete(
        connection,
        team_id,
        channel_id,
        chat_message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/softDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_messages_chat_message_undo_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_messages_chat_message_undo_soft_delete(
        connection,
        team_id,
        channel_id,
        chat_message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/undoSoftDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_messages_chat_message_unset_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_messages_chat_message_unset_reaction(
        connection,
        team_id,
        channel_id,
        chat_message_id,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/unsetReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action provisionEmail
  Provision an email address for a channel. Microsoft Teams doesn't automatically provision an email address for a channel by default. To have Teams provision an email address, you can call provisionEmail, or through the Teams user interface, select Get email address, which triggers Teams to generate an email address if it has not already provisioned one. To remove the email address of a channel, use the removeEmail method. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_provision_email(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_provision_email(
        connection,
        team_id,
        channel_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/channels/#{channel_id}/provisionEmail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action removeEmail
  Remove the email address of a channel. You can remove an email address only if it was provisioned using the provisionEmail method or through the Microsoft Teams client. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_channels_channel_remove_email(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_channels_channel_remove_email(
        connection,
        team_id,
        channel_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/channels/#{channel_id}/removeEmail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clone
  Create a copy of a team. This operation also creates a copy of the corresponding group. You can specify which parts of the team to clone: When tabs are cloned, they aren't configured. The tabs are displayed on the tab bar in Microsoft Teams, and the first time a user opens them, they must go through the configuration screen.  If the user who opens the tab doesn't have permission to configure apps, they'll see a message that says that the tab isn't configured. Cloning is a long-running operation. After the POST clone returns, you need to GET the operation returned by the Location: header to see if it's running, succeeded, or failed. You should continue to GET until the status isn't running. The recommended delay between GETs is 5 seconds. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `teams_team_clone_request` (TeamsTeamCloneRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_clone(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.TeamsTeamCloneRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_clone(connection, team_id, teams_team_clone_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/clone")
      |> add_param(:body, :body, teams_team_clone_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action completeMigration
  Complete the message migration process by removing migration mode from a team. Migration mode is a special state where certain operations are barred, like message POST and membership operations during the data migration process. After a completeMigration request is made, you can't import additional messages into the team. You can add members to the team after the request returns a successful response. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_complete_migration(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_complete_migration(connection, team_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/completeMigration")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action upgrade
  Upgrade an app installation within a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `teams_app_installation_id` (String.t): The unique identifier of teamsAppInstallation
  - `users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request` (UsersUserChatsChatInstalledAppsTeamsAppInstallationUpgradeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_installed_apps_teams_app_installation_upgrade(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserChatsChatInstalledAppsTeamsAppInstallationUpgradeRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_installed_apps_teams_app_installation_upgrade(
        connection,
        team_id,
        teams_app_installation_id,
        users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/installedApps/#{teams_app_installation_id}/upgrade")
      |> add_param(
        :body,
        :body,
        users_user_chats_chat_installed_apps_teams_app_installation_upgrade_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Add multiple members in a single request to a team. The response provides details about which memberships could and couldn't be created. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `me_joined_teams_team_members_add_request` (MeJoinedTeamsTeamMembersAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_members_add(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAddRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_members_add(
        connection,
        team_id,
        me_joined_teams_team_members_add_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/members/add")
      |> add_param(:body, :body, me_joined_teams_team_members_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action completeMigration
  Complete the message migration process by removing migration mode from a channel in a team. Migration mode is a special state that prevents certain operations, like sending messages and adding members, during the data migration process. After a completeMigration request is made, you can't import additional messages into the team. You can add members to the team after the request returns a successful response. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_complete_migration(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_complete_migration(connection, team_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/primaryChannel/completeMigration")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action add
  Add multiple members in a single request to a team. The response provides details about which memberships could and couldn't be created. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `me_joined_teams_team_members_add_request` (MeJoinedTeamsTeamMembersAddRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_members_add(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAddRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_members_add(
        connection,
        team_id,
        me_joined_teams_team_members_add_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/primaryChannel/members/add")
      |> add_param(:body, :body, me_joined_teams_team_members_add_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MeJoinedTeamsTeamMembersAdd2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_set_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_set_reaction(
        connection,
        team_id,
        chat_message_id,
        chat_message_id1,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/setReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_soft_delete(
        connection,
        team_id,
        chat_message_id,
        chat_message_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/softDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_undo_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_undo_soft_delete(
        connection,
        team_id,
        chat_message_id,
        chat_message_id1,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/undoSoftDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_unset_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_messages_chat_message_replies_chat_message_unset_reaction(
        connection,
        team_id,
        chat_message_id,
        chat_message_id1,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/unsetReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_messages_chat_message_set_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_messages_chat_message_set_reaction(
        connection,
        team_id,
        chat_message_id,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/primaryChannel/messages/#{chat_message_id}/setReaction")
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action softDelete
  Delete a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_messages_chat_message_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_messages_chat_message_soft_delete(
        connection,
        team_id,
        chat_message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/primaryChannel/messages/#{chat_message_id}/softDelete")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action undoSoftDelete
  Undo soft deletion of a single chatMessage or a chat message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_messages_chat_message_undo_soft_delete(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_messages_chat_message_undo_soft_delete(
        connection,
        team_id,
        chat_message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/primaryChannel/messages/#{chat_message_id}/undoSoftDelete"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unsetReaction

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `groups_group_team_channels_channel_messages_chat_message_unset_reaction_request` (GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_messages_chat_message_unset_reaction(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamChannelsChannelMessagesChatMessageUnsetReactionRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_messages_chat_message_unset_reaction(
        connection,
        team_id,
        chat_message_id,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/joinedTeams/#{team_id}/primaryChannel/messages/#{chat_message_id}/unsetReaction"
      )
      |> add_param(
        :body,
        :body,
        groups_group_team_channels_channel_messages_chat_message_unset_reaction_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action provisionEmail
  Provision an email address for a channel. Microsoft Teams doesn't automatically provision an email address for a channel by default. To have Teams provision an email address, you can call provisionEmail, or through the Teams user interface, select Get email address, which triggers Teams to generate an email address if it has not already provisioned one. To remove the email address of a channel, use the removeEmail method. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_provision_email(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_provision_email(connection, team_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/primaryChannel/provisionEmail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.TeamsTeamChannelsChannelProvisionEmail2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action removeEmail
  Remove the email address of a channel. You can remove an email address only if it was provisioned using the provisionEmail method or through the Microsoft Teams client. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_primary_channel_remove_email(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_primary_channel_remove_email(connection, team_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/primaryChannel/removeEmail")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action share
  Share a schedule time range with schedule members. Make the collections of shift, openshift and timeOff items in the specified time range of the schedule viewable by the specified team members, including employees and managers. Each shift, openshift and timeOff instance in a schedule supports a draft version and a shared version of the item. The draft version is viewable by only managers, and the shared version is viewable by employees and managers. For each shift, openshift and timeOff instance in the specified time range, the share action updates the shared version from the draft version, so that in addition to managers, employees can also view the most current information about the item. The notifyTeam parameter further specifies which employees can view the item. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `groups_group_team_schedule_share_request` (GroupsGroupTeamScheduleShareRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_schedule_share(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupTeamScheduleShareRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_schedule_share(
        connection,
        team_id,
        groups_group_team_schedule_share_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/schedule/share")
      |> add_param(:body, :body, groups_group_team_schedule_share_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sendActivityNotification
  Send an activity feed notification in the scope of a team. For more details about sending notifications and the requirements for doing so, see sending Teams activity notifications. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `me_joined_teams_team_send_activity_notification_request` (MeJoinedTeamsTeamSendActivityNotificationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_send_activity_notification(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeJoinedTeamsTeamSendActivityNotificationRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_send_activity_notification(
        connection,
        team_id,
        me_joined_teams_team_send_activity_notification_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/sendActivityNotification")
      |> add_param(:body, :body, me_joined_teams_team_send_activity_notification_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unarchive
  Restore an archived team. This restores users' ability to send messages and edit the team, abiding by tenant and team settings. A Team is archived using the archive API. Unarchiving is an async operation. A team is unarchived once the async operation completes successfully, which may occur subsequent to a response from this API. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_joined_teams_team_unarchive(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_joined_teams_team_unarchive(connection, team_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/joinedTeams/#{team_id}/unarchive")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copy
  Copy a mailfolder and its contents to another mailfolder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request` (MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_copy(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_copy(
        connection,
        mail_folder_id,
        mail_folder_id1,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/copy")
      |> add_param(
        :body,
        :body,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_attachments_create_upload_session(
        connection,
        mail_folder_id,
        mail_folder_id1,
        message_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/messages/#{message_id}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copy
  Copy a message to a folder within the user's mailbox. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request` (MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_copy(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_copy(
        connection,
        mail_folder_id,
        mail_folder_id1,
        message_id,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/messages/#{message_id}/copy"
      )
      |> add_param(
        :body,
        :body,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createForward
  Create a draft to forward an existing message, in either JSON or MIME format. When using JSON format, you can: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error. - Update the draft later to add content to the body or change other message properties. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, forward a message in a single operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request` (UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward(
        connection,
        mail_folder_id,
        mail_folder_id1,
        message_id,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/messages/#{message_id}/createForward"
      )
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createReply
  Create a draft to reply to the sender of a message in either JSON or MIME format. When using JSON format: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - If replyTo is specified in the original message, per Internet Message Format (RFC 2822), you should send the reply to the recipients in replyTo, and not the recipients in from. - You can update the draft later to add reply content to the body or change other message properties. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply to a message in a single operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_reply(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_reply(
        connection,
        mail_folder_id,
        mail_folder_id1,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/messages/#{message_id}/createReply"
      )
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createReplyAll
  Create a draft to reply to the sender and all recipients of a message in either JSON or MIME format. When using JSON format: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), you should send the reply to the recipients in the replyTo and toRecipients properties, and not the recipients in the from and toRecipients properties. - You can update the draft later to add reply content to the body or change other message properties. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply-all to a message in a single action. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_reply_all(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_reply_all(
        connection,
        mail_folder_id,
        mail_folder_id1,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/messages/#{message_id}/createReplyAll"
      )
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  Forward a message using either JSON or MIME format. When using JSON format, you can: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to forward a message, and send it later. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request` (UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_forward(
        connection,
        mail_folder_id,
        mail_folder_id1,
        message_id,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/messages/#{message_id}/forward"
      )
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action move
  Move a message to another folder within the specified user's mailbox. This creates a new copy of the message in the destination folder and removes the original message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request` (MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move(
        connection,
        mail_folder_id,
        mail_folder_id1,
        message_id,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/messages/#{message_id}/move"
      )
      |> add_param(
        :body,
        :body,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reply
  Reply to the sender of a message using either JSON or MIME format. When using JSON format: * Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. * If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply to an existing message and send it later. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_reply(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_reply(
        connection,
        mail_folder_id,
        mail_folder_id1,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/messages/#{message_id}/reply"
      )
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action replyAll
  Reply to all recipients of a message using either JSON or MIME format. When using JSON format: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply-all to a message and send it later. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_reply_all(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_reply_all(
        connection,
        mail_folder_id,
        mail_folder_id1,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/messages/#{message_id}/replyAll"
      )
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action send
  Send an existing draft message. The draft message can be a new message draft, reply draft, reply-all draft, or a forward draft. This method saves the message in the Sent Items folder. Alternatively, send a new message in a single operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_send(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_send(
        connection,
        mail_folder_id,
        mail_folder_id1,
        message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/messages/#{message_id}/send"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action move
  Move a mailfolder and its contents to another mailfolder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `mail_folder_id1` (String.t): The unique identifier of mailFolder
  - `me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request` (MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_child_folders_mail_folder_move(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_child_folders_mail_folder_move(
        connection,
        mail_folder_id,
        mail_folder_id1,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/childFolders/#{mail_folder_id1}/move")
      |> add_param(
        :body,
        :body,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copy
  Copy a mailfolder and its contents to another mailfolder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request` (MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_copy(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_copy(
        connection,
        mail_folder_id,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/copy")
      |> add_param(
        :body,
        :body,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_messages_message_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_messages_message_attachments_create_upload_session(
        connection,
        mail_folder_id,
        message_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/mailFolders/#{mail_folder_id}/messages/#{message_id}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copy
  Copy a message to a folder within the user's mailbox. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request` (MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_messages_message_copy(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_messages_message_copy(
        connection,
        mail_folder_id,
        message_id,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/messages/#{message_id}/copy")
      |> add_param(
        :body,
        :body,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createForward
  Create a draft to forward an existing message, in either JSON or MIME format. When using JSON format, you can: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error. - Update the draft later to add content to the body or change other message properties. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, forward a message in a single operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request` (UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_messages_message_create_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_messages_message_create_forward(
        connection,
        mail_folder_id,
        message_id,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/messages/#{message_id}/createForward")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createReply
  Create a draft to reply to the sender of a message in either JSON or MIME format. When using JSON format: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - If replyTo is specified in the original message, per Internet Message Format (RFC 2822), you should send the reply to the recipients in replyTo, and not the recipients in from. - You can update the draft later to add reply content to the body or change other message properties. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply to a message in a single operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_messages_message_create_reply(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_messages_message_create_reply(
        connection,
        mail_folder_id,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/messages/#{message_id}/createReply")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createReplyAll
  Create a draft to reply to the sender and all recipients of a message in either JSON or MIME format. When using JSON format: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), you should send the reply to the recipients in the replyTo and toRecipients properties, and not the recipients in the from and toRecipients properties. - You can update the draft later to add reply content to the body or change other message properties. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply-all to a message in a single action. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_messages_message_create_reply_all(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_messages_message_create_reply_all(
        connection,
        mail_folder_id,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/messages/#{message_id}/createReplyAll")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  Forward a message using either JSON or MIME format. When using JSON format, you can: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to forward a message, and send it later. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request` (UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_messages_message_forward(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_messages_message_forward(
        connection,
        mail_folder_id,
        message_id,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/messages/#{message_id}/forward")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action move
  Move a message to another folder within the specified user's mailbox. This creates a new copy of the message in the destination folder and removes the original message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request` (MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_messages_message_move(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_messages_message_move(
        connection,
        mail_folder_id,
        message_id,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/messages/#{message_id}/move")
      |> add_param(
        :body,
        :body,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reply
  Reply to the sender of a message using either JSON or MIME format. When using JSON format: * Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. * If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply to an existing message and send it later. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_messages_message_reply(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_messages_message_reply(
        connection,
        mail_folder_id,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/messages/#{message_id}/reply")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action replyAll
  Reply to all recipients of a message using either JSON or MIME format. When using JSON format: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply-all to a message and send it later. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_messages_message_reply_all(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_messages_message_reply_all(
        connection,
        mail_folder_id,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/messages/#{message_id}/replyAll")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action send
  Send an existing draft message. The draft message can be a new message draft, reply draft, reply-all draft, or a forward draft. This method saves the message in the Sent Items folder. Alternatively, send a new message in a single operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `message_id` (String.t): The unique identifier of message
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_messages_message_send(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_messages_message_send(
        connection,
        mail_folder_id,
        message_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/messages/#{message_id}/send")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action move
  Move a mailfolder and its contents to another mailfolder. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mail_folder_id` (String.t): The unique identifier of mailFolder
  - `me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request` (MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_mail_folders_mail_folder_move(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_mail_folders_mail_folder_move(
        connection,
        mail_folder_id,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/mailFolders/#{mail_folder_id}/move")
      |> add_param(
        :body,
        :body,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderCopy2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action bypassActivationLock
  Bypass activation lock

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_bypass_activation_lock(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_bypass_activation_lock(
        connection,
        managed_device_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/bypassActivationLock")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action cleanWindowsDevice
  Clean Windows device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_management_managed_devices_managed_device_clean_windows_device_request` (DeviceManagementManagedDevicesManagedDeviceCleanWindowsDeviceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_clean_windows_device(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.DeviceManagementManagedDevicesManagedDeviceCleanWindowsDeviceRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_clean_windows_device(
        connection,
        managed_device_id,
        device_management_managed_devices_managed_device_clean_windows_device_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/cleanWindowsDevice")
      |> add_param(
        :body,
        :body,
        device_management_managed_devices_managed_device_clean_windows_device_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action deleteUserFromSharedAppleDevice
  Delete user from shared Apple device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `users_user_managed_devices_managed_device_delete_user_from_shared_apple_device_request` (UsersUserManagedDevicesManagedDeviceDeleteUserFromSharedAppleDeviceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_delete_user_from_shared_apple_device(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserManagedDevicesManagedDeviceDeleteUserFromSharedAppleDeviceRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_delete_user_from_shared_apple_device(
        connection,
        managed_device_id,
        users_user_managed_devices_managed_device_delete_user_from_shared_apple_device_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/deleteUserFromSharedAppleDevice")
      |> add_param(
        :body,
        :body,
        users_user_managed_devices_managed_device_delete_user_from_shared_apple_device_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action disableLostMode
  Disable lost mode

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_disable_lost_mode(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_disable_lost_mode(
        connection,
        managed_device_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/disableLostMode")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action locateDevice
  Locate a device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_locate_device(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_locate_device(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/locateDevice")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createDownloadUrl

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `device_log_collection_response_id` (String.t): The unique identifier of deviceLogCollectionResponse
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_log_collection_requests_device_log_collection_response_create_download_url(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_log_collection_requests_device_log_collection_response_create_download_url(
        connection,
        managed_device_id,
        device_log_collection_response_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/managedDevices/#{managed_device_id}/logCollectionRequests/#{device_log_collection_response_id}/createDownloadUrl"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.DrivesDriveItemsDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage8f132XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action logoutSharedAppleDeviceActiveUser
  Logout shared Apple device active user

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_logout_shared_apple_device_active_user(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_logout_shared_apple_device_active_user(
        connection,
        managed_device_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/logoutSharedAppleDeviceActiveUser")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action rebootNow
  Reboot device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_reboot_now(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_reboot_now(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/rebootNow")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action recoverPasscode
  Recover passcode

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_recover_passcode(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_recover_passcode(
        connection,
        managed_device_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/recoverPasscode")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action remoteLock
  Remote lock

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_remote_lock(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_remote_lock(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/remoteLock")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action requestRemoteAssistance
  Request remote assistance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_request_remote_assistance(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_request_remote_assistance(
        connection,
        managed_device_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/requestRemoteAssistance")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action resetPasscode
  Reset passcode

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_reset_passcode(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_reset_passcode(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/resetPasscode")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action retire
  Retire a device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_retire(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_retire(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/retire")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action shutDown
  Shut down device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_shut_down(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_shut_down(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/shutDown")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action syncDevice
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_sync_device(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_sync_device(connection, managed_device_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/syncDevice")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action updateWindowsDeviceAccount
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `users_user_managed_devices_managed_device_update_windows_device_account_request` (UsersUserManagedDevicesManagedDeviceUpdateWindowsDeviceAccountRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_update_windows_device_account(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserManagedDevicesManagedDeviceUpdateWindowsDeviceAccountRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_update_windows_device_account(
        connection,
        managed_device_id,
        users_user_managed_devices_managed_device_update_windows_device_account_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/updateWindowsDeviceAccount")
      |> add_param(
        :body,
        :body,
        users_user_managed_devices_managed_device_update_windows_device_account_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action windowsDefenderScan
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `users_user_managed_devices_managed_device_windows_defender_scan_request` (UsersUserManagedDevicesManagedDeviceWindowsDefenderScanRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_windows_defender_scan(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserManagedDevicesManagedDeviceWindowsDefenderScanRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_windows_defender_scan(
        connection,
        managed_device_id,
        users_user_managed_devices_managed_device_windows_defender_scan_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/windowsDefenderScan")
      |> add_param(
        :body,
        :body,
        users_user_managed_devices_managed_device_windows_defender_scan_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action windowsDefenderUpdateSignatures
  Not yet documented

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_windows_defender_update_signatures(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_windows_defender_update_signatures(
        connection,
        managed_device_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/windowsDefenderUpdateSignatures")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action wipe
  Wipe a device

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `managed_device_id` (String.t): The unique identifier of managedDevice
  - `users_user_managed_devices_managed_device_wipe_request` (UsersUserManagedDevicesManagedDeviceWipeRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_managed_devices_managed_device_wipe(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserManagedDevicesManagedDeviceWipeRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_managed_devices_managed_device_wipe(
        connection,
        managed_device_id,
        users_user_managed_devices_managed_device_wipe_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/managedDevices/#{managed_device_id}/wipe")
      |> add_param(:body, :body, users_user_managed_devices_managed_device_wipe_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session that allows an app to iteratively upload ranges of a file, so as to attach the file to the specified Outlook item. The item can be a message or event. Use this approach to attach a file if the file size is between 3 MB and 150 MB. To attach a file that's smaller than 3 MB, do a POST operation on the attachments navigation property of the Outlook item; see how to do this for a message or for an event. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. Request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows transfer to be resumed, in case the network connection is dropped during upload. The following are the steps to attach a file to an Outlook item using an upload session: See attach large files to Outlook messages or events for an example. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `message_id` (String.t): The unique identifier of message
  - `users_user_events_event_instances_event_attachments_create_upload_session_request` (UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_messages_message_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_messages_message_attachments_create_upload_session(
        connection,
        message_id,
        users_user_events_event_instances_event_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/messages/#{message_id}/attachments/createUploadSession")
      |> add_param(
        :body,
        :body,
        users_user_events_event_instances_event_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copy
  Copy a message to a folder within the user's mailbox. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `message_id` (String.t): The unique identifier of message
  - `me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request` (MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_messages_message_copy(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_messages_message_copy(
        connection,
        message_id,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/messages/#{message_id}/copy")
      |> add_param(
        :body,
        :body,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createForward
  Create a draft to forward an existing message, in either JSON or MIME format. When using JSON format, you can: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error. - Update the draft later to add content to the body or change other message properties. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, forward a message in a single operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request` (UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_messages_message_create_forward(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_messages_message_create_forward(
        connection,
        message_id,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/messages/#{message_id}/createForward")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createReply
  Create a draft to reply to the sender of a message in either JSON or MIME format. When using JSON format: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - If replyTo is specified in the original message, per Internet Message Format (RFC 2822), you should send the reply to the recipients in replyTo, and not the recipients in from. - You can update the draft later to add reply content to the body or change other message properties. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply to a message in a single operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_messages_message_create_reply(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_messages_message_create_reply(
        connection,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/messages/#{message_id}/createReply")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createReplyAll
  Create a draft to reply to the sender and all recipients of a message in either JSON or MIME format. When using JSON format: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), you should send the reply to the recipients in the replyTo and toRecipients properties, and not the recipients in the from and toRecipients properties. - You can update the draft later to add reply content to the body or change other message properties. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. Send the draft message in a subsequent operation. Alternatively, reply-all to a message in a single action. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_messages_message_create_reply_all(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_messages_message_create_reply_all(
        connection,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/messages/#{message_id}/createReplyAll")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action forward
  Forward a message using either JSON or MIME format. When using JSON format, you can: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - Specify either the toRecipients parameter or the toRecipients property of the message parameter. Specifying both or specifying neither will return an HTTP 400 Bad Request error. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to forward a message, and send it later. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request` (UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_messages_message_forward(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderChildFoldersMailFolderMessagesMessageCreateForwardRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_messages_message_forward(
        connection,
        message_id,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/messages/#{message_id}/forward")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_child_folders_mail_folder_messages_message_create_forward_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action move
  Move a message to another folder within the specified user's mailbox. This creates a new copy of the message in the destination folder and removes the original message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `message_id` (String.t): The unique identifier of message
  - `me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request` (MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_messages_message_move(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeMailFoldersMailFolderChildFoldersMailFolderMessagesMessageMoveRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_messages_message_move(
        connection,
        message_id,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/messages/#{message_id}/move")
      |> add_param(
        :body,
        :body,
        me_mail_folders_mail_folder_child_folders_mail_folder_messages_message_move_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequestMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reply
  Reply to the sender of a message using either JSON or MIME format. When using JSON format: * Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. * If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply to an existing message and send it later. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_messages_message_reply(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_messages_message_reply(
        connection,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/messages/#{message_id}/reply")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action replyAll
  Reply to all recipients of a message using either JSON or MIME format. When using JSON format: - Specify either a comment or the body property of the message parameter. Specifying both will return an HTTP 400 Bad Request error. - If the original message specifies a recipient in the replyTo property, per Internet Message Format (RFC 2822), send the reply to the recipients in replyTo and not the recipient in the from property. When using MIME format: - Provide the applicable Internet message headers and the MIME content, all encoded in base64 format in the request body. - Add any attachments and S/MIME properties to the MIME content. This method saves the message in the Sent Items folder. Alternatively, create a draft to reply-all to a message and send it later. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `message_id` (String.t): The unique identifier of message
  - `users_user_mail_folders_mail_folder_messages_message_reply_all_request` (UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_messages_message_reply_all(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserMailFoldersMailFolderMessagesMessageReplyAllRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_messages_message_reply_all(
        connection,
        message_id,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/messages/#{message_id}/replyAll")
      |> add_param(
        :body,
        :body,
        users_user_mail_folders_mail_folder_messages_message_reply_all_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action send
  Send an existing draft message. The draft message can be a new message draft, reply draft, reply-all draft, or a forward draft. This method saves the message in the Sent Items folder. Alternatively, send a new message in a single operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `message_id` (String.t): The unique identifier of message
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_messages_message_send(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_messages_message_send(connection, message_id, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/messages/#{message_id}/send")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action getNotebookFromWebUrl
  Retrieve the properties and relationships of a notebook object by using its URL path. The location can be user notebooks on Microsoft 365, group notebooks, or SharePoint site-hosted team notebooks on Microsoft 365. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `users_user_onenote_notebooks_get_notebook_from_web_url_request` (UsersUserOnenoteNotebooksGetNotebookFromWebUrlRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrl2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_notebooks_get_notebook_from_web_url(
          Tesla.Env.client(),
          MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrlRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrl2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_notebooks_get_notebook_from_web_url(
        connection,
        users_user_onenote_notebooks_get_notebook_from_web_url_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/onenote/notebooks/getNotebookFromWebUrl")
      |> add_param(:body, :body, users_user_onenote_notebooks_get_notebook_from_web_url_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.UsersUserOnenoteNotebooksGetNotebookFromWebUrl2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notebook_id` (String.t): The unique identifier of notebook
  - `me_onenote_notebooks_notebook_copy_notebook_request` (MeOnenoteNotebooksNotebookCopyNotebookRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_notebooks_notebook_copy_notebook(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteNotebooksNotebookCopyNotebookRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_notebooks_notebook_copy_notebook(
        connection,
        notebook_id,
        me_onenote_notebooks_notebook_copy_notebook_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/onenote/notebooks/#{notebook_id}/copyNotebook")
      |> add_param(:body, :body, me_onenote_notebooks_notebook_copy_notebook_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        connection,
        notebook_id,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToNotebook"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        connection,
        notebook_id,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToSectionGroup"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notebook_id` (String.t): The unique identifier of notebook
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_notebooks_notebook_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        notebook_id,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/notebooks/#{notebook_id}/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_notebooks_notebook_sections_onenote_section_copy_to_notebook(
        connection,
        notebook_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/copyToNotebook")
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_notebooks_notebook_sections_onenote_section_copy_to_section_group(
        connection,
        notebook_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/copyToSectionGroup"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `notebook_id` (String.t): The unique identifier of notebook
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_notebooks_notebook_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        notebook_id,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/notebooks/#{notebook_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_pages_onenote_page_copy_to_section(
        connection,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/onenote/pages/#{onenote_page_id}/copyToSection")
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_pages_onenote_page_onenote_patch_content(
        connection,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/onenote/pages/#{onenote_page_id}/onenotePatchContent")
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_section_groups_section_group_sections_onenote_section_copy_to_notebook(
        connection,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToNotebook"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_section_groups_section_group_sections_onenote_section_copy_to_section_group(
        connection,
        section_group_id,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/copyToSectionGroup"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection"
      )
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `section_group_id` (String.t): The unique identifier of sectionGroup
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        section_group_id,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/sectionGroups/#{section_group_id}/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToNotebook
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_sections_onenote_section_copy_to_notebook(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_sections_onenote_section_copy_to_notebook(
        connection,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/onenote/sections/#{onenote_section_id}/copyToNotebook")
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSectionGroup
  For Copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `me_onenote_sections_onenote_section_copy_to_section_group_request` (MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_sections_onenote_section_copy_to_section_group(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionsOnenoteSectionCopyToSectionGroupRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_sections_onenote_section_copy_to_section_group(
        connection,
        onenote_section_id,
        me_onenote_sections_onenote_section_copy_to_section_group_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/onenote/sections/#{onenote_section_id}/copyToSectionGroup")
      |> add_param(
        :body,
        :body,
        me_onenote_sections_onenote_section_copy_to_section_group_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToSection
  Copy a page to a specific section. For copy operations, you follow an asynchronous calling pattern:  First call the Copy action, and then poll the operation endpoint for the result. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request` (MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSectionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_sections_onenote_section_pages_onenote_page_copy_to_section(
        connection,
        onenote_section_id,
        onenote_page_id,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/copyToSection")
      |> add_param(
        :body,
        :body,
        me_onenote_section_groups_section_group_sections_onenote_section_pages_onenote_page_copy_to_section_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MeOnenoteSectionGroupsSectionGroupSectionsOnenoteSectionPagesOnenotePageCopyToSection2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action onenotePatchContent

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `onenote_section_id` (String.t): The unique identifier of onenoteSection
  - `onenote_page_id` (String.t): The unique identifier of onenotePage
  - `users_user_onenote_pages_onenote_page_onenote_patch_content_request` (UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserOnenotePagesOnenotePageOnenotePatchContentRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_onenote_sections_onenote_section_pages_onenote_page_onenote_patch_content(
        connection,
        onenote_section_id,
        onenote_page_id,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/onenote/sections/#{onenote_section_id}/pages/#{onenote_page_id}/onenotePatchContent"
      )
      |> add_param(
        :body,
        :body,
        users_user_onenote_pages_onenote_page_onenote_patch_content_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createOrGet
  Create an onlineMeeting object with a custom specified external ID. If the external ID already exists, this API will return the onlineMeeting object with that external ID.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `users_user_online_meetings_create_or_get_request` (UsersUserOnlineMeetingsCreateOrGetRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserOnlineMeetingsCreateOrGet2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_online_meetings_create_or_get(
          Tesla.Env.client(),
          MicrosoftGraph.Model.UsersUserOnlineMeetingsCreateOrGetRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.UsersUserOnlineMeetingsCreateOrGet2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def me_online_meetings_create_or_get(
        connection,
        users_user_online_meetings_create_or_get_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/onlineMeetings/createOrGet")
      |> add_param(:body, :body, users_user_online_meetings_create_or_get_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.UsersUserOnlineMeetingsCreateOrGet2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clearPresence
  Clear the application's presence session for a user. If it is the user's only presence session, the user's presence will change to Offline/Offline. For details about presences sessions, see presence: setPresence. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `users_user_presence_clear_presence_request` (UsersUserPresenceClearPresenceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_presence_clear_presence(
          Tesla.Env.client(),
          MicrosoftGraph.Model.UsersUserPresenceClearPresenceRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_presence_clear_presence(
        connection,
        users_user_presence_clear_presence_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/presence/clearPresence")
      |> add_param(:body, :body, users_user_presence_clear_presence_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action clearUserPreferredPresence
  Clear the preferred availability and activity status for a user. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_presence_clear_user_preferred_presence(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_presence_clear_user_preferred_presence(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/presence/clearUserPreferredPresence")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setPresence
  Set the state of a user's presence session as an application. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `me_presence_set_presence_request` (MePresenceSetPresenceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_presence_set_presence(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MePresenceSetPresenceRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_presence_set_presence(connection, me_presence_set_presence_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/presence/setPresence")
      |> add_param(:body, :body, me_presence_set_presence_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setStatusMessage
  Set a presence status message for a user. An optional expiration date and time can be supplied. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `me_presence_set_status_message_request` (MePresenceSetStatusMessageRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_presence_set_status_message(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MePresenceSetStatusMessageRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_presence_set_status_message(
        connection,
        me_presence_set_status_message_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/presence/setStatusMessage")
      |> add_param(:body, :body, me_presence_set_status_message_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action setUserPreferredPresence
  Set the preferred availability and activity status for a user. If the preferred presence of a user is set, the user's presence shows as the preferred status. Preferred presence takes effect only when at least one presence session exists for the user. Otherwise, the user's presence shows as Offline. A presence session is created as a result of a successful setPresence operation, or if the user is signed in on a Microsoft Teams client. For more details, see presence sessions and time-out and expiration. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `me_presence_set_user_preferred_presence_request` (MePresenceSetUserPreferredPresenceRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_presence_set_user_preferred_presence(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MePresenceSetUserPreferredPresenceRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_presence_set_user_preferred_presence(
        connection,
        me_presence_set_user_preferred_presence_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/presence/setUserPreferredPresence")
      |> add_param(:body, :body, me_presence_set_user_preferred_presence_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action removeAllDevicesFromManagement
  Retire all devices from management for this user

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_remove_all_devices_from_management(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_remove_all_devices_from_management(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/removeAllDevicesFromManagement")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reprocessLicenseAssignment
  Reprocess all group-based license assignments for the user. To learn more about group-based licensing, see What is group-based licensing in Microsoft Entra ID. Also see Identify and resolve license assignment problems for a group in Microsoft Entra ID for more details. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowActivateRequestSubjectsInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_reprocess_license_assignment(Tesla.Env.client(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowActivateRequestSubjectsInner.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_reprocess_license_assignment(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/reprocessLicenseAssignment")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.IdentityGovernanceLifecycleWorkflowsDeletedItemsWorkflowsWorkflowActivateRequestSubjectsInner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restore
  Restore a recently deleted application, group, servicePrincipal, administrative unit, or user object from deleted items. If an item was accidentally deleted, you can fully restore the item. However, security groups cannot be restored. A recently deleted item remains available for up to 30 days. After 30 days, the item is permanently deleted. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_restore(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_restore(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/restore")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.OrganizationOrganizationRestore2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action retryServiceProvisioning

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_retry_service_provisioning(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_retry_service_provisioning(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/retryServiceProvisioning")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action revokeSignInSessions
  Invalidates all the refresh tokens issued to applications for a user (as well as session cookies in a user's browser), by resetting the signInSessionsValidFromDateTime user property to the current date-time. Typically, this operation is performed (by the user or an administrator) if the user has a lost or stolen device. This operation prevents access to the organization's data through applications on the device by requiring the user to sign in again to all applications that they have previously consented to, independent of device. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_revoke_sign_in_sessions(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_revoke_sign_in_sessions(connection, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/revokeSignInSessions")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.AdminServiceAnnouncementMessagesUnfavorite2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sendMail
  Send the message specified in the request body using either JSON or MIME format. When using JSON format, you can include a file attachment in the same sendMail action call. When using MIME format: This method saves the message in the Sent Items folder. Alternatively, create a draft message to send later. To learn more about the steps involved in the backend before a mail is delivered to recipients, see here. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `me_send_mail_request` (MeSendMailRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_send_mail(Tesla.Env.client(), MicrosoftGraph.Model.MeSendMailRequest.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_send_mail(connection, me_send_mail_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/sendMail")
      |> add_param(:body, :body, me_send_mail_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action sendActivityNotification
  Send an activity feed notification to a user. For more details about sending notifications and the requirements for doing so, see sending Teams activity notifications. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `me_teamwork_send_activity_notification_request` (MeTeamworkSendActivityNotificationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_teamwork_send_activity_notification(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MeTeamworkSendActivityNotificationRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_teamwork_send_activity_notification(
        connection,
        me_teamwork_send_activity_notification_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/teamwork/sendActivityNotification")
      |> add_param(:body, :body, me_teamwork_send_activity_notification_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action createUploadSession
  Create an upload session to iteratively upload ranges of a file as an attachment to a todoTask. As part of the response, this action returns an upload URL that you can use in subsequent sequential PUT queries. The request headers for each PUT operation let you specify the exact range of bytes to be uploaded. This allows the transfer to be resumed, in case the network connection is dropped during the upload. The following are the steps to attach a file to a Microsoft To Do task using an upload session: For an example that describes the end-to-end attachment process, see attach files to a To Do task. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `todo_task_list_id` (String.t): The unique identifier of todoTaskList
  - `todo_task_id` (String.t): The unique identifier of todoTask
  - `users_user_todo_lists_todo_task_list_tasks_todo_task_attachments_create_upload_session_request` (UsersUserTodoListsTodoTaskListTasksTodoTaskAttachmentsCreateUploadSessionRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_todo_lists_todo_task_list_tasks_todo_task_attachments_create_upload_session(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.UsersUserTodoListsTodoTaskListTasksTodoTaskAttachmentsCreateUploadSessionRequest.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_todo_lists_todo_task_list_tasks_todo_task_attachments_create_upload_session(
        connection,
        todo_task_list_id,
        todo_task_id,
        users_user_todo_lists_todo_task_list_tasks_todo_task_attachments_create_upload_session_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/me/todo/lists/#{todo_task_list_id}/tasks/#{todo_task_id}/attachments/createUploadSession"
      )
      |> add_param(
        :body,
        :body,
        users_user_todo_lists_todo_task_list_tasks_todo_task_attachments_create_upload_session_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action translateExchangeIds
  Translate identifiers of Outlook-related resources between formats. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `me_translate_exchange_ids_request` (MeTranslateExchangeIdsRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MeTranslateExchangeIds2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_translate_exchange_ids(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MeTranslateExchangeIdsRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MeTranslateExchangeIds2XxResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_translate_exchange_ids(connection, me_translate_exchange_ids_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/me/translateExchangeIds")
      |> add_param(:body, :body, me_translate_exchange_ids_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MeTranslateExchangeIds2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action wipeManagedAppRegistrationsByDeviceTag
  Issues a wipe operation on an app registration with specified device tag.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `me_wipe_managed_app_registrations_by_device_tag_request` (MeWipeManagedAppRegistrationsByDeviceTagRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec me_wipe_managed_app_registrations_by_device_tag(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MeWipeManagedAppRegistrationsByDeviceTagRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def me_wipe_managed_app_registrations_by_device_tag(
        connection,
        me_wipe_managed_app_registrations_by_device_tag_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/me/wipeManagedAppRegistrationsByDeviceTag")
      |> add_param(:body, :body, me_wipe_managed_app_registrations_by_device_tag_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
