# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceManagementDeviceCompliancePolicy do
  @moduledoc """
  API calls for all endpoints tagged `DeviceManagementDeviceCompliancePolicy`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create androidCompliancePolicy
  Create a new androidCompliancePolicy object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_device_compliance_policy` (MicrosoftGraphDeviceCompliancePolicy): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_create_device_compliance_policies(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicy.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicy.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_create_device_compliance_policies(connection, microsoft_graph_device_compliance_policy, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceCompliancePolicies")
      |> add_param(:body, :body, microsoft_graph_device_compliance_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete macOSCompliancePolicy
  Deletes a macOSCompliancePolicy.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_delete_device_compliance_policies(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_delete_device_compliance_policies(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_assignments_get_count332a(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_assignments_get_count332a(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create deviceCompliancePolicyAssignment
  Create a new deviceCompliancePolicyAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `microsoft_graph_device_compliance_policy_assignment` (MicrosoftGraphDeviceCompliancePolicyAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_create_assignments(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignment.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_create_assignments(connection, device_compliance_policy_id, microsoft_graph_device_compliance_policy_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/assignments")
      |> add_param(:body, :body, microsoft_graph_device_compliance_policy_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to deviceSettingStateSummaries for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `microsoft_graph_setting_state_device_summary` (MicrosoftGraphSettingStateDeviceSummary): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_create_device_setting_state_summaries(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_create_device_setting_state_summaries(connection, device_compliance_policy_id, microsoft_graph_setting_state_device_summary, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceSettingStateSummaries")
      |> add_param(:body, :body, microsoft_graph_setting_state_device_summary)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create deviceComplianceDeviceStatus
  Create a new deviceComplianceDeviceStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `microsoft_graph_device_compliance_device_status` (MicrosoftGraphDeviceComplianceDeviceStatus): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_create_device_statuses(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatus.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatus.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_create_device_statuses(connection, device_compliance_policy_id, microsoft_graph_device_compliance_device_status, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceStatuses")
      |> add_param(:body, :body, microsoft_graph_device_compliance_device_status)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create deviceComplianceScheduledActionForRule
  Create a new deviceComplianceScheduledActionForRule object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `microsoft_graph_device_compliance_scheduled_action_for_rule` (MicrosoftGraphDeviceComplianceScheduledActionForRule): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_create_scheduled_actions_for_rule(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRule.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_create_scheduled_actions_for_rule(connection, device_compliance_policy_id, microsoft_graph_device_compliance_scheduled_action_for_rule, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule")
      |> add_param(:body, :body, microsoft_graph_device_compliance_scheduled_action_for_rule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create deviceComplianceUserStatus
  Create a new deviceComplianceUserStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `microsoft_graph_device_compliance_user_status` (MicrosoftGraphDeviceComplianceUserStatus): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_create_user_statuses(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatus.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatus.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_create_user_statuses(connection, device_compliance_policy_id, microsoft_graph_device_compliance_user_status, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/userStatuses")
      |> add_param(:body, :body, microsoft_graph_device_compliance_user_status)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete deviceCompliancePolicyAssignment
  Deletes a deviceCompliancePolicyAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_policy_assignment_id` (String.t): The unique identifier of deviceCompliancePolicyAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_delete_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_delete_assignments(connection, device_compliance_policy_id, device_compliance_policy_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/assignments/#{device_compliance_policy_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property deviceSettingStateSummaries for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `setting_state_device_summary_id` (String.t): The unique identifier of settingStateDeviceSummary
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_delete_device_setting_state_summaries(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_delete_device_setting_state_summaries(connection, device_compliance_policy_id, setting_state_device_summary_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceSettingStateSummaries/#{setting_state_device_summary_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property deviceStatusOverview for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_delete_device_status_overview(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_delete_device_status_overview(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceStatusOverview")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete deviceComplianceDeviceStatus
  Deletes a deviceComplianceDeviceStatus.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_device_status_id` (String.t): The unique identifier of deviceComplianceDeviceStatus
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_delete_device_statuses(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_delete_device_statuses(connection, device_compliance_policy_id, device_compliance_device_status_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceStatuses/#{device_compliance_device_status_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete deviceComplianceScheduledActionForRule
  Deletes a deviceComplianceScheduledActionForRule.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_scheduled_action_for_rule_id` (String.t): The unique identifier of deviceComplianceScheduledActionForRule
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_delete_scheduled_actions_for_rule(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_delete_scheduled_actions_for_rule(connection, device_compliance_policy_id, device_compliance_scheduled_action_for_rule_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule/#{device_compliance_scheduled_action_for_rule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property userStatusOverview for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_delete_user_status_overview(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_delete_user_status_overview(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/userStatusOverview")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete deviceComplianceUserStatus
  Deletes a deviceComplianceUserStatus.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_user_status_id` (String.t): The unique identifier of deviceComplianceUserStatus
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_delete_user_statuses(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_delete_user_statuses(connection, device_compliance_policy_id, device_compliance_user_status_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/userStatuses/#{device_compliance_user_status_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_device_setting_state_summaries_get_count6b27(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_device_setting_state_summaries_get_count6b27(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceSettingStateSummaries/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_device_statuses_get_count_f70b(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_device_statuses_get_count_f70b(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceStatuses/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceCompliancePolicyAssignment
  Read properties and relationships of the deviceCompliancePolicyAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_policy_assignment_id` (String.t): The unique identifier of deviceCompliancePolicyAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_get_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignment.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_get_assignments(connection, device_compliance_policy_id, device_compliance_policy_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/assignments/#{device_compliance_policy_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_get_count6c5d(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_get_count6c5d(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceSettingStateSummaries from deviceManagement
  Compliance Setting State Device Summary

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `setting_state_device_summary_id` (String.t): The unique identifier of settingStateDeviceSummary
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_get_device_setting_state_summaries(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_get_device_setting_state_summaries(connection, device_compliance_policy_id, setting_state_device_summary_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceSettingStateSummaries/#{setting_state_device_summary_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceComplianceDeviceOverview
  Read properties and relationships of the deviceComplianceDeviceOverview object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceOverview.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_get_device_status_overview(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceOverview.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_get_device_status_overview(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceStatusOverview")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceOverview},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceComplianceDeviceStatus
  Read properties and relationships of the deviceComplianceDeviceStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_device_status_id` (String.t): The unique identifier of deviceComplianceDeviceStatus
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_get_device_statuses(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatus.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_get_device_statuses(connection, device_compliance_policy_id, device_compliance_device_status_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceStatuses/#{device_compliance_device_status_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceComplianceScheduledActionForRule
  Read properties and relationships of the deviceComplianceScheduledActionForRule object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_scheduled_action_for_rule_id` (String.t): The unique identifier of deviceComplianceScheduledActionForRule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_get_scheduled_actions_for_rule(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRule.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_get_scheduled_actions_for_rule(connection, device_compliance_policy_id, device_compliance_scheduled_action_for_rule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule/#{device_compliance_scheduled_action_for_rule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceComplianceUserOverview
  Read properties and relationships of the deviceComplianceUserOverview object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserOverview.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_get_user_status_overview(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserOverview.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_get_user_status_overview(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/userStatusOverview")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserOverview},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceComplianceUserStatus
  Read properties and relationships of the deviceComplianceUserStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_user_status_id` (String.t): The unique identifier of deviceComplianceUserStatus
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_get_user_statuses(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatus.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_get_user_statuses(connection, device_compliance_policy_id, device_compliance_user_status_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/userStatuses/#{device_compliance_user_status_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List deviceCompliancePolicyAssignments
  List properties and relationships of the deviceCompliancePolicyAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_list_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_list_assignments(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceSettingStateSummaries from deviceManagement
  Compliance Setting State Device Summary

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummaryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_list_device_setting_state_summaries(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummaryCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_list_device_setting_state_summaries(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceSettingStateSummaries")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummaryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List deviceComplianceDeviceStatuses
  List properties and relationships of the deviceComplianceDeviceStatus objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatusCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_list_device_statuses(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatusCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_list_device_statuses(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceStatuses")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatusCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List deviceComplianceScheduledActionForRules
  List properties and relationships of the deviceComplianceScheduledActionForRule objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRuleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_list_scheduled_actions_for_rule(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRuleCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_list_scheduled_actions_for_rule(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRuleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List deviceComplianceUserStatuses
  List properties and relationships of the deviceComplianceUserStatus objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatusCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_list_user_statuses(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatusCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_list_user_statuses(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/userStatuses")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatusCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create deviceComplianceActionItem
  Create a new deviceComplianceActionItem object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_scheduled_action_for_rule_id` (String.t): The unique identifier of deviceComplianceScheduledActionForRule
  - `microsoft_graph_device_compliance_action_item` (MicrosoftGraphDeviceComplianceActionItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_scheduled_actions_for_rule_create_scheduled_action_configurations(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_scheduled_actions_for_rule_create_scheduled_action_configurations(connection, device_compliance_policy_id, device_compliance_scheduled_action_for_rule_id, microsoft_graph_device_compliance_action_item, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule/#{device_compliance_scheduled_action_for_rule_id}/scheduledActionConfigurations")
      |> add_param(:body, :body, microsoft_graph_device_compliance_action_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete deviceComplianceActionItem
  Deletes a deviceComplianceActionItem.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_scheduled_action_for_rule_id` (String.t): The unique identifier of deviceComplianceScheduledActionForRule
  - `device_compliance_action_item_id` (String.t): The unique identifier of deviceComplianceActionItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_scheduled_actions_for_rule_delete_scheduled_action_configurations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_scheduled_actions_for_rule_delete_scheduled_action_configurations(connection, device_compliance_policy_id, device_compliance_scheduled_action_for_rule_id, device_compliance_action_item_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule/#{device_compliance_scheduled_action_for_rule_id}/scheduledActionConfigurations/#{device_compliance_action_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_scheduled_actions_for_rule_get_count_afd5(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_scheduled_actions_for_rule_get_count_afd5(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceComplianceActionItem
  Read properties and relationships of the deviceComplianceActionItem object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_scheduled_action_for_rule_id` (String.t): The unique identifier of deviceComplianceScheduledActionForRule
  - `device_compliance_action_item_id` (String.t): The unique identifier of deviceComplianceActionItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_scheduled_actions_for_rule_get_scheduled_action_configurations(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_scheduled_actions_for_rule_get_scheduled_action_configurations(connection, device_compliance_policy_id, device_compliance_scheduled_action_for_rule_id, device_compliance_action_item_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule/#{device_compliance_scheduled_action_for_rule_id}/scheduledActionConfigurations/#{device_compliance_action_item_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List deviceComplianceActionItems
  List properties and relationships of the deviceComplianceActionItem objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_scheduled_action_for_rule_id` (String.t): The unique identifier of deviceComplianceScheduledActionForRule
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_scheduled_actions_for_rule_list_scheduled_action_configurations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItemCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_scheduled_actions_for_rule_list_scheduled_action_configurations(connection, device_compliance_policy_id, device_compliance_scheduled_action_for_rule_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule/#{device_compliance_scheduled_action_for_rule_id}/scheduledActionConfigurations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_scheduled_action_for_rule_id` (String.t): The unique identifier of deviceComplianceScheduledActionForRule
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_scheduled_actions_for_rule_scheduled_action_configurations_get_count_b4b5(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_scheduled_actions_for_rule_scheduled_action_configurations_get_count_b4b5(connection, device_compliance_policy_id, device_compliance_scheduled_action_for_rule_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule/#{device_compliance_scheduled_action_for_rule_id}/scheduledActionConfigurations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceComplianceActionItem
  Update the properties of a deviceComplianceActionItem object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_scheduled_action_for_rule_id` (String.t): The unique identifier of deviceComplianceScheduledActionForRule
  - `device_compliance_action_item_id` (String.t): The unique identifier of deviceComplianceActionItem
  - `microsoft_graph_device_compliance_action_item` (MicrosoftGraphDeviceComplianceActionItem): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_scheduled_actions_for_rule_update_scheduled_action_configurations(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItem.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_scheduled_actions_for_rule_update_scheduled_action_configurations(connection, device_compliance_policy_id, device_compliance_scheduled_action_for_rule_id, device_compliance_action_item_id, microsoft_graph_device_compliance_action_item, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule/#{device_compliance_scheduled_action_for_rule_id}/scheduledActionConfigurations/#{device_compliance_action_item_id}")
      |> add_param(:body, :body, microsoft_graph_device_compliance_action_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceActionItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceCompliancePolicyAssignment
  Update the properties of a deviceCompliancePolicyAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_policy_assignment_id` (String.t): The unique identifier of deviceCompliancePolicyAssignment
  - `microsoft_graph_device_compliance_policy_assignment` (MicrosoftGraphDeviceCompliancePolicyAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_update_assignments(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignment.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_update_assignments(connection, device_compliance_policy_id, device_compliance_policy_assignment_id, microsoft_graph_device_compliance_policy_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/assignments/#{device_compliance_policy_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_device_compliance_policy_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property deviceSettingStateSummaries in deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `setting_state_device_summary_id` (String.t): The unique identifier of settingStateDeviceSummary
  - `microsoft_graph_setting_state_device_summary` (MicrosoftGraphSettingStateDeviceSummary): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_update_device_setting_state_summaries(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_update_device_setting_state_summaries(connection, device_compliance_policy_id, setting_state_device_summary_id, microsoft_graph_setting_state_device_summary, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceSettingStateSummaries/#{setting_state_device_summary_id}")
      |> add_param(:body, :body, microsoft_graph_setting_state_device_summary)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceComplianceDeviceOverview
  Update the properties of a deviceComplianceDeviceOverview object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `microsoft_graph_device_compliance_device_overview` (MicrosoftGraphDeviceComplianceDeviceOverview): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceOverview.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_update_device_status_overview(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceOverview.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceOverview.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_update_device_status_overview(connection, device_compliance_policy_id, microsoft_graph_device_compliance_device_overview, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceStatusOverview")
      |> add_param(:body, :body, microsoft_graph_device_compliance_device_overview)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceOverview},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceComplianceDeviceStatus
  Update the properties of a deviceComplianceDeviceStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_device_status_id` (String.t): The unique identifier of deviceComplianceDeviceStatus
  - `microsoft_graph_device_compliance_device_status` (MicrosoftGraphDeviceComplianceDeviceStatus): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_update_device_statuses(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatus.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatus.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_update_device_statuses(connection, device_compliance_policy_id, device_compliance_device_status_id, microsoft_graph_device_compliance_device_status, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/deviceStatuses/#{device_compliance_device_status_id}")
      |> add_param(:body, :body, microsoft_graph_device_compliance_device_status)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceDeviceStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceComplianceScheduledActionForRule
  Update the properties of a deviceComplianceScheduledActionForRule object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_scheduled_action_for_rule_id` (String.t): The unique identifier of deviceComplianceScheduledActionForRule
  - `microsoft_graph_device_compliance_scheduled_action_for_rule` (MicrosoftGraphDeviceComplianceScheduledActionForRule): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_update_scheduled_actions_for_rule(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRule.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_update_scheduled_actions_for_rule(connection, device_compliance_policy_id, device_compliance_scheduled_action_for_rule_id, microsoft_graph_device_compliance_scheduled_action_for_rule, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/scheduledActionsForRule/#{device_compliance_scheduled_action_for_rule_id}")
      |> add_param(:body, :body, microsoft_graph_device_compliance_scheduled_action_for_rule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceScheduledActionForRule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceComplianceUserOverview
  Update the properties of a deviceComplianceUserOverview object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `microsoft_graph_device_compliance_user_overview` (MicrosoftGraphDeviceComplianceUserOverview): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserOverview.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_update_user_status_overview(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserOverview.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserOverview.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_update_user_status_overview(connection, device_compliance_policy_id, microsoft_graph_device_compliance_user_overview, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/userStatusOverview")
      |> add_param(:body, :body, microsoft_graph_device_compliance_user_overview)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserOverview},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceComplianceUserStatus
  Update the properties of a deviceComplianceUserStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `device_compliance_user_status_id` (String.t): The unique identifier of deviceComplianceUserStatus
  - `microsoft_graph_device_compliance_user_status` (MicrosoftGraphDeviceComplianceUserStatus): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_update_user_statuses(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatus.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatus.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_update_user_statuses(connection, device_compliance_policy_id, device_compliance_user_status_id, microsoft_graph_device_compliance_user_status, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/userStatuses/#{device_compliance_user_status_id}")
      |> add_param(:body, :body, microsoft_graph_device_compliance_user_status)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceComplianceUserStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_compliance_policies_user_statuses_get_count_fa4a(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_device_compliance_policies_user_statuses_get_count_fa4a(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}/userStatuses/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get windows10MobileCompliancePolicy
  Read properties and relationships of the windows10MobileCompliancePolicy object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_get_device_compliance_policies(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicy.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_get_device_compliance_policies(connection, device_compliance_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List windows10CompliancePolicies
  List properties and relationships of the windows10CompliancePolicy objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_list_device_compliance_policies(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_list_device_compliance_policies(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceCompliancePolicies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicyCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update windows81CompliancePolicy
  Update the properties of a windows81CompliancePolicy object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_compliance_policy_id` (String.t): The unique identifier of deviceCompliancePolicy
  - `microsoft_graph_device_compliance_policy` (MicrosoftGraphDeviceCompliancePolicy): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_update_device_compliance_policies(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicy.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicy.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_management_update_device_compliance_policies(connection, device_compliance_policy_id, microsoft_graph_device_compliance_policy, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceCompliancePolicies/#{device_compliance_policy_id}")
      |> add_param(:body, :body, microsoft_graph_device_compliance_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceCompliancePolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
