# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.PoliciesPermissionGrantPolicy do
  @moduledoc """
  API calls for all endpoints tagged `PoliciesPermissionGrantPolicy`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create permissionGrantPolicy
  Creates a permissionGrantPolicy. A permission grant policy is used to describe the conditions under which permissions can be granted (for example, during application consent). After creating the permission grant policy, you can add include condition sets to add matching rules, and add exclude condition sets to add exclusion rules. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_permission_grant_policy` (MicrosoftGraphPermissionGrantPolicy): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_create_permission_grant_policies(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicy.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicy.t()}
          | {:error, Tesla.Env.t()}
  def policies_create_permission_grant_policies(
        connection,
        microsoft_graph_permission_grant_policy,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/policies/permissionGrantPolicies")
      |> add_param(:body, :body, microsoft_graph_permission_grant_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete permissionGrantPolicy
  Delete a permissionGrantPolicy object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_delete_permission_grant_policies(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_delete_permission_grant_policies(
        connection,
        permission_grant_policy_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/policies/permissionGrantPolicies/#{permission_grant_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get permissionGrantPolicy
  Retrieve a single permissionGrantPolicy object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_get_permission_grant_policies(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicy.t()}
          | {:error, Tesla.Env.t()}
  def policies_get_permission_grant_policies(connection, permission_grant_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/permissionGrantPolicies/#{permission_grant_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List permissionGrantPolicies
  Retrieve the list of permissionGrantPolicy objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicyCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_list_permission_grant_policies(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicyCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_list_permission_grant_policies(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/permissionGrantPolicies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicyCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create permissionGrantConditionSet in excludes collection of permissionGrantPolicy
  Add conditions under which a permission grant event is *excluded* in a permission grant policy. You do this by adding a permissionGrantConditionSet to the excludes collection of a  permissionGrantPolicy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `microsoft_graph_permission_grant_condition_set` (MicrosoftGraphPermissionGrantConditionSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_create_excludes(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_create_excludes(
        connection,
        permission_grant_policy_id,
        microsoft_graph_permission_grant_condition_set,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/policies/permissionGrantPolicies/#{permission_grant_policy_id}/excludes")
      |> add_param(:body, :body, microsoft_graph_permission_grant_condition_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create permissionGrantConditionSet in includes collection of permissionGrantPolicy
  Add conditions under which a permission grant event is *included* in a permission grant policy. You do this by adding a permissionGrantConditionSet to the includes collection of a  permissionGrantPolicy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `microsoft_graph_permission_grant_condition_set` (MicrosoftGraphPermissionGrantConditionSet): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_create_includes(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_create_includes(
        connection,
        permission_grant_policy_id,
        microsoft_graph_permission_grant_condition_set,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/policies/permissionGrantPolicies/#{permission_grant_policy_id}/includes")
      |> add_param(:body, :body, microsoft_graph_permission_grant_condition_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete permissionGrantConditionSet from excludes collection of permissionGrantPolicy
  Deletes a permissionGrantConditionSet from the excludes collection of a permissionGrantPolicy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `permission_grant_condition_set_id` (String.t): The unique identifier of permissionGrantConditionSet
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_delete_excludes(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_delete_excludes(
        connection,
        permission_grant_policy_id,
        permission_grant_condition_set_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/policies/permissionGrantPolicies/#{permission_grant_policy_id}/excludes/#{permission_grant_condition_set_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete permissionGrantConditionSet from includes collection of permissionGrantPolicy
  Deletes a permissionGrantConditionSet from the includes collection of a permissionGrantPolicy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `permission_grant_condition_set_id` (String.t): The unique identifier of permissionGrantConditionSet
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_delete_includes(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_delete_includes(
        connection,
        permission_grant_policy_id,
        permission_grant_condition_set_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/policies/permissionGrantPolicies/#{permission_grant_policy_id}/includes/#{permission_grant_condition_set_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_excludes_get_count7507(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_excludes_get_count7507(
        connection,
        permission_grant_policy_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/permissionGrantPolicies/#{permission_grant_policy_id}/excludes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_get_count86b8(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_get_count86b8(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/permissionGrantPolicies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get excludes from policies
  Condition sets which are excluded in this permission grant policy. Automatically expanded on GET.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `permission_grant_condition_set_id` (String.t): The unique identifier of permissionGrantConditionSet
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_get_excludes(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_get_excludes(
        connection,
        permission_grant_policy_id,
        permission_grant_condition_set_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/policies/permissionGrantPolicies/#{permission_grant_policy_id}/excludes/#{permission_grant_condition_set_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get includes from policies
  Condition sets which are included in this permission grant policy. Automatically expanded on GET.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `permission_grant_condition_set_id` (String.t): The unique identifier of permissionGrantConditionSet
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_get_includes(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_get_includes(
        connection,
        permission_grant_policy_id,
        permission_grant_condition_set_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/policies/permissionGrantPolicies/#{permission_grant_policy_id}/includes/#{permission_grant_condition_set_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_includes_get_count4a76(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_includes_get_count4a76(
        connection,
        permission_grant_policy_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/permissionGrantPolicies/#{permission_grant_policy_id}/includes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List excludes collection of permissionGrantPolicy
  Retrieve the condition sets which are *excluded* in a permissionGrantPolicy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_list_excludes(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSetCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_list_excludes(
        connection,
        permission_grant_policy_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/permissionGrantPolicies/#{permission_grant_policy_id}/excludes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List includes collection of permissionGrantPolicy
  Retrieve the condition sets which are *included* in a permissionGrantPolicy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSetCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_list_includes(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSetCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_list_includes(
        connection,
        permission_grant_policy_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/permissionGrantPolicies/#{permission_grant_policy_id}/includes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSetCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property excludes in policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `permission_grant_condition_set_id` (String.t): The unique identifier of permissionGrantConditionSet
  - `microsoft_graph_permission_grant_condition_set` (MicrosoftGraphPermissionGrantConditionSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_update_excludes(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_update_excludes(
        connection,
        permission_grant_policy_id,
        permission_grant_condition_set_id,
        microsoft_graph_permission_grant_condition_set,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/policies/permissionGrantPolicies/#{permission_grant_policy_id}/excludes/#{permission_grant_condition_set_id}"
      )
      |> add_param(:body, :body, microsoft_graph_permission_grant_condition_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property includes in policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `permission_grant_condition_set_id` (String.t): The unique identifier of permissionGrantConditionSet
  - `microsoft_graph_permission_grant_condition_set` (MicrosoftGraphPermissionGrantConditionSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_permission_grant_policies_update_includes(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet.t()}
          | {:error, Tesla.Env.t()}
  def policies_permission_grant_policies_update_includes(
        connection,
        permission_grant_policy_id,
        permission_grant_condition_set_id,
        microsoft_graph_permission_grant_condition_set,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/policies/permissionGrantPolicies/#{permission_grant_policy_id}/includes/#{permission_grant_condition_set_id}"
      )
      |> add_param(:body, :body, microsoft_graph_permission_grant_condition_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantConditionSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update permissionGrantPolicy
  Update properties of a  permissionGrantPolicy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `permission_grant_policy_id` (String.t): The unique identifier of permissionGrantPolicy
  - `microsoft_graph_permission_grant_policy` (MicrosoftGraphPermissionGrantPolicy): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_update_permission_grant_policies(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicy.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicy.t()}
          | {:error, Tesla.Env.t()}
  def policies_update_permission_grant_policies(
        connection,
        permission_grant_policy_id,
        microsoft_graph_permission_grant_policy,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/policies/permissionGrantPolicies/#{permission_grant_policy_id}")
      |> add_param(:body, :body, microsoft_graph_permission_grant_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPermissionGrantPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
