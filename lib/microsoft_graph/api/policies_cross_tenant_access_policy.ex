# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.PoliciesCrossTenantAccessPolicy do
  @moduledoc """
  API calls for all endpoints tagged `PoliciesCrossTenantAccessPolicy`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create crossTenantAccessPolicyConfigurationPartner
  Create a new partner configuration in a cross-tenant access policy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_cross_tenant_access_policy_configuration_partner` (MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_create_partners(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_create_partners(
        connection,
        microsoft_graph_cross_tenant_access_policy_configuration_partner,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/policies/crossTenantAccessPolicy/partners")
      |> add_param(:body, :body, microsoft_graph_cross_tenant_access_policy_configuration_partner)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property default for policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_delete_default(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_delete_default(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/policies/crossTenantAccessPolicy/default")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete crossTenantAccessPolicyConfigurationPartner
  Delete a partner-specific configuration in a cross-tenant access policy. If a configuration includes a user synchronization policy, you must first delete the user synchronization policy before you can delete the partner-specific configuration. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `cross_tenant_access_policy_configuration_partner_tenant_id` (String.t): The unique identifier of crossTenantAccessPolicyConfigurationPartner
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_delete_partners(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_delete_partners(
        connection,
        cross_tenant_access_policy_configuration_partner_tenant_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/policies/crossTenantAccessPolicy/partners/#{cross_tenant_access_policy_configuration_partner_tenant_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get crossTenantAccessPolicyConfigurationDefault
  Read the default configuration of a cross-tenant access policy. This default configuration may be the service default assigned by Microsoft Entra ID (isServiceDefault is true) or may be customized in your tenant (isServiceDefault is false). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_get_default(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_get_default(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/crossTenantAccessPolicy/default")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get crossTenantAccessPolicyConfigurationPartner
  Read the properties and relationships of a partner-specific configuration. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `cross_tenant_access_policy_configuration_partner_tenant_id` (String.t): The unique identifier of crossTenantAccessPolicyConfigurationPartner
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_get_partners(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_get_partners(
        connection,
        cross_tenant_access_policy_configuration_partner_tenant_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/policies/crossTenantAccessPolicy/partners/#{cross_tenant_access_policy_configuration_partner_tenant_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List partners
  Get a list of all partner configurations within a cross-tenant access policy. You can also use the $expand parameter to list the user synchronization policy for all partner configurations. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartnerCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_list_partners(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartnerCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_list_partners(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/crossTenantAccessPolicy/partners")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartnerCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete crossTenantIdentitySyncPolicyPartner
  Delete the user synchronization policy for a partner-specific configuration. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `cross_tenant_access_policy_configuration_partner_tenant_id` (String.t): The unique identifier of crossTenantAccessPolicyConfigurationPartner
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_partners_delete_identity_synchronization(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_partners_delete_identity_synchronization(
        connection,
        cross_tenant_access_policy_configuration_partner_tenant_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/policies/crossTenantAccessPolicy/partners/#{cross_tenant_access_policy_configuration_partner_tenant_id}/identitySynchronization"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_partners_get_count_d5d2(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_partners_get_count_d5d2(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/crossTenantAccessPolicy/partners/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get crossTenantIdentitySyncPolicyPartner
  Get the user synchronization policy of a partner-specific configuration. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `cross_tenant_access_policy_configuration_partner_tenant_id` (String.t): The unique identifier of crossTenantAccessPolicyConfigurationPartner
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantIdentitySyncPolicyPartner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_partners_get_identity_synchronization(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantIdentitySyncPolicyPartner.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_partners_get_identity_synchronization(
        connection,
        cross_tenant_access_policy_configuration_partner_tenant_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/policies/crossTenantAccessPolicy/partners/#{cross_tenant_access_policy_configuration_partner_tenant_id}/identitySynchronization"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCrossTenantIdentitySyncPolicyPartner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property identitySynchronization in policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `cross_tenant_access_policy_configuration_partner_tenant_id` (String.t): The unique identifier of crossTenantAccessPolicyConfigurationPartner
  - `microsoft_graph_cross_tenant_identity_sync_policy_partner` (MicrosoftGraphCrossTenantIdentitySyncPolicyPartner): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantIdentitySyncPolicyPartner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_partners_update_identity_synchronization(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphCrossTenantIdentitySyncPolicyPartner.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantIdentitySyncPolicyPartner.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_partners_update_identity_synchronization(
        connection,
        cross_tenant_access_policy_configuration_partner_tenant_id,
        microsoft_graph_cross_tenant_identity_sync_policy_partner,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:put)
      |> url(
        "/policies/crossTenantAccessPolicy/partners/#{cross_tenant_access_policy_configuration_partner_tenant_id}/identitySynchronization"
      )
      |> add_param(:body, :body, microsoft_graph_cross_tenant_identity_sync_policy_partner)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCrossTenantIdentitySyncPolicyPartner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update crossTenantAccessPolicyConfigurationDefault
  Update the default configuration of a cross-tenant access policy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_cross_tenant_access_policy_configuration_default` (MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_update_default(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_update_default(
        connection,
        microsoft_graph_cross_tenant_access_policy_configuration_default,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/policies/crossTenantAccessPolicy/default")
      |> add_param(:body, :body, microsoft_graph_cross_tenant_access_policy_configuration_default)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationDefault},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update crossTenantAccessPolicyConfigurationPartner
  Update the properties of a partner-specific configuration. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `cross_tenant_access_policy_configuration_partner_tenant_id` (String.t): The unique identifier of crossTenantAccessPolicyConfigurationPartner
  - `microsoft_graph_cross_tenant_access_policy_configuration_partner` (MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_cross_tenant_access_policy_update_partners(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_cross_tenant_access_policy_update_partners(
        connection,
        cross_tenant_access_policy_configuration_partner_tenant_id,
        microsoft_graph_cross_tenant_access_policy_configuration_partner,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/policies/crossTenantAccessPolicy/partners/#{cross_tenant_access_policy_configuration_partner_tenant_id}"
      )
      |> add_param(:body, :body, microsoft_graph_cross_tenant_access_policy_configuration_partner)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicyConfigurationPartner},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property crossTenantAccessPolicy for policies

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_delete_cross_tenant_access_policy(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_delete_cross_tenant_access_policy(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/policies/crossTenantAccessPolicy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get crossTenantAccessPolicy
  Read the properties and relationships of a crossTenantAccessPolicy object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_get_cross_tenant_access_policy(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicy.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_get_cross_tenant_access_policy(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/policies/crossTenantAccessPolicy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update crossTenantAccessPolicy
  Update the properties of a cross-tenant access policy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_cross_tenant_access_policy` (MicrosoftGraphCrossTenantAccessPolicy): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec policies_update_cross_tenant_access_policy(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicy.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicy.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def policies_update_cross_tenant_access_policy(
        connection,
        microsoft_graph_cross_tenant_access_policy,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/policies/crossTenantAccessPolicy")
      |> add_param(:body, :body, microsoft_graph_cross_tenant_access_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCrossTenantAccessPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
