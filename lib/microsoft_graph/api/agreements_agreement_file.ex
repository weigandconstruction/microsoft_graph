# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.AgreementsAgreementFile do
  @moduledoc """
  API calls for all endpoints tagged `AgreementsAgreementFile`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property file for agreements

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_delete_file(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def agreements_delete_file(connection, agreement_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/agreements/#{agreement_id}/file")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to localizations for agreements

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `microsoft_graph_agreement_file_localization` (MicrosoftGraphAgreementFileLocalization): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_create_localizations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_create_localizations(
        connection,
        agreement_id,
        microsoft_graph_agreement_file_localization,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/agreements/#{agreement_id}/file/localizations")
      |> add_param(:body, :body, microsoft_graph_agreement_file_localization)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property localizations for agreements

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_delete_localizations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_delete_localizations(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get localizations from agreements
  The localized version of the terms of use agreement files attached to the agreement.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_get_localizations(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_get_localizations(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List agreementFileLocalizations
  Get a list of the default and localized agreement files. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalizationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_list_localizations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalizationCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_list_localizations(connection, agreement_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/agreements/#{agreement_id}/file/localizations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalizationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to versions for agreements

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `microsoft_graph_agreement_file_version` (MicrosoftGraphAgreementFileVersion): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_localizations_create_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_localizations_create_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        microsoft_graph_agreement_file_version,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions"
      )
      |> add_param(:body, :body, microsoft_graph_agreement_file_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property versions for agreements

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `agreement_file_version_id` (String.t): The unique identifier of agreementFileVersion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_localizations_delete_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_localizations_delete_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        agreement_file_version_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions/#{agreement_file_version_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_localizations_get_count37c2(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_localizations_get_count37c2(connection, agreement_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/agreements/#{agreement_id}/file/localizations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get versions from agreements
  Read-only. Customized versions of the terms of use agreement in the Microsoft Entra tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `agreement_file_version_id` (String.t): The unique identifier of agreementFileVersion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_localizations_get_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_localizations_get_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        agreement_file_version_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions/#{agreement_file_version_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get versions from agreements
  Read-only. Customized versions of the terms of use agreement in the Microsoft Entra tenant.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_localizations_list_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersionCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_localizations_list_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property versions in agreements

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `agreement_file_version_id` (String.t): The unique identifier of agreementFileVersion
  - `microsoft_graph_agreement_file_version` (MicrosoftGraphAgreementFileVersion): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_localizations_update_versions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_localizations_update_versions(
        connection,
        agreement_id,
        agreement_file_localization_id,
        agreement_file_version_id,
        microsoft_graph_agreement_file_version,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions/#{agreement_file_version_id}"
      )
      |> add_param(:body, :body, microsoft_graph_agreement_file_version)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileVersion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_localizations_versions_get_count_c405(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_localizations_versions_get_count_c405(
        connection,
        agreement_id,
        agreement_file_localization_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}/versions/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property localizations in agreements

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `agreement_file_localization_id` (String.t): The unique identifier of agreementFileLocalization
  - `microsoft_graph_agreement_file_localization` (MicrosoftGraphAgreementFileLocalization): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_file_update_localizations(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization.t()}
          | {:error, Tesla.Env.t()}
  def agreements_file_update_localizations(
        connection,
        agreement_id,
        agreement_file_localization_id,
        microsoft_graph_agreement_file_localization,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/agreements/#{agreement_id}/file/localizations/#{agreement_file_localization_id}")
      |> add_param(:body, :body, microsoft_graph_agreement_file_localization)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFileLocalization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get agreementFile
  Retrieve the details of an agreement file, including the language and version information. The default file can have multiple versions, each with its own language, that can be retrieved by specifying the Accept-Language header. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_get_file(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFile.t()}
          | {:error, Tesla.Env.t()}
  def agreements_get_file(connection, agreement_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/agreements/#{agreement_id}/file")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property file in agreements

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `agreement_id` (String.t): The unique identifier of agreement
  - `microsoft_graph_agreement_file` (MicrosoftGraphAgreementFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec agreements_update_file(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAgreementFile.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAgreementFile.t()}
          | {:error, Tesla.Env.t()}
  def agreements_update_file(
        connection,
        agreement_id,
        microsoft_graph_agreement_file,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/agreements/#{agreement_id}/file")
      |> add_param(:body, :body, microsoft_graph_agreement_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAgreementFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
